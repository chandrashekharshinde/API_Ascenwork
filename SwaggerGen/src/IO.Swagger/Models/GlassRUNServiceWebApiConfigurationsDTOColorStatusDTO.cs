/*
 * WebAPIBuild
 *
 * This is glassRUN web api library for 3rd party and internal reference
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class GlassRUNServiceWebApiConfigurationsDTOColorStatusDTO : IEquatable<GlassRUNServiceWebApiConfigurationsDTOColorStatusDTO>
    { 
        /// <summary>
        /// Gets or Sets RoleId
        /// </summary>
        [DataMember(Name="roleId")]
        public long? RoleId { get; set; }

        /// <summary>
        /// Gets or Sets CultureId
        /// </summary>
        [DataMember(Name="cultureId")]
        public long? CultureId { get; set; }

        /// <summary>
        /// Gets or Sets StatusId
        /// </summary>
        [DataMember(Name="statusId")]
        public long? StatusId { get; set; }

        /// <summary>
        /// Gets or Sets Sequence
        /// </summary>
        [DataMember(Name="sequence")]
        public long? Sequence { get; set; }

        /// <summary>
        /// Gets or Sets Class
        /// </summary>
        [DataMember(Name="class")]
        public string Class { get; set; }

        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [DataMember(Name="status")]
        public string Status { get; set; }

        /// <summary>
        /// Gets or Sets ColorStausList
        /// </summary>
        [DataMember(Name="colorStausList")]
        public Collection<GlassRUNServiceWebApiConfigurationsDTOColorStatusDTO> ColorStausList { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class GlassRUNServiceWebApiConfigurationsDTOColorStatusDTO {\n");
            sb.Append("  RoleId: ").Append(RoleId).Append("\n");
            sb.Append("  CultureId: ").Append(CultureId).Append("\n");
            sb.Append("  StatusId: ").Append(StatusId).Append("\n");
            sb.Append("  Sequence: ").Append(Sequence).Append("\n");
            sb.Append("  Class: ").Append(Class).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  ColorStausList: ").Append(ColorStausList).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((GlassRUNServiceWebApiConfigurationsDTOColorStatusDTO)obj);
        }

        /// <summary>
        /// Returns true if GlassRUNServiceWebApiConfigurationsDTOColorStatusDTO instances are equal
        /// </summary>
        /// <param name="other">Instance of GlassRUNServiceWebApiConfigurationsDTOColorStatusDTO to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(GlassRUNServiceWebApiConfigurationsDTOColorStatusDTO other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    RoleId == other.RoleId ||
                    RoleId != null &&
                    RoleId.Equals(other.RoleId)
                ) && 
                (
                    CultureId == other.CultureId ||
                    CultureId != null &&
                    CultureId.Equals(other.CultureId)
                ) && 
                (
                    StatusId == other.StatusId ||
                    StatusId != null &&
                    StatusId.Equals(other.StatusId)
                ) && 
                (
                    Sequence == other.Sequence ||
                    Sequence != null &&
                    Sequence.Equals(other.Sequence)
                ) && 
                (
                    Class == other.Class ||
                    Class != null &&
                    Class.Equals(other.Class)
                ) && 
                (
                    Status == other.Status ||
                    Status != null &&
                    Status.Equals(other.Status)
                ) && 
                (
                    ColorStausList == other.ColorStausList ||
                    ColorStausList != null &&
                    ColorStausList.SequenceEqual(other.ColorStausList)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (RoleId != null)
                    hashCode = hashCode * 59 + RoleId.GetHashCode();
                    if (CultureId != null)
                    hashCode = hashCode * 59 + CultureId.GetHashCode();
                    if (StatusId != null)
                    hashCode = hashCode * 59 + StatusId.GetHashCode();
                    if (Sequence != null)
                    hashCode = hashCode * 59 + Sequence.GetHashCode();
                    if (Class != null)
                    hashCode = hashCode * 59 + Class.GetHashCode();
                    if (Status != null)
                    hashCode = hashCode * 59 + Status.GetHashCode();
                    if (ColorStausList != null)
                    hashCode = hashCode * 59 + ColorStausList.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(GlassRUNServiceWebApiConfigurationsDTOColorStatusDTO left, GlassRUNServiceWebApiConfigurationsDTOColorStatusDTO right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(GlassRUNServiceWebApiConfigurationsDTOColorStatusDTO left, GlassRUNServiceWebApiConfigurationsDTOColorStatusDTO right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
