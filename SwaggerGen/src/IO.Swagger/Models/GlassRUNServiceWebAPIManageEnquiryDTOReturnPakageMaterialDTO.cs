/*
 * WebAPIBuild
 *
 * This is glassRUN web api library for 3rd party and internal reference
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class GlassRUNServiceWebAPIManageEnquiryDTOReturnPakageMaterialDTO : IEquatable<GlassRUNServiceWebAPIManageEnquiryDTOReturnPakageMaterialDTO>
    { 
        /// <summary>
        /// Gets or Sets ReturnPakageMaterialId
        /// </summary>
        [DataMember(Name="returnPakageMaterialId")]
        public long? ReturnPakageMaterialId { get; set; }

        /// <summary>
        /// Gets or Sets EnquiryId
        /// </summary>
        [DataMember(Name="enquiryId")]
        public long? EnquiryId { get; set; }

        /// <summary>
        /// Gets or Sets ProductCode
        /// </summary>
        [DataMember(Name="productCode")]
        public string ProductCode { get; set; }

        /// <summary>
        /// Gets or Sets ParentProductCode
        /// </summary>
        [DataMember(Name="parentProductCode")]
        public string ParentProductCode { get; set; }

        /// <summary>
        /// Gets or Sets ProductType
        /// </summary>
        [DataMember(Name="productType")]
        public string ProductType { get; set; }

        /// <summary>
        /// Gets or Sets ProductQuantity
        /// </summary>
        [DataMember(Name="productQuantity")]
        public double? ProductQuantity { get; set; }

        /// <summary>
        /// Gets or Sets ItemPricesPerUnit
        /// </summary>
        [DataMember(Name="itemPricesPerUnit")]
        public double? ItemPricesPerUnit { get; set; }

        /// <summary>
        /// Gets or Sets Remarks
        /// </summary>
        [DataMember(Name="remarks")]
        public string Remarks { get; set; }

        /// <summary>
        /// Gets or Sets ItemType
        /// </summary>
        [DataMember(Name="itemType")]
        public long? ItemType { get; set; }

        /// <summary>
        /// Gets or Sets CreatedBy
        /// </summary>
        [DataMember(Name="createdBy")]
        public long? CreatedBy { get; set; }

        /// <summary>
        /// Gets or Sets AssociatedOrder
        /// </summary>
        [DataMember(Name="associatedOrder")]
        public long? AssociatedOrder { get; set; }

        /// <summary>
        /// Gets or Sets CreatedDate
        /// </summary>
        [DataMember(Name="createdDate")]
        public DateTime? CreatedDate { get; set; }

        /// <summary>
        /// Gets or Sets IsActive
        /// </summary>
        [DataMember(Name="isActive")]
        public bool? IsActive { get; set; }

        /// <summary>
        /// Gets or Sets SequenceNo
        /// </summary>
        [DataMember(Name="sequenceNo")]
        public long? SequenceNo { get; set; }

        /// <summary>
        /// Gets or Sets Field1
        /// </summary>
        [DataMember(Name="field1")]
        public string Field1 { get; set; }

        /// <summary>
        /// Gets or Sets Field2
        /// </summary>
        [DataMember(Name="field2")]
        public string Field2 { get; set; }

        /// <summary>
        /// Gets or Sets Field3
        /// </summary>
        [DataMember(Name="field3")]
        public string Field3 { get; set; }

        /// <summary>
        /// Gets or Sets Field4
        /// </summary>
        [DataMember(Name="field4")]
        public string Field4 { get; set; }

        /// <summary>
        /// Gets or Sets Field5
        /// </summary>
        [DataMember(Name="field5")]
        public string Field5 { get; set; }

        /// <summary>
        /// Gets or Sets Field6
        /// </summary>
        [DataMember(Name="field6")]
        public string Field6 { get; set; }

        /// <summary>
        /// Gets or Sets Field7
        /// </summary>
        [DataMember(Name="field7")]
        public string Field7 { get; set; }

        /// <summary>
        /// Gets or Sets Field8
        /// </summary>
        [DataMember(Name="field8")]
        public string Field8 { get; set; }

        /// <summary>
        /// Gets or Sets Field9
        /// </summary>
        [DataMember(Name="field9")]
        public string Field9 { get; set; }

        /// <summary>
        /// Gets or Sets Field10
        /// </summary>
        [DataMember(Name="field10")]
        public string Field10 { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class GlassRUNServiceWebAPIManageEnquiryDTOReturnPakageMaterialDTO {\n");
            sb.Append("  ReturnPakageMaterialId: ").Append(ReturnPakageMaterialId).Append("\n");
            sb.Append("  EnquiryId: ").Append(EnquiryId).Append("\n");
            sb.Append("  ProductCode: ").Append(ProductCode).Append("\n");
            sb.Append("  ParentProductCode: ").Append(ParentProductCode).Append("\n");
            sb.Append("  ProductType: ").Append(ProductType).Append("\n");
            sb.Append("  ProductQuantity: ").Append(ProductQuantity).Append("\n");
            sb.Append("  ItemPricesPerUnit: ").Append(ItemPricesPerUnit).Append("\n");
            sb.Append("  Remarks: ").Append(Remarks).Append("\n");
            sb.Append("  ItemType: ").Append(ItemType).Append("\n");
            sb.Append("  CreatedBy: ").Append(CreatedBy).Append("\n");
            sb.Append("  AssociatedOrder: ").Append(AssociatedOrder).Append("\n");
            sb.Append("  CreatedDate: ").Append(CreatedDate).Append("\n");
            sb.Append("  IsActive: ").Append(IsActive).Append("\n");
            sb.Append("  SequenceNo: ").Append(SequenceNo).Append("\n");
            sb.Append("  Field1: ").Append(Field1).Append("\n");
            sb.Append("  Field2: ").Append(Field2).Append("\n");
            sb.Append("  Field3: ").Append(Field3).Append("\n");
            sb.Append("  Field4: ").Append(Field4).Append("\n");
            sb.Append("  Field5: ").Append(Field5).Append("\n");
            sb.Append("  Field6: ").Append(Field6).Append("\n");
            sb.Append("  Field7: ").Append(Field7).Append("\n");
            sb.Append("  Field8: ").Append(Field8).Append("\n");
            sb.Append("  Field9: ").Append(Field9).Append("\n");
            sb.Append("  Field10: ").Append(Field10).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((GlassRUNServiceWebAPIManageEnquiryDTOReturnPakageMaterialDTO)obj);
        }

        /// <summary>
        /// Returns true if GlassRUNServiceWebAPIManageEnquiryDTOReturnPakageMaterialDTO instances are equal
        /// </summary>
        /// <param name="other">Instance of GlassRUNServiceWebAPIManageEnquiryDTOReturnPakageMaterialDTO to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(GlassRUNServiceWebAPIManageEnquiryDTOReturnPakageMaterialDTO other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    ReturnPakageMaterialId == other.ReturnPakageMaterialId ||
                    ReturnPakageMaterialId != null &&
                    ReturnPakageMaterialId.Equals(other.ReturnPakageMaterialId)
                ) && 
                (
                    EnquiryId == other.EnquiryId ||
                    EnquiryId != null &&
                    EnquiryId.Equals(other.EnquiryId)
                ) && 
                (
                    ProductCode == other.ProductCode ||
                    ProductCode != null &&
                    ProductCode.Equals(other.ProductCode)
                ) && 
                (
                    ParentProductCode == other.ParentProductCode ||
                    ParentProductCode != null &&
                    ParentProductCode.Equals(other.ParentProductCode)
                ) && 
                (
                    ProductType == other.ProductType ||
                    ProductType != null &&
                    ProductType.Equals(other.ProductType)
                ) && 
                (
                    ProductQuantity == other.ProductQuantity ||
                    ProductQuantity != null &&
                    ProductQuantity.Equals(other.ProductQuantity)
                ) && 
                (
                    ItemPricesPerUnit == other.ItemPricesPerUnit ||
                    ItemPricesPerUnit != null &&
                    ItemPricesPerUnit.Equals(other.ItemPricesPerUnit)
                ) && 
                (
                    Remarks == other.Remarks ||
                    Remarks != null &&
                    Remarks.Equals(other.Remarks)
                ) && 
                (
                    ItemType == other.ItemType ||
                    ItemType != null &&
                    ItemType.Equals(other.ItemType)
                ) && 
                (
                    CreatedBy == other.CreatedBy ||
                    CreatedBy != null &&
                    CreatedBy.Equals(other.CreatedBy)
                ) && 
                (
                    AssociatedOrder == other.AssociatedOrder ||
                    AssociatedOrder != null &&
                    AssociatedOrder.Equals(other.AssociatedOrder)
                ) && 
                (
                    CreatedDate == other.CreatedDate ||
                    CreatedDate != null &&
                    CreatedDate.Equals(other.CreatedDate)
                ) && 
                (
                    IsActive == other.IsActive ||
                    IsActive != null &&
                    IsActive.Equals(other.IsActive)
                ) && 
                (
                    SequenceNo == other.SequenceNo ||
                    SequenceNo != null &&
                    SequenceNo.Equals(other.SequenceNo)
                ) && 
                (
                    Field1 == other.Field1 ||
                    Field1 != null &&
                    Field1.Equals(other.Field1)
                ) && 
                (
                    Field2 == other.Field2 ||
                    Field2 != null &&
                    Field2.Equals(other.Field2)
                ) && 
                (
                    Field3 == other.Field3 ||
                    Field3 != null &&
                    Field3.Equals(other.Field3)
                ) && 
                (
                    Field4 == other.Field4 ||
                    Field4 != null &&
                    Field4.Equals(other.Field4)
                ) && 
                (
                    Field5 == other.Field5 ||
                    Field5 != null &&
                    Field5.Equals(other.Field5)
                ) && 
                (
                    Field6 == other.Field6 ||
                    Field6 != null &&
                    Field6.Equals(other.Field6)
                ) && 
                (
                    Field7 == other.Field7 ||
                    Field7 != null &&
                    Field7.Equals(other.Field7)
                ) && 
                (
                    Field8 == other.Field8 ||
                    Field8 != null &&
                    Field8.Equals(other.Field8)
                ) && 
                (
                    Field9 == other.Field9 ||
                    Field9 != null &&
                    Field9.Equals(other.Field9)
                ) && 
                (
                    Field10 == other.Field10 ||
                    Field10 != null &&
                    Field10.Equals(other.Field10)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (ReturnPakageMaterialId != null)
                    hashCode = hashCode * 59 + ReturnPakageMaterialId.GetHashCode();
                    if (EnquiryId != null)
                    hashCode = hashCode * 59 + EnquiryId.GetHashCode();
                    if (ProductCode != null)
                    hashCode = hashCode * 59 + ProductCode.GetHashCode();
                    if (ParentProductCode != null)
                    hashCode = hashCode * 59 + ParentProductCode.GetHashCode();
                    if (ProductType != null)
                    hashCode = hashCode * 59 + ProductType.GetHashCode();
                    if (ProductQuantity != null)
                    hashCode = hashCode * 59 + ProductQuantity.GetHashCode();
                    if (ItemPricesPerUnit != null)
                    hashCode = hashCode * 59 + ItemPricesPerUnit.GetHashCode();
                    if (Remarks != null)
                    hashCode = hashCode * 59 + Remarks.GetHashCode();
                    if (ItemType != null)
                    hashCode = hashCode * 59 + ItemType.GetHashCode();
                    if (CreatedBy != null)
                    hashCode = hashCode * 59 + CreatedBy.GetHashCode();
                    if (AssociatedOrder != null)
                    hashCode = hashCode * 59 + AssociatedOrder.GetHashCode();
                    if (CreatedDate != null)
                    hashCode = hashCode * 59 + CreatedDate.GetHashCode();
                    if (IsActive != null)
                    hashCode = hashCode * 59 + IsActive.GetHashCode();
                    if (SequenceNo != null)
                    hashCode = hashCode * 59 + SequenceNo.GetHashCode();
                    if (Field1 != null)
                    hashCode = hashCode * 59 + Field1.GetHashCode();
                    if (Field2 != null)
                    hashCode = hashCode * 59 + Field2.GetHashCode();
                    if (Field3 != null)
                    hashCode = hashCode * 59 + Field3.GetHashCode();
                    if (Field4 != null)
                    hashCode = hashCode * 59 + Field4.GetHashCode();
                    if (Field5 != null)
                    hashCode = hashCode * 59 + Field5.GetHashCode();
                    if (Field6 != null)
                    hashCode = hashCode * 59 + Field6.GetHashCode();
                    if (Field7 != null)
                    hashCode = hashCode * 59 + Field7.GetHashCode();
                    if (Field8 != null)
                    hashCode = hashCode * 59 + Field8.GetHashCode();
                    if (Field9 != null)
                    hashCode = hashCode * 59 + Field9.GetHashCode();
                    if (Field10 != null)
                    hashCode = hashCode * 59 + Field10.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(GlassRUNServiceWebAPIManageEnquiryDTOReturnPakageMaterialDTO left, GlassRUNServiceWebAPIManageEnquiryDTOReturnPakageMaterialDTO right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(GlassRUNServiceWebAPIManageEnquiryDTOReturnPakageMaterialDTO left, GlassRUNServiceWebAPIManageEnquiryDTOReturnPakageMaterialDTO right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
