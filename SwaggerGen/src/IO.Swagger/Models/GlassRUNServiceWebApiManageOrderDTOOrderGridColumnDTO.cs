/*
 * WebAPIBuild
 *
 * This is glassRUN web api library for 3rd party and internal reference
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class GlassRUNServiceWebApiManageOrderDTOOrderGridColumnDTO : IEquatable<GlassRUNServiceWebApiManageOrderDTOOrderGridColumnDTO>
    { 
        /// <summary>
        /// Gets or Sets PropertyName
        /// </summary>
        [DataMember(Name="propertyName")]
        public string PropertyName { get; set; }

        /// <summary>
        /// Gets or Sets ResourceValue
        /// </summary>
        [DataMember(Name="resourceValue")]
        public string ResourceValue { get; set; }

        /// <summary>
        /// Gets or Sets SequenceNumber
        /// </summary>
        [DataMember(Name="sequenceNumber")]
        public string SequenceNumber { get; set; }

        /// <summary>
        /// Gets or Sets IsMandatory
        /// </summary>
        [DataMember(Name="isMandatory")]
        public string IsMandatory { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class GlassRUNServiceWebApiManageOrderDTOOrderGridColumnDTO {\n");
            sb.Append("  PropertyName: ").Append(PropertyName).Append("\n");
            sb.Append("  ResourceValue: ").Append(ResourceValue).Append("\n");
            sb.Append("  SequenceNumber: ").Append(SequenceNumber).Append("\n");
            sb.Append("  IsMandatory: ").Append(IsMandatory).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((GlassRUNServiceWebApiManageOrderDTOOrderGridColumnDTO)obj);
        }

        /// <summary>
        /// Returns true if GlassRUNServiceWebApiManageOrderDTOOrderGridColumnDTO instances are equal
        /// </summary>
        /// <param name="other">Instance of GlassRUNServiceWebApiManageOrderDTOOrderGridColumnDTO to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(GlassRUNServiceWebApiManageOrderDTOOrderGridColumnDTO other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    PropertyName == other.PropertyName ||
                    PropertyName != null &&
                    PropertyName.Equals(other.PropertyName)
                ) && 
                (
                    ResourceValue == other.ResourceValue ||
                    ResourceValue != null &&
                    ResourceValue.Equals(other.ResourceValue)
                ) && 
                (
                    SequenceNumber == other.SequenceNumber ||
                    SequenceNumber != null &&
                    SequenceNumber.Equals(other.SequenceNumber)
                ) && 
                (
                    IsMandatory == other.IsMandatory ||
                    IsMandatory != null &&
                    IsMandatory.Equals(other.IsMandatory)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (PropertyName != null)
                    hashCode = hashCode * 59 + PropertyName.GetHashCode();
                    if (ResourceValue != null)
                    hashCode = hashCode * 59 + ResourceValue.GetHashCode();
                    if (SequenceNumber != null)
                    hashCode = hashCode * 59 + SequenceNumber.GetHashCode();
                    if (IsMandatory != null)
                    hashCode = hashCode * 59 + IsMandatory.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(GlassRUNServiceWebApiManageOrderDTOOrderGridColumnDTO left, GlassRUNServiceWebApiManageOrderDTOOrderGridColumnDTO right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(GlassRUNServiceWebApiManageOrderDTOOrderGridColumnDTO left, GlassRUNServiceWebApiManageOrderDTOOrderGridColumnDTO right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
