/*
 * WebAPIBuild
 *
 * This is glassRUN web api library for 3rd party and internal reference
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class GlassRUNServiceWebApiManageOrderDTOReceiveOrderDTO : IEquatable<GlassRUNServiceWebApiManageOrderDTOReceiveOrderDTO>
    { 
        /// <summary>
        /// Gets or Sets DocumentBlob
        /// </summary>
        [DataMember(Name="documentBlob")]
        public string DocumentBlob { get; set; }

        /// <summary>
        /// Gets or Sets LoginId
        /// </summary>
        [DataMember(Name="loginId")]
        public long? LoginId { get; set; }

        /// <summary>
        /// Gets or Sets DocumentDescription
        /// </summary>
        [DataMember(Name="documentDescription")]
        public string DocumentDescription { get; set; }

        /// <summary>
        /// Gets or Sets DocumentFormat
        /// </summary>
        [DataMember(Name="documentFormat")]
        public string DocumentFormat { get; set; }

        /// <summary>
        /// Gets or Sets IsPartialReceive
        /// </summary>
        [DataMember(Name="isPartialReceive")]
        public bool? IsPartialReceive { get; set; }

        /// <summary>
        /// Gets or Sets IsReceive
        /// </summary>
        [DataMember(Name="isReceive")]
        public bool? IsReceive { get; set; }

        /// <summary>
        /// Gets or Sets DocumentTypeId
        /// </summary>
        [DataMember(Name="documentTypeId")]
        public int? DocumentTypeId { get; set; }

        /// <summary>
        /// Gets or Sets OrderDocumentId
        /// </summary>
        [DataMember(Name="orderDocumentId")]
        public long? OrderDocumentId { get; set; }

        /// <summary>
        /// Gets or Sets OrderId
        /// </summary>
        [DataMember(Name="orderId")]
        public long? OrderId { get; set; }

        /// <summary>
        /// Gets or Sets OrderNumber
        /// </summary>
        [DataMember(Name="orderNumber")]
        public string OrderNumber { get; set; }

        /// <summary>
        /// Gets or Sets EnquiryAutoNumber
        /// </summary>
        [DataMember(Name="enquiryAutoNumber")]
        public string EnquiryAutoNumber { get; set; }

        /// <summary>
        /// Gets or Sets OrderProductId
        /// </summary>
        [DataMember(Name="orderProductId")]
        public long? OrderProductId { get; set; }

        /// <summary>
        /// Gets or Sets ReceivedBy
        /// </summary>
        [DataMember(Name="receivedBy")]
        public string ReceivedBy { get; set; }

        /// <summary>
        /// Gets or Sets Coordinates
        /// </summary>
        [DataMember(Name="coordinates")]
        public string Coordinates { get; set; }

        /// <summary>
        /// Gets or Sets ReceivedDate
        /// </summary>
        [DataMember(Name="receivedDate")]
        public DateTime? ReceivedDate { get; set; }

        /// <summary>
        /// Gets or Sets OrderDocumentList
        /// </summary>
        [DataMember(Name="orderDocumentList")]
        public Collection<GlassRUNServiceWebApiManageOrderDTOOrderDocumentDTO> OrderDocumentList { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class GlassRUNServiceWebApiManageOrderDTOReceiveOrderDTO {\n");
            sb.Append("  DocumentBlob: ").Append(DocumentBlob).Append("\n");
            sb.Append("  LoginId: ").Append(LoginId).Append("\n");
            sb.Append("  DocumentDescription: ").Append(DocumentDescription).Append("\n");
            sb.Append("  DocumentFormat: ").Append(DocumentFormat).Append("\n");
            sb.Append("  IsPartialReceive: ").Append(IsPartialReceive).Append("\n");
            sb.Append("  IsReceive: ").Append(IsReceive).Append("\n");
            sb.Append("  DocumentTypeId: ").Append(DocumentTypeId).Append("\n");
            sb.Append("  OrderDocumentId: ").Append(OrderDocumentId).Append("\n");
            sb.Append("  OrderId: ").Append(OrderId).Append("\n");
            sb.Append("  OrderNumber: ").Append(OrderNumber).Append("\n");
            sb.Append("  EnquiryAutoNumber: ").Append(EnquiryAutoNumber).Append("\n");
            sb.Append("  OrderProductId: ").Append(OrderProductId).Append("\n");
            sb.Append("  ReceivedBy: ").Append(ReceivedBy).Append("\n");
            sb.Append("  Coordinates: ").Append(Coordinates).Append("\n");
            sb.Append("  ReceivedDate: ").Append(ReceivedDate).Append("\n");
            sb.Append("  OrderDocumentList: ").Append(OrderDocumentList).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((GlassRUNServiceWebApiManageOrderDTOReceiveOrderDTO)obj);
        }

        /// <summary>
        /// Returns true if GlassRUNServiceWebApiManageOrderDTOReceiveOrderDTO instances are equal
        /// </summary>
        /// <param name="other">Instance of GlassRUNServiceWebApiManageOrderDTOReceiveOrderDTO to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(GlassRUNServiceWebApiManageOrderDTOReceiveOrderDTO other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    DocumentBlob == other.DocumentBlob ||
                    DocumentBlob != null &&
                    DocumentBlob.Equals(other.DocumentBlob)
                ) && 
                (
                    LoginId == other.LoginId ||
                    LoginId != null &&
                    LoginId.Equals(other.LoginId)
                ) && 
                (
                    DocumentDescription == other.DocumentDescription ||
                    DocumentDescription != null &&
                    DocumentDescription.Equals(other.DocumentDescription)
                ) && 
                (
                    DocumentFormat == other.DocumentFormat ||
                    DocumentFormat != null &&
                    DocumentFormat.Equals(other.DocumentFormat)
                ) && 
                (
                    IsPartialReceive == other.IsPartialReceive ||
                    IsPartialReceive != null &&
                    IsPartialReceive.Equals(other.IsPartialReceive)
                ) && 
                (
                    IsReceive == other.IsReceive ||
                    IsReceive != null &&
                    IsReceive.Equals(other.IsReceive)
                ) && 
                (
                    DocumentTypeId == other.DocumentTypeId ||
                    DocumentTypeId != null &&
                    DocumentTypeId.Equals(other.DocumentTypeId)
                ) && 
                (
                    OrderDocumentId == other.OrderDocumentId ||
                    OrderDocumentId != null &&
                    OrderDocumentId.Equals(other.OrderDocumentId)
                ) && 
                (
                    OrderId == other.OrderId ||
                    OrderId != null &&
                    OrderId.Equals(other.OrderId)
                ) && 
                (
                    OrderNumber == other.OrderNumber ||
                    OrderNumber != null &&
                    OrderNumber.Equals(other.OrderNumber)
                ) && 
                (
                    EnquiryAutoNumber == other.EnquiryAutoNumber ||
                    EnquiryAutoNumber != null &&
                    EnquiryAutoNumber.Equals(other.EnquiryAutoNumber)
                ) && 
                (
                    OrderProductId == other.OrderProductId ||
                    OrderProductId != null &&
                    OrderProductId.Equals(other.OrderProductId)
                ) && 
                (
                    ReceivedBy == other.ReceivedBy ||
                    ReceivedBy != null &&
                    ReceivedBy.Equals(other.ReceivedBy)
                ) && 
                (
                    Coordinates == other.Coordinates ||
                    Coordinates != null &&
                    Coordinates.Equals(other.Coordinates)
                ) && 
                (
                    ReceivedDate == other.ReceivedDate ||
                    ReceivedDate != null &&
                    ReceivedDate.Equals(other.ReceivedDate)
                ) && 
                (
                    OrderDocumentList == other.OrderDocumentList ||
                    OrderDocumentList != null &&
                    OrderDocumentList.SequenceEqual(other.OrderDocumentList)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (DocumentBlob != null)
                    hashCode = hashCode * 59 + DocumentBlob.GetHashCode();
                    if (LoginId != null)
                    hashCode = hashCode * 59 + LoginId.GetHashCode();
                    if (DocumentDescription != null)
                    hashCode = hashCode * 59 + DocumentDescription.GetHashCode();
                    if (DocumentFormat != null)
                    hashCode = hashCode * 59 + DocumentFormat.GetHashCode();
                    if (IsPartialReceive != null)
                    hashCode = hashCode * 59 + IsPartialReceive.GetHashCode();
                    if (IsReceive != null)
                    hashCode = hashCode * 59 + IsReceive.GetHashCode();
                    if (DocumentTypeId != null)
                    hashCode = hashCode * 59 + DocumentTypeId.GetHashCode();
                    if (OrderDocumentId != null)
                    hashCode = hashCode * 59 + OrderDocumentId.GetHashCode();
                    if (OrderId != null)
                    hashCode = hashCode * 59 + OrderId.GetHashCode();
                    if (OrderNumber != null)
                    hashCode = hashCode * 59 + OrderNumber.GetHashCode();
                    if (EnquiryAutoNumber != null)
                    hashCode = hashCode * 59 + EnquiryAutoNumber.GetHashCode();
                    if (OrderProductId != null)
                    hashCode = hashCode * 59 + OrderProductId.GetHashCode();
                    if (ReceivedBy != null)
                    hashCode = hashCode * 59 + ReceivedBy.GetHashCode();
                    if (Coordinates != null)
                    hashCode = hashCode * 59 + Coordinates.GetHashCode();
                    if (ReceivedDate != null)
                    hashCode = hashCode * 59 + ReceivedDate.GetHashCode();
                    if (OrderDocumentList != null)
                    hashCode = hashCode * 59 + OrderDocumentList.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(GlassRUNServiceWebApiManageOrderDTOReceiveOrderDTO left, GlassRUNServiceWebApiManageOrderDTOReceiveOrderDTO right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(GlassRUNServiceWebApiManageOrderDTOReceiveOrderDTO left, GlassRUNServiceWebApiManageOrderDTOReceiveOrderDTO right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
