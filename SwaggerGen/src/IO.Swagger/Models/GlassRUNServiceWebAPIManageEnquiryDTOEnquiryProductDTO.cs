/*
 * WebAPIBuild
 *
 * This is glassRUN web api library for 3rd party and internal reference
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class GlassRUNServiceWebAPIManageEnquiryDTOEnquiryProductDTO : IEquatable<GlassRUNServiceWebAPIManageEnquiryDTOEnquiryProductDTO>
    { 
        /// <summary>
        /// Gets or Sets EnquiryAutoNumber
        /// </summary>
        [DataMember(Name="enquiryAutoNumber")]
        public string EnquiryAutoNumber { get; set; }

        /// <summary>
        /// Gets or Sets AssociatedOrderNumber
        /// </summary>
        [DataMember(Name="associatedOrderNumber")]
        public string AssociatedOrderNumber { get; set; }

        /// <summary>
        /// Gets or Sets EnquiryGuid
        /// </summary>
        [DataMember(Name="enquiryGuid")]
        public string EnquiryGuid { get; set; }

        /// <summary>
        /// Gets or Sets EnquiryProductId
        /// </summary>
        [DataMember(Name="enquiryProductId")]
        public long? EnquiryProductId { get; set; }

        /// <summary>
        /// Gets or Sets ItemId
        /// </summary>
        [DataMember(Name="itemId")]
        public long? ItemId { get; set; }

        /// <summary>
        /// Gets or Sets TotalEnquiriesCount
        /// </summary>
        [DataMember(Name="totalEnquiriesCount")]
        public long? TotalEnquiriesCount { get; set; }

        /// <summary>
        /// Gets or Sets ParentItemId
        /// </summary>
        [DataMember(Name="parentItemId")]
        public long? ParentItemId { get; set; }

        /// <summary>
        /// Gets or Sets CompanyId
        /// </summary>
        [DataMember(Name="companyId")]
        public long? CompanyId { get; set; }

        /// <summary>
        /// Gets or Sets CompanyCode
        /// </summary>
        [DataMember(Name="companyCode")]
        public string CompanyCode { get; set; }

        /// <summary>
        /// Gets or Sets EnquiryId
        /// </summary>
        [DataMember(Name="enquiryId")]
        public long? EnquiryId { get; set; }

        /// <summary>
        /// Gets or Sets ProductCode
        /// </summary>
        [DataMember(Name="productCode")]
        public string ProductCode { get; set; }

        /// <summary>
        /// Gets or Sets PrimaryUnitOfMeasure
        /// </summary>
        [DataMember(Name="primaryUnitOfMeasure")]
        public string PrimaryUnitOfMeasure { get; set; }

        /// <summary>
        /// Gets or Sets ProductName
        /// </summary>
        [DataMember(Name="productName")]
        public string ProductName { get; set; }

        /// <summary>
        /// Gets or Sets ItemNameInDefaultLanguage
        /// </summary>
        [DataMember(Name="itemNameInDefaultLanguage")]
        public string ItemNameInDefaultLanguage { get; set; }

        /// <summary>
        /// Gets or Sets Uom
        /// </summary>
        [DataMember(Name="uom")]
        public string Uom { get; set; }

        /// <summary>
        /// Gets or Sets ParentProductCode
        /// </summary>
        [DataMember(Name="parentProductCode")]
        public string ParentProductCode { get; set; }

        /// <summary>
        /// Gets or Sets ProductType
        /// </summary>
        [DataMember(Name="productType")]
        public string ProductType { get; set; }

        /// <summary>
        /// Gets or Sets ProductQuantity
        /// </summary>
        [DataMember(Name="productQuantity")]
        public double? ProductQuantity { get; set; }

        /// <summary>
        /// Gets or Sets WeightPerUnit
        /// </summary>
        [DataMember(Name="weightPerUnit")]
        public double? WeightPerUnit { get; set; }

        /// <summary>
        /// Gets or Sets AvailableQuantity
        /// </summary>
        [DataMember(Name="availableQuantity")]
        public double? AvailableQuantity { get; set; }

        /// <summary>
        /// Gets or Sets DepositeAmount
        /// </summary>
        [DataMember(Name="depositeAmount")]
        public double? DepositeAmount { get; set; }

        /// <summary>
        /// Gets or Sets Remarks
        /// </summary>
        [DataMember(Name="remarks")]
        public string Remarks { get; set; }

        /// <summary>
        /// Gets or Sets AssociatedOrder
        /// </summary>
        [DataMember(Name="associatedOrder")]
        public string AssociatedOrder { get; set; }

        /// <summary>
        /// Gets or Sets ItemPricesPerUnit
        /// </summary>
        [DataMember(Name="itemPricesPerUnit")]
        public double? ItemPricesPerUnit { get; set; }

        /// <summary>
        /// Gets or Sets EffectiveDate
        /// </summary>
        [DataMember(Name="effectiveDate")]
        public DateTime? EffectiveDate { get; set; }

        /// <summary>
        /// Gets or Sets Price
        /// </summary>
        [DataMember(Name="price")]
        public double? Price { get; set; }

        /// <summary>
        /// Gets or Sets UnitPrice
        /// </summary>
        [DataMember(Name="unitPrice")]
        public double? UnitPrice { get; set; }

        /// <summary>
        /// Gets or Sets TotalUnitPrice
        /// </summary>
        [DataMember(Name="totalUnitPrice")]
        public double? TotalUnitPrice { get; set; }

        /// <summary>
        /// Gets or Sets CurrentStockPosition
        /// </summary>
        [DataMember(Name="currentStockPosition")]
        public long? CurrentStockPosition { get; set; }

        /// <summary>
        /// Gets or Sets CreatedDate
        /// </summary>
        [DataMember(Name="createdDate")]
        public DateTime? CreatedDate { get; set; }

        /// <summary>
        /// Gets or Sets ModifiedDate
        /// </summary>
        [DataMember(Name="modifiedDate")]
        public DateTime? ModifiedDate { get; set; }

        /// <summary>
        /// Gets or Sets ItemType
        /// </summary>
        [DataMember(Name="itemType")]
        public long? ItemType { get; set; }

        /// <summary>
        /// Gets or Sets CurrentItemPalettesCorrectWeight
        /// </summary>
        [DataMember(Name="currentItemPalettesCorrectWeight")]
        public double? CurrentItemPalettesCorrectWeight { get; set; }

        /// <summary>
        /// Gets or Sets CurrentItemTruckCapacityFullInTon
        /// </summary>
        [DataMember(Name="currentItemTruckCapacityFullInTon")]
        public double? CurrentItemTruckCapacityFullInTon { get; set; }

        /// <summary>
        /// Gets or Sets IsActive
        /// </summary>
        [DataMember(Name="isActive")]
        public string IsActive { get; set; }

        /// <summary>
        /// Gets or Sets NumberOfExtraPallet
        /// </summary>
        [DataMember(Name="numberOfExtraPallet")]
        public long? NumberOfExtraPallet { get; set; }

        /// <summary>
        /// Gets or Sets PriorityRating
        /// </summary>
        [DataMember(Name="priorityRating")]
        public int? PriorityRating { get; set; }

        /// <summary>
        /// Gets or Sets SequenceNo
        /// </summary>
        [DataMember(Name="sequenceNo")]
        public long? SequenceNo { get; set; }

        /// <summary>
        /// Gets or Sets Field1
        /// </summary>
        [DataMember(Name="field1")]
        public string Field1 { get; set; }

        /// <summary>
        /// Gets or Sets Field2
        /// </summary>
        [DataMember(Name="field2")]
        public string Field2 { get; set; }

        /// <summary>
        /// Gets or Sets Field3
        /// </summary>
        [DataMember(Name="field3")]
        public string Field3 { get; set; }

        /// <summary>
        /// Gets or Sets Field4
        /// </summary>
        [DataMember(Name="field4")]
        public string Field4 { get; set; }

        /// <summary>
        /// Gets or Sets Field5
        /// </summary>
        [DataMember(Name="field5")]
        public string Field5 { get; set; }

        /// <summary>
        /// Gets or Sets Field6
        /// </summary>
        [DataMember(Name="field6")]
        public string Field6 { get; set; }

        /// <summary>
        /// Gets or Sets Field7
        /// </summary>
        [DataMember(Name="field7")]
        public string Field7 { get; set; }

        /// <summary>
        /// Gets or Sets Field8
        /// </summary>
        [DataMember(Name="field8")]
        public string Field8 { get; set; }

        /// <summary>
        /// Gets or Sets Field9
        /// </summary>
        [DataMember(Name="field9")]
        public string Field9 { get; set; }

        /// <summary>
        /// Gets or Sets Field10
        /// </summary>
        [DataMember(Name="field10")]
        public string Field10 { get; set; }

        /// <summary>
        /// Gets or Sets DiscountPercent
        /// </summary>
        [DataMember(Name="discountPercent")]
        public double? DiscountPercent { get; set; }

        /// <summary>
        /// Gets or Sets DiscountAmount
        /// </summary>
        [DataMember(Name="discountAmount")]
        public double? DiscountAmount { get; set; }

        /// <summary>
        /// Gets or Sets PaymentType
        /// </summary>
        [DataMember(Name="paymentType")]
        public long? PaymentType { get; set; }

        /// <summary>
        /// Gets or Sets ReplacementParentProductId
        /// </summary>
        [DataMember(Name="replacementParentProductId")]
        public long? ReplacementParentProductId { get; set; }

        /// <summary>
        /// Gets or Sets IsReplaceable
        /// </summary>
        [DataMember(Name="isReplaceable")]
        public string IsReplaceable { get; set; }

        /// <summary>
        /// Gets or Sets LastStatus
        /// </summary>
        [DataMember(Name="lastStatus")]
        public long? LastStatus { get; set; }

        /// <summary>
        /// Gets or Sets NextStatus
        /// </summary>
        [DataMember(Name="nextStatus")]
        public long? NextStatus { get; set; }

        /// <summary>
        /// Gets or Sets StockLocationCode
        /// </summary>
        [DataMember(Name="stockLocationCode")]
        public string StockLocationCode { get; set; }

        /// <summary>
        /// Gets or Sets StockLocationName
        /// </summary>
        [DataMember(Name="stockLocationName")]
        public string StockLocationName { get; set; }

        /// <summary>
        /// Gets or Sets TotalVolume
        /// </summary>
        [DataMember(Name="totalVolume")]
        public double? TotalVolume { get; set; }

        /// <summary>
        /// Gets or Sets TotalWeight
        /// </summary>
        [DataMember(Name="totalWeight")]
        public double? TotalWeight { get; set; }

        /// <summary>
        /// Gets or Sets CollectionLocationCode
        /// </summary>
        [DataMember(Name="collectionLocationCode")]
        public string CollectionLocationCode { get; set; }

        /// <summary>
        /// Gets or Sets PackingItemCount
        /// </summary>
        [DataMember(Name="packingItemCount")]
        public double? PackingItemCount { get; set; }

        /// <summary>
        /// Gets or Sets PackingItemCode
        /// </summary>
        [DataMember(Name="packingItemCode")]
        public string PackingItemCode { get; set; }

        /// <summary>
        /// Gets or Sets IsPackingItem
        /// </summary>
        [DataMember(Name="isPackingItem")]
        public string IsPackingItem { get; set; }

        /// <summary>
        /// Gets or Sets NumberOfExtraPalettes
        /// </summary>
        [DataMember(Name="numberOfExtraPalettes")]
        public long? NumberOfExtraPalettes { get; set; }

        /// <summary>
        /// Gets or Sets DepositeAmountPerUnit
        /// </summary>
        [DataMember(Name="depositeAmountPerUnit")]
        public double? DepositeAmountPerUnit { get; set; }

        /// <summary>
        /// Gets or Sets AllocationExists
        /// </summary>
        [DataMember(Name="allocationExists")]
        public string AllocationExists { get; set; }

        /// <summary>
        /// Gets or Sets AllocationQty
        /// </summary>
        [DataMember(Name="allocationQty")]
        public long? AllocationQty { get; set; }

        /// <summary>
        /// Gets or Sets ImageUrl
        /// </summary>
        [DataMember(Name="imageUrl")]
        public string ImageUrl { get; set; }

        /// <summary>
        /// Gets or Sets CreatedBy
        /// </summary>
        [DataMember(Name="createdBy")]
        public long? CreatedBy { get; set; }

        /// <summary>
        /// Gets or Sets ModifiedBy
        /// </summary>
        [DataMember(Name="modifiedBy")]
        public long? ModifiedBy { get; set; }

        /// <summary>
        /// Gets or Sets NumberOfPromotions
        /// </summary>
        [DataMember(Name="numberOfPromotions")]
        public long? NumberOfPromotions { get; set; }

        /// <summary>
        /// Gets or Sets AdditionalQuantity
        /// </summary>
        [DataMember(Name="additionalQuantity")]
        public double? AdditionalQuantity { get; set; }

        /// <summary>
        /// Gets or Sets AvailableNumberOfPromotions
        /// </summary>
        [DataMember(Name="availableNumberOfPromotions")]
        public long? AvailableNumberOfPromotions { get; set; }

        /// <summary>
        /// Gets or Sets AvailableAdditionalQuantity
        /// </summary>
        [DataMember(Name="availableAdditionalQuantity")]
        public double? AvailableAdditionalQuantity { get; set; }

        /// <summary>
        /// Gets or Sets PromotionRefId
        /// </summary>
        [DataMember(Name="promotionRefId")]
        public string PromotionRefId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class GlassRUNServiceWebAPIManageEnquiryDTOEnquiryProductDTO {\n");
            sb.Append("  EnquiryAutoNumber: ").Append(EnquiryAutoNumber).Append("\n");
            sb.Append("  AssociatedOrderNumber: ").Append(AssociatedOrderNumber).Append("\n");
            sb.Append("  EnquiryGuid: ").Append(EnquiryGuid).Append("\n");
            sb.Append("  EnquiryProductId: ").Append(EnquiryProductId).Append("\n");
            sb.Append("  ItemId: ").Append(ItemId).Append("\n");
            sb.Append("  TotalEnquiriesCount: ").Append(TotalEnquiriesCount).Append("\n");
            sb.Append("  ParentItemId: ").Append(ParentItemId).Append("\n");
            sb.Append("  CompanyId: ").Append(CompanyId).Append("\n");
            sb.Append("  CompanyCode: ").Append(CompanyCode).Append("\n");
            sb.Append("  EnquiryId: ").Append(EnquiryId).Append("\n");
            sb.Append("  ProductCode: ").Append(ProductCode).Append("\n");
            sb.Append("  PrimaryUnitOfMeasure: ").Append(PrimaryUnitOfMeasure).Append("\n");
            sb.Append("  ProductName: ").Append(ProductName).Append("\n");
            sb.Append("  ItemNameInDefaultLanguage: ").Append(ItemNameInDefaultLanguage).Append("\n");
            sb.Append("  Uom: ").Append(Uom).Append("\n");
            sb.Append("  ParentProductCode: ").Append(ParentProductCode).Append("\n");
            sb.Append("  ProductType: ").Append(ProductType).Append("\n");
            sb.Append("  ProductQuantity: ").Append(ProductQuantity).Append("\n");
            sb.Append("  WeightPerUnit: ").Append(WeightPerUnit).Append("\n");
            sb.Append("  AvailableQuantity: ").Append(AvailableQuantity).Append("\n");
            sb.Append("  DepositeAmount: ").Append(DepositeAmount).Append("\n");
            sb.Append("  Remarks: ").Append(Remarks).Append("\n");
            sb.Append("  AssociatedOrder: ").Append(AssociatedOrder).Append("\n");
            sb.Append("  ItemPricesPerUnit: ").Append(ItemPricesPerUnit).Append("\n");
            sb.Append("  EffectiveDate: ").Append(EffectiveDate).Append("\n");
            sb.Append("  Price: ").Append(Price).Append("\n");
            sb.Append("  UnitPrice: ").Append(UnitPrice).Append("\n");
            sb.Append("  TotalUnitPrice: ").Append(TotalUnitPrice).Append("\n");
            sb.Append("  CurrentStockPosition: ").Append(CurrentStockPosition).Append("\n");
            sb.Append("  CreatedDate: ").Append(CreatedDate).Append("\n");
            sb.Append("  ModifiedDate: ").Append(ModifiedDate).Append("\n");
            sb.Append("  ItemType: ").Append(ItemType).Append("\n");
            sb.Append("  CurrentItemPalettesCorrectWeight: ").Append(CurrentItemPalettesCorrectWeight).Append("\n");
            sb.Append("  CurrentItemTruckCapacityFullInTon: ").Append(CurrentItemTruckCapacityFullInTon).Append("\n");
            sb.Append("  IsActive: ").Append(IsActive).Append("\n");
            sb.Append("  NumberOfExtraPallet: ").Append(NumberOfExtraPallet).Append("\n");
            sb.Append("  PriorityRating: ").Append(PriorityRating).Append("\n");
            sb.Append("  SequenceNo: ").Append(SequenceNo).Append("\n");
            sb.Append("  Field1: ").Append(Field1).Append("\n");
            sb.Append("  Field2: ").Append(Field2).Append("\n");
            sb.Append("  Field3: ").Append(Field3).Append("\n");
            sb.Append("  Field4: ").Append(Field4).Append("\n");
            sb.Append("  Field5: ").Append(Field5).Append("\n");
            sb.Append("  Field6: ").Append(Field6).Append("\n");
            sb.Append("  Field7: ").Append(Field7).Append("\n");
            sb.Append("  Field8: ").Append(Field8).Append("\n");
            sb.Append("  Field9: ").Append(Field9).Append("\n");
            sb.Append("  Field10: ").Append(Field10).Append("\n");
            sb.Append("  DiscountPercent: ").Append(DiscountPercent).Append("\n");
            sb.Append("  DiscountAmount: ").Append(DiscountAmount).Append("\n");
            sb.Append("  PaymentType: ").Append(PaymentType).Append("\n");
            sb.Append("  ReplacementParentProductId: ").Append(ReplacementParentProductId).Append("\n");
            sb.Append("  IsReplaceable: ").Append(IsReplaceable).Append("\n");
            sb.Append("  LastStatus: ").Append(LastStatus).Append("\n");
            sb.Append("  NextStatus: ").Append(NextStatus).Append("\n");
            sb.Append("  StockLocationCode: ").Append(StockLocationCode).Append("\n");
            sb.Append("  StockLocationName: ").Append(StockLocationName).Append("\n");
            sb.Append("  TotalVolume: ").Append(TotalVolume).Append("\n");
            sb.Append("  TotalWeight: ").Append(TotalWeight).Append("\n");
            sb.Append("  CollectionLocationCode: ").Append(CollectionLocationCode).Append("\n");
            sb.Append("  PackingItemCount: ").Append(PackingItemCount).Append("\n");
            sb.Append("  PackingItemCode: ").Append(PackingItemCode).Append("\n");
            sb.Append("  IsPackingItem: ").Append(IsPackingItem).Append("\n");
            sb.Append("  NumberOfExtraPalettes: ").Append(NumberOfExtraPalettes).Append("\n");
            sb.Append("  DepositeAmountPerUnit: ").Append(DepositeAmountPerUnit).Append("\n");
            sb.Append("  AllocationExists: ").Append(AllocationExists).Append("\n");
            sb.Append("  AllocationQty: ").Append(AllocationQty).Append("\n");
            sb.Append("  ImageUrl: ").Append(ImageUrl).Append("\n");
            sb.Append("  CreatedBy: ").Append(CreatedBy).Append("\n");
            sb.Append("  ModifiedBy: ").Append(ModifiedBy).Append("\n");
            sb.Append("  NumberOfPromotions: ").Append(NumberOfPromotions).Append("\n");
            sb.Append("  AdditionalQuantity: ").Append(AdditionalQuantity).Append("\n");
            sb.Append("  AvailableNumberOfPromotions: ").Append(AvailableNumberOfPromotions).Append("\n");
            sb.Append("  AvailableAdditionalQuantity: ").Append(AvailableAdditionalQuantity).Append("\n");
            sb.Append("  PromotionRefId: ").Append(PromotionRefId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((GlassRUNServiceWebAPIManageEnquiryDTOEnquiryProductDTO)obj);
        }

        /// <summary>
        /// Returns true if GlassRUNServiceWebAPIManageEnquiryDTOEnquiryProductDTO instances are equal
        /// </summary>
        /// <param name="other">Instance of GlassRUNServiceWebAPIManageEnquiryDTOEnquiryProductDTO to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(GlassRUNServiceWebAPIManageEnquiryDTOEnquiryProductDTO other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    EnquiryAutoNumber == other.EnquiryAutoNumber ||
                    EnquiryAutoNumber != null &&
                    EnquiryAutoNumber.Equals(other.EnquiryAutoNumber)
                ) && 
                (
                    AssociatedOrderNumber == other.AssociatedOrderNumber ||
                    AssociatedOrderNumber != null &&
                    AssociatedOrderNumber.Equals(other.AssociatedOrderNumber)
                ) && 
                (
                    EnquiryGuid == other.EnquiryGuid ||
                    EnquiryGuid != null &&
                    EnquiryGuid.Equals(other.EnquiryGuid)
                ) && 
                (
                    EnquiryProductId == other.EnquiryProductId ||
                    EnquiryProductId != null &&
                    EnquiryProductId.Equals(other.EnquiryProductId)
                ) && 
                (
                    ItemId == other.ItemId ||
                    ItemId != null &&
                    ItemId.Equals(other.ItemId)
                ) && 
                (
                    TotalEnquiriesCount == other.TotalEnquiriesCount ||
                    TotalEnquiriesCount != null &&
                    TotalEnquiriesCount.Equals(other.TotalEnquiriesCount)
                ) && 
                (
                    ParentItemId == other.ParentItemId ||
                    ParentItemId != null &&
                    ParentItemId.Equals(other.ParentItemId)
                ) && 
                (
                    CompanyId == other.CompanyId ||
                    CompanyId != null &&
                    CompanyId.Equals(other.CompanyId)
                ) && 
                (
                    CompanyCode == other.CompanyCode ||
                    CompanyCode != null &&
                    CompanyCode.Equals(other.CompanyCode)
                ) && 
                (
                    EnquiryId == other.EnquiryId ||
                    EnquiryId != null &&
                    EnquiryId.Equals(other.EnquiryId)
                ) && 
                (
                    ProductCode == other.ProductCode ||
                    ProductCode != null &&
                    ProductCode.Equals(other.ProductCode)
                ) && 
                (
                    PrimaryUnitOfMeasure == other.PrimaryUnitOfMeasure ||
                    PrimaryUnitOfMeasure != null &&
                    PrimaryUnitOfMeasure.Equals(other.PrimaryUnitOfMeasure)
                ) && 
                (
                    ProductName == other.ProductName ||
                    ProductName != null &&
                    ProductName.Equals(other.ProductName)
                ) && 
                (
                    ItemNameInDefaultLanguage == other.ItemNameInDefaultLanguage ||
                    ItemNameInDefaultLanguage != null &&
                    ItemNameInDefaultLanguage.Equals(other.ItemNameInDefaultLanguage)
                ) && 
                (
                    Uom == other.Uom ||
                    Uom != null &&
                    Uom.Equals(other.Uom)
                ) && 
                (
                    ParentProductCode == other.ParentProductCode ||
                    ParentProductCode != null &&
                    ParentProductCode.Equals(other.ParentProductCode)
                ) && 
                (
                    ProductType == other.ProductType ||
                    ProductType != null &&
                    ProductType.Equals(other.ProductType)
                ) && 
                (
                    ProductQuantity == other.ProductQuantity ||
                    ProductQuantity != null &&
                    ProductQuantity.Equals(other.ProductQuantity)
                ) && 
                (
                    WeightPerUnit == other.WeightPerUnit ||
                    WeightPerUnit != null &&
                    WeightPerUnit.Equals(other.WeightPerUnit)
                ) && 
                (
                    AvailableQuantity == other.AvailableQuantity ||
                    AvailableQuantity != null &&
                    AvailableQuantity.Equals(other.AvailableQuantity)
                ) && 
                (
                    DepositeAmount == other.DepositeAmount ||
                    DepositeAmount != null &&
                    DepositeAmount.Equals(other.DepositeAmount)
                ) && 
                (
                    Remarks == other.Remarks ||
                    Remarks != null &&
                    Remarks.Equals(other.Remarks)
                ) && 
                (
                    AssociatedOrder == other.AssociatedOrder ||
                    AssociatedOrder != null &&
                    AssociatedOrder.Equals(other.AssociatedOrder)
                ) && 
                (
                    ItemPricesPerUnit == other.ItemPricesPerUnit ||
                    ItemPricesPerUnit != null &&
                    ItemPricesPerUnit.Equals(other.ItemPricesPerUnit)
                ) && 
                (
                    EffectiveDate == other.EffectiveDate ||
                    EffectiveDate != null &&
                    EffectiveDate.Equals(other.EffectiveDate)
                ) && 
                (
                    Price == other.Price ||
                    Price != null &&
                    Price.Equals(other.Price)
                ) && 
                (
                    UnitPrice == other.UnitPrice ||
                    UnitPrice != null &&
                    UnitPrice.Equals(other.UnitPrice)
                ) && 
                (
                    TotalUnitPrice == other.TotalUnitPrice ||
                    TotalUnitPrice != null &&
                    TotalUnitPrice.Equals(other.TotalUnitPrice)
                ) && 
                (
                    CurrentStockPosition == other.CurrentStockPosition ||
                    CurrentStockPosition != null &&
                    CurrentStockPosition.Equals(other.CurrentStockPosition)
                ) && 
                (
                    CreatedDate == other.CreatedDate ||
                    CreatedDate != null &&
                    CreatedDate.Equals(other.CreatedDate)
                ) && 
                (
                    ModifiedDate == other.ModifiedDate ||
                    ModifiedDate != null &&
                    ModifiedDate.Equals(other.ModifiedDate)
                ) && 
                (
                    ItemType == other.ItemType ||
                    ItemType != null &&
                    ItemType.Equals(other.ItemType)
                ) && 
                (
                    CurrentItemPalettesCorrectWeight == other.CurrentItemPalettesCorrectWeight ||
                    CurrentItemPalettesCorrectWeight != null &&
                    CurrentItemPalettesCorrectWeight.Equals(other.CurrentItemPalettesCorrectWeight)
                ) && 
                (
                    CurrentItemTruckCapacityFullInTon == other.CurrentItemTruckCapacityFullInTon ||
                    CurrentItemTruckCapacityFullInTon != null &&
                    CurrentItemTruckCapacityFullInTon.Equals(other.CurrentItemTruckCapacityFullInTon)
                ) && 
                (
                    IsActive == other.IsActive ||
                    IsActive != null &&
                    IsActive.Equals(other.IsActive)
                ) && 
                (
                    NumberOfExtraPallet == other.NumberOfExtraPallet ||
                    NumberOfExtraPallet != null &&
                    NumberOfExtraPallet.Equals(other.NumberOfExtraPallet)
                ) && 
                (
                    PriorityRating == other.PriorityRating ||
                    PriorityRating != null &&
                    PriorityRating.Equals(other.PriorityRating)
                ) && 
                (
                    SequenceNo == other.SequenceNo ||
                    SequenceNo != null &&
                    SequenceNo.Equals(other.SequenceNo)
                ) && 
                (
                    Field1 == other.Field1 ||
                    Field1 != null &&
                    Field1.Equals(other.Field1)
                ) && 
                (
                    Field2 == other.Field2 ||
                    Field2 != null &&
                    Field2.Equals(other.Field2)
                ) && 
                (
                    Field3 == other.Field3 ||
                    Field3 != null &&
                    Field3.Equals(other.Field3)
                ) && 
                (
                    Field4 == other.Field4 ||
                    Field4 != null &&
                    Field4.Equals(other.Field4)
                ) && 
                (
                    Field5 == other.Field5 ||
                    Field5 != null &&
                    Field5.Equals(other.Field5)
                ) && 
                (
                    Field6 == other.Field6 ||
                    Field6 != null &&
                    Field6.Equals(other.Field6)
                ) && 
                (
                    Field7 == other.Field7 ||
                    Field7 != null &&
                    Field7.Equals(other.Field7)
                ) && 
                (
                    Field8 == other.Field8 ||
                    Field8 != null &&
                    Field8.Equals(other.Field8)
                ) && 
                (
                    Field9 == other.Field9 ||
                    Field9 != null &&
                    Field9.Equals(other.Field9)
                ) && 
                (
                    Field10 == other.Field10 ||
                    Field10 != null &&
                    Field10.Equals(other.Field10)
                ) && 
                (
                    DiscountPercent == other.DiscountPercent ||
                    DiscountPercent != null &&
                    DiscountPercent.Equals(other.DiscountPercent)
                ) && 
                (
                    DiscountAmount == other.DiscountAmount ||
                    DiscountAmount != null &&
                    DiscountAmount.Equals(other.DiscountAmount)
                ) && 
                (
                    PaymentType == other.PaymentType ||
                    PaymentType != null &&
                    PaymentType.Equals(other.PaymentType)
                ) && 
                (
                    ReplacementParentProductId == other.ReplacementParentProductId ||
                    ReplacementParentProductId != null &&
                    ReplacementParentProductId.Equals(other.ReplacementParentProductId)
                ) && 
                (
                    IsReplaceable == other.IsReplaceable ||
                    IsReplaceable != null &&
                    IsReplaceable.Equals(other.IsReplaceable)
                ) && 
                (
                    LastStatus == other.LastStatus ||
                    LastStatus != null &&
                    LastStatus.Equals(other.LastStatus)
                ) && 
                (
                    NextStatus == other.NextStatus ||
                    NextStatus != null &&
                    NextStatus.Equals(other.NextStatus)
                ) && 
                (
                    StockLocationCode == other.StockLocationCode ||
                    StockLocationCode != null &&
                    StockLocationCode.Equals(other.StockLocationCode)
                ) && 
                (
                    StockLocationName == other.StockLocationName ||
                    StockLocationName != null &&
                    StockLocationName.Equals(other.StockLocationName)
                ) && 
                (
                    TotalVolume == other.TotalVolume ||
                    TotalVolume != null &&
                    TotalVolume.Equals(other.TotalVolume)
                ) && 
                (
                    TotalWeight == other.TotalWeight ||
                    TotalWeight != null &&
                    TotalWeight.Equals(other.TotalWeight)
                ) && 
                (
                    CollectionLocationCode == other.CollectionLocationCode ||
                    CollectionLocationCode != null &&
                    CollectionLocationCode.Equals(other.CollectionLocationCode)
                ) && 
                (
                    PackingItemCount == other.PackingItemCount ||
                    PackingItemCount != null &&
                    PackingItemCount.Equals(other.PackingItemCount)
                ) && 
                (
                    PackingItemCode == other.PackingItemCode ||
                    PackingItemCode != null &&
                    PackingItemCode.Equals(other.PackingItemCode)
                ) && 
                (
                    IsPackingItem == other.IsPackingItem ||
                    IsPackingItem != null &&
                    IsPackingItem.Equals(other.IsPackingItem)
                ) && 
                (
                    NumberOfExtraPalettes == other.NumberOfExtraPalettes ||
                    NumberOfExtraPalettes != null &&
                    NumberOfExtraPalettes.Equals(other.NumberOfExtraPalettes)
                ) && 
                (
                    DepositeAmountPerUnit == other.DepositeAmountPerUnit ||
                    DepositeAmountPerUnit != null &&
                    DepositeAmountPerUnit.Equals(other.DepositeAmountPerUnit)
                ) && 
                (
                    AllocationExists == other.AllocationExists ||
                    AllocationExists != null &&
                    AllocationExists.Equals(other.AllocationExists)
                ) && 
                (
                    AllocationQty == other.AllocationQty ||
                    AllocationQty != null &&
                    AllocationQty.Equals(other.AllocationQty)
                ) && 
                (
                    ImageUrl == other.ImageUrl ||
                    ImageUrl != null &&
                    ImageUrl.Equals(other.ImageUrl)
                ) && 
                (
                    CreatedBy == other.CreatedBy ||
                    CreatedBy != null &&
                    CreatedBy.Equals(other.CreatedBy)
                ) && 
                (
                    ModifiedBy == other.ModifiedBy ||
                    ModifiedBy != null &&
                    ModifiedBy.Equals(other.ModifiedBy)
                ) && 
                (
                    NumberOfPromotions == other.NumberOfPromotions ||
                    NumberOfPromotions != null &&
                    NumberOfPromotions.Equals(other.NumberOfPromotions)
                ) && 
                (
                    AdditionalQuantity == other.AdditionalQuantity ||
                    AdditionalQuantity != null &&
                    AdditionalQuantity.Equals(other.AdditionalQuantity)
                ) && 
                (
                    AvailableNumberOfPromotions == other.AvailableNumberOfPromotions ||
                    AvailableNumberOfPromotions != null &&
                    AvailableNumberOfPromotions.Equals(other.AvailableNumberOfPromotions)
                ) && 
                (
                    AvailableAdditionalQuantity == other.AvailableAdditionalQuantity ||
                    AvailableAdditionalQuantity != null &&
                    AvailableAdditionalQuantity.Equals(other.AvailableAdditionalQuantity)
                ) && 
                (
                    PromotionRefId == other.PromotionRefId ||
                    PromotionRefId != null &&
                    PromotionRefId.Equals(other.PromotionRefId)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (EnquiryAutoNumber != null)
                    hashCode = hashCode * 59 + EnquiryAutoNumber.GetHashCode();
                    if (AssociatedOrderNumber != null)
                    hashCode = hashCode * 59 + AssociatedOrderNumber.GetHashCode();
                    if (EnquiryGuid != null)
                    hashCode = hashCode * 59 + EnquiryGuid.GetHashCode();
                    if (EnquiryProductId != null)
                    hashCode = hashCode * 59 + EnquiryProductId.GetHashCode();
                    if (ItemId != null)
                    hashCode = hashCode * 59 + ItemId.GetHashCode();
                    if (TotalEnquiriesCount != null)
                    hashCode = hashCode * 59 + TotalEnquiriesCount.GetHashCode();
                    if (ParentItemId != null)
                    hashCode = hashCode * 59 + ParentItemId.GetHashCode();
                    if (CompanyId != null)
                    hashCode = hashCode * 59 + CompanyId.GetHashCode();
                    if (CompanyCode != null)
                    hashCode = hashCode * 59 + CompanyCode.GetHashCode();
                    if (EnquiryId != null)
                    hashCode = hashCode * 59 + EnquiryId.GetHashCode();
                    if (ProductCode != null)
                    hashCode = hashCode * 59 + ProductCode.GetHashCode();
                    if (PrimaryUnitOfMeasure != null)
                    hashCode = hashCode * 59 + PrimaryUnitOfMeasure.GetHashCode();
                    if (ProductName != null)
                    hashCode = hashCode * 59 + ProductName.GetHashCode();
                    if (ItemNameInDefaultLanguage != null)
                    hashCode = hashCode * 59 + ItemNameInDefaultLanguage.GetHashCode();
                    if (Uom != null)
                    hashCode = hashCode * 59 + Uom.GetHashCode();
                    if (ParentProductCode != null)
                    hashCode = hashCode * 59 + ParentProductCode.GetHashCode();
                    if (ProductType != null)
                    hashCode = hashCode * 59 + ProductType.GetHashCode();
                    if (ProductQuantity != null)
                    hashCode = hashCode * 59 + ProductQuantity.GetHashCode();
                    if (WeightPerUnit != null)
                    hashCode = hashCode * 59 + WeightPerUnit.GetHashCode();
                    if (AvailableQuantity != null)
                    hashCode = hashCode * 59 + AvailableQuantity.GetHashCode();
                    if (DepositeAmount != null)
                    hashCode = hashCode * 59 + DepositeAmount.GetHashCode();
                    if (Remarks != null)
                    hashCode = hashCode * 59 + Remarks.GetHashCode();
                    if (AssociatedOrder != null)
                    hashCode = hashCode * 59 + AssociatedOrder.GetHashCode();
                    if (ItemPricesPerUnit != null)
                    hashCode = hashCode * 59 + ItemPricesPerUnit.GetHashCode();
                    if (EffectiveDate != null)
                    hashCode = hashCode * 59 + EffectiveDate.GetHashCode();
                    if (Price != null)
                    hashCode = hashCode * 59 + Price.GetHashCode();
                    if (UnitPrice != null)
                    hashCode = hashCode * 59 + UnitPrice.GetHashCode();
                    if (TotalUnitPrice != null)
                    hashCode = hashCode * 59 + TotalUnitPrice.GetHashCode();
                    if (CurrentStockPosition != null)
                    hashCode = hashCode * 59 + CurrentStockPosition.GetHashCode();
                    if (CreatedDate != null)
                    hashCode = hashCode * 59 + CreatedDate.GetHashCode();
                    if (ModifiedDate != null)
                    hashCode = hashCode * 59 + ModifiedDate.GetHashCode();
                    if (ItemType != null)
                    hashCode = hashCode * 59 + ItemType.GetHashCode();
                    if (CurrentItemPalettesCorrectWeight != null)
                    hashCode = hashCode * 59 + CurrentItemPalettesCorrectWeight.GetHashCode();
                    if (CurrentItemTruckCapacityFullInTon != null)
                    hashCode = hashCode * 59 + CurrentItemTruckCapacityFullInTon.GetHashCode();
                    if (IsActive != null)
                    hashCode = hashCode * 59 + IsActive.GetHashCode();
                    if (NumberOfExtraPallet != null)
                    hashCode = hashCode * 59 + NumberOfExtraPallet.GetHashCode();
                    if (PriorityRating != null)
                    hashCode = hashCode * 59 + PriorityRating.GetHashCode();
                    if (SequenceNo != null)
                    hashCode = hashCode * 59 + SequenceNo.GetHashCode();
                    if (Field1 != null)
                    hashCode = hashCode * 59 + Field1.GetHashCode();
                    if (Field2 != null)
                    hashCode = hashCode * 59 + Field2.GetHashCode();
                    if (Field3 != null)
                    hashCode = hashCode * 59 + Field3.GetHashCode();
                    if (Field4 != null)
                    hashCode = hashCode * 59 + Field4.GetHashCode();
                    if (Field5 != null)
                    hashCode = hashCode * 59 + Field5.GetHashCode();
                    if (Field6 != null)
                    hashCode = hashCode * 59 + Field6.GetHashCode();
                    if (Field7 != null)
                    hashCode = hashCode * 59 + Field7.GetHashCode();
                    if (Field8 != null)
                    hashCode = hashCode * 59 + Field8.GetHashCode();
                    if (Field9 != null)
                    hashCode = hashCode * 59 + Field9.GetHashCode();
                    if (Field10 != null)
                    hashCode = hashCode * 59 + Field10.GetHashCode();
                    if (DiscountPercent != null)
                    hashCode = hashCode * 59 + DiscountPercent.GetHashCode();
                    if (DiscountAmount != null)
                    hashCode = hashCode * 59 + DiscountAmount.GetHashCode();
                    if (PaymentType != null)
                    hashCode = hashCode * 59 + PaymentType.GetHashCode();
                    if (ReplacementParentProductId != null)
                    hashCode = hashCode * 59 + ReplacementParentProductId.GetHashCode();
                    if (IsReplaceable != null)
                    hashCode = hashCode * 59 + IsReplaceable.GetHashCode();
                    if (LastStatus != null)
                    hashCode = hashCode * 59 + LastStatus.GetHashCode();
                    if (NextStatus != null)
                    hashCode = hashCode * 59 + NextStatus.GetHashCode();
                    if (StockLocationCode != null)
                    hashCode = hashCode * 59 + StockLocationCode.GetHashCode();
                    if (StockLocationName != null)
                    hashCode = hashCode * 59 + StockLocationName.GetHashCode();
                    if (TotalVolume != null)
                    hashCode = hashCode * 59 + TotalVolume.GetHashCode();
                    if (TotalWeight != null)
                    hashCode = hashCode * 59 + TotalWeight.GetHashCode();
                    if (CollectionLocationCode != null)
                    hashCode = hashCode * 59 + CollectionLocationCode.GetHashCode();
                    if (PackingItemCount != null)
                    hashCode = hashCode * 59 + PackingItemCount.GetHashCode();
                    if (PackingItemCode != null)
                    hashCode = hashCode * 59 + PackingItemCode.GetHashCode();
                    if (IsPackingItem != null)
                    hashCode = hashCode * 59 + IsPackingItem.GetHashCode();
                    if (NumberOfExtraPalettes != null)
                    hashCode = hashCode * 59 + NumberOfExtraPalettes.GetHashCode();
                    if (DepositeAmountPerUnit != null)
                    hashCode = hashCode * 59 + DepositeAmountPerUnit.GetHashCode();
                    if (AllocationExists != null)
                    hashCode = hashCode * 59 + AllocationExists.GetHashCode();
                    if (AllocationQty != null)
                    hashCode = hashCode * 59 + AllocationQty.GetHashCode();
                    if (ImageUrl != null)
                    hashCode = hashCode * 59 + ImageUrl.GetHashCode();
                    if (CreatedBy != null)
                    hashCode = hashCode * 59 + CreatedBy.GetHashCode();
                    if (ModifiedBy != null)
                    hashCode = hashCode * 59 + ModifiedBy.GetHashCode();
                    if (NumberOfPromotions != null)
                    hashCode = hashCode * 59 + NumberOfPromotions.GetHashCode();
                    if (AdditionalQuantity != null)
                    hashCode = hashCode * 59 + AdditionalQuantity.GetHashCode();
                    if (AvailableNumberOfPromotions != null)
                    hashCode = hashCode * 59 + AvailableNumberOfPromotions.GetHashCode();
                    if (AvailableAdditionalQuantity != null)
                    hashCode = hashCode * 59 + AvailableAdditionalQuantity.GetHashCode();
                    if (PromotionRefId != null)
                    hashCode = hashCode * 59 + PromotionRefId.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(GlassRUNServiceWebAPIManageEnquiryDTOEnquiryProductDTO left, GlassRUNServiceWebAPIManageEnquiryDTOEnquiryProductDTO right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(GlassRUNServiceWebAPIManageEnquiryDTOEnquiryProductDTO left, GlassRUNServiceWebAPIManageEnquiryDTOEnquiryProductDTO right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
