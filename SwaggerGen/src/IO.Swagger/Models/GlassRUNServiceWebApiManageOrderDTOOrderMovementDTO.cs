/*
 * WebAPIBuild
 *
 * This is glassRUN web api library for 3rd party and internal reference
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class GlassRUNServiceWebApiManageOrderDTOOrderMovementDTO : IEquatable<GlassRUNServiceWebApiManageOrderDTOOrderMovementDTO>
    { 
        /// <summary>
        /// Gets or Sets OrderId
        /// </summary>
        [DataMember(Name="orderId")]
        public long? OrderId { get; set; }

        /// <summary>
        /// Gets or Sets LocationType
        /// </summary>
        [DataMember(Name="locationType")]
        public long? LocationType { get; set; }

        /// <summary>
        /// Gets or Sets ConfirmedBy
        /// </summary>
        [DataMember(Name="confirmedBy")]
        public long? ConfirmedBy { get; set; }

        /// <summary>
        /// Gets or Sets EndDeliveryTime
        /// </summary>
        [DataMember(Name="endDeliveryTime")]
        public DateTime? EndDeliveryTime { get; set; }

        /// <summary>
        /// Gets or Sets ReasonCodeId
        /// </summary>
        [DataMember(Name="reasonCodeId")]
        public long? ReasonCodeId { get; set; }

        /// <summary>
        /// Gets or Sets Comments
        /// </summary>
        [DataMember(Name="comments")]
        public string Comments { get; set; }

        /// <summary>
        /// Gets or Sets ActualDriverName
        /// </summary>
        [DataMember(Name="actualDriverName")]
        public string ActualDriverName { get; set; }

        /// <summary>
        /// Gets or Sets ActualPlateNumber
        /// </summary>
        [DataMember(Name="actualPlateNumber")]
        public string ActualPlateNumber { get; set; }

        /// <summary>
        /// Gets or Sets OrderMovementList
        /// </summary>
        [DataMember(Name="orderMovementList")]
        public Collection<GlassRUNServiceWebApiManageOrderDTOOrderMovementDTO> OrderMovementList { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class GlassRUNServiceWebApiManageOrderDTOOrderMovementDTO {\n");
            sb.Append("  OrderId: ").Append(OrderId).Append("\n");
            sb.Append("  LocationType: ").Append(LocationType).Append("\n");
            sb.Append("  ConfirmedBy: ").Append(ConfirmedBy).Append("\n");
            sb.Append("  EndDeliveryTime: ").Append(EndDeliveryTime).Append("\n");
            sb.Append("  ReasonCodeId: ").Append(ReasonCodeId).Append("\n");
            sb.Append("  Comments: ").Append(Comments).Append("\n");
            sb.Append("  ActualDriverName: ").Append(ActualDriverName).Append("\n");
            sb.Append("  ActualPlateNumber: ").Append(ActualPlateNumber).Append("\n");
            sb.Append("  OrderMovementList: ").Append(OrderMovementList).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((GlassRUNServiceWebApiManageOrderDTOOrderMovementDTO)obj);
        }

        /// <summary>
        /// Returns true if GlassRUNServiceWebApiManageOrderDTOOrderMovementDTO instances are equal
        /// </summary>
        /// <param name="other">Instance of GlassRUNServiceWebApiManageOrderDTOOrderMovementDTO to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(GlassRUNServiceWebApiManageOrderDTOOrderMovementDTO other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    OrderId == other.OrderId ||
                    OrderId != null &&
                    OrderId.Equals(other.OrderId)
                ) && 
                (
                    LocationType == other.LocationType ||
                    LocationType != null &&
                    LocationType.Equals(other.LocationType)
                ) && 
                (
                    ConfirmedBy == other.ConfirmedBy ||
                    ConfirmedBy != null &&
                    ConfirmedBy.Equals(other.ConfirmedBy)
                ) && 
                (
                    EndDeliveryTime == other.EndDeliveryTime ||
                    EndDeliveryTime != null &&
                    EndDeliveryTime.Equals(other.EndDeliveryTime)
                ) && 
                (
                    ReasonCodeId == other.ReasonCodeId ||
                    ReasonCodeId != null &&
                    ReasonCodeId.Equals(other.ReasonCodeId)
                ) && 
                (
                    Comments == other.Comments ||
                    Comments != null &&
                    Comments.Equals(other.Comments)
                ) && 
                (
                    ActualDriverName == other.ActualDriverName ||
                    ActualDriverName != null &&
                    ActualDriverName.Equals(other.ActualDriverName)
                ) && 
                (
                    ActualPlateNumber == other.ActualPlateNumber ||
                    ActualPlateNumber != null &&
                    ActualPlateNumber.Equals(other.ActualPlateNumber)
                ) && 
                (
                    OrderMovementList == other.OrderMovementList ||
                    OrderMovementList != null &&
                    OrderMovementList.SequenceEqual(other.OrderMovementList)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (OrderId != null)
                    hashCode = hashCode * 59 + OrderId.GetHashCode();
                    if (LocationType != null)
                    hashCode = hashCode * 59 + LocationType.GetHashCode();
                    if (ConfirmedBy != null)
                    hashCode = hashCode * 59 + ConfirmedBy.GetHashCode();
                    if (EndDeliveryTime != null)
                    hashCode = hashCode * 59 + EndDeliveryTime.GetHashCode();
                    if (ReasonCodeId != null)
                    hashCode = hashCode * 59 + ReasonCodeId.GetHashCode();
                    if (Comments != null)
                    hashCode = hashCode * 59 + Comments.GetHashCode();
                    if (ActualDriverName != null)
                    hashCode = hashCode * 59 + ActualDriverName.GetHashCode();
                    if (ActualPlateNumber != null)
                    hashCode = hashCode * 59 + ActualPlateNumber.GetHashCode();
                    if (OrderMovementList != null)
                    hashCode = hashCode * 59 + OrderMovementList.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(GlassRUNServiceWebApiManageOrderDTOOrderMovementDTO left, GlassRUNServiceWebApiManageOrderDTOOrderMovementDTO right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(GlassRUNServiceWebApiManageOrderDTOOrderMovementDTO left, GlassRUNServiceWebApiManageOrderDTOOrderMovementDTO right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
