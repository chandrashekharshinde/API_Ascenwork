/*
 * WebAPIBuild
 *
 * This is glassRUN web api library for 3rd party and internal reference
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class GlassRUNServiceWebApiControlTowerDTOControlTowerSnapshotGlobalDTO : IEquatable<GlassRUNServiceWebApiControlTowerDTOControlTowerSnapshotGlobalDTO>
    { 
        /// <summary>
        /// Gets or Sets ControlTowerSnapshotGlobalId
        /// </summary>
        [DataMember(Name="controlTowerSnapshotGlobalId")]
        public long? ControlTowerSnapshotGlobalId { get; set; }

        /// <summary>
        /// Gets or Sets WorkFlowId
        /// </summary>
        [DataMember(Name="workFlowId")]
        public long? WorkFlowId { get; set; }

        /// <summary>
        /// Gets or Sets SequenceNo
        /// </summary>
        [DataMember(Name="sequenceNo")]
        public long? SequenceNo { get; set; }

        /// <summary>
        /// Gets or Sets GlobalTotal
        /// </summary>
        [DataMember(Name="globalTotal")]
        public long? GlobalTotal { get; set; }

        /// <summary>
        /// Gets or Sets GlobalCount
        /// </summary>
        [DataMember(Name="globalCount")]
        public long? GlobalCount { get; set; }

        /// <summary>
        /// Gets or Sets WorkFlowCode
        /// </summary>
        [DataMember(Name="workFlowCode")]
        public string WorkFlowCode { get; set; }

        /// <summary>
        /// Gets or Sets StatusCode
        /// </summary>
        [DataMember(Name="statusCode")]
        public string StatusCode { get; set; }

        /// <summary>
        /// Gets or Sets StatusInLocalLanguage
        /// </summary>
        [DataMember(Name="statusInLocalLanguage")]
        public string StatusInLocalLanguage { get; set; }

        /// <summary>
        /// Gets or Sets StatusInEnglish
        /// </summary>
        [DataMember(Name="statusInEnglish")]
        public string StatusInEnglish { get; set; }

        /// <summary>
        /// Gets or Sets ParentCompanyId
        /// </summary>
        [DataMember(Name="parentCompanyId")]
        public long? ParentCompanyId { get; set; }

        /// <summary>
        /// Gets or Sets ParentCompanyMnemonic
        /// </summary>
        [DataMember(Name="parentCompanyMnemonic")]
        public string ParentCompanyMnemonic { get; set; }

        /// <summary>
        /// Gets or Sets CompanyId
        /// </summary>
        [DataMember(Name="companyId")]
        public long? CompanyId { get; set; }

        /// <summary>
        /// Gets or Sets CompanyMnemonic
        /// </summary>
        [DataMember(Name="companyMnemonic")]
        public string CompanyMnemonic { get; set; }

        /// <summary>
        /// Gets or Sets UserPersonaMasterId
        /// </summary>
        [DataMember(Name="userPersonaMasterId")]
        public long? UserPersonaMasterId { get; set; }

        /// <summary>
        /// Gets or Sets ObjectType
        /// </summary>
        [DataMember(Name="objectType")]
        public long? ObjectType { get; set; }

        /// <summary>
        /// Gets or Sets FormType
        /// </summary>
        [DataMember(Name="formType")]
        public long? FormType { get; set; }

        /// <summary>
        /// Gets or Sets StatusGroup
        /// </summary>
        [DataMember(Name="statusGroup")]
        public long? StatusGroup { get; set; }

        /// <summary>
        /// Gets or Sets RoleId
        /// </summary>
        [DataMember(Name="roleId")]
        public long? RoleId { get; set; }

        /// <summary>
        /// Gets or Sets UserId
        /// </summary>
        [DataMember(Name="userId")]
        public long? UserId { get; set; }

        /// <summary>
        /// Gets or Sets CultureId
        /// </summary>
        [DataMember(Name="cultureId")]
        public long? CultureId { get; set; }

        /// <summary>
        /// Gets or Sets ControlTowerSnapshotGlobalList
        /// </summary>
        [DataMember(Name="controlTowerSnapshotGlobalList")]
        public Collection<GlassRUNServiceWebApiControlTowerDTOControlTowerSnapshotGlobalDTO> ControlTowerSnapshotGlobalList { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class GlassRUNServiceWebApiControlTowerDTOControlTowerSnapshotGlobalDTO {\n");
            sb.Append("  ControlTowerSnapshotGlobalId: ").Append(ControlTowerSnapshotGlobalId).Append("\n");
            sb.Append("  WorkFlowId: ").Append(WorkFlowId).Append("\n");
            sb.Append("  SequenceNo: ").Append(SequenceNo).Append("\n");
            sb.Append("  GlobalTotal: ").Append(GlobalTotal).Append("\n");
            sb.Append("  GlobalCount: ").Append(GlobalCount).Append("\n");
            sb.Append("  WorkFlowCode: ").Append(WorkFlowCode).Append("\n");
            sb.Append("  StatusCode: ").Append(StatusCode).Append("\n");
            sb.Append("  StatusInLocalLanguage: ").Append(StatusInLocalLanguage).Append("\n");
            sb.Append("  StatusInEnglish: ").Append(StatusInEnglish).Append("\n");
            sb.Append("  ParentCompanyId: ").Append(ParentCompanyId).Append("\n");
            sb.Append("  ParentCompanyMnemonic: ").Append(ParentCompanyMnemonic).Append("\n");
            sb.Append("  CompanyId: ").Append(CompanyId).Append("\n");
            sb.Append("  CompanyMnemonic: ").Append(CompanyMnemonic).Append("\n");
            sb.Append("  UserPersonaMasterId: ").Append(UserPersonaMasterId).Append("\n");
            sb.Append("  ObjectType: ").Append(ObjectType).Append("\n");
            sb.Append("  FormType: ").Append(FormType).Append("\n");
            sb.Append("  StatusGroup: ").Append(StatusGroup).Append("\n");
            sb.Append("  RoleId: ").Append(RoleId).Append("\n");
            sb.Append("  UserId: ").Append(UserId).Append("\n");
            sb.Append("  CultureId: ").Append(CultureId).Append("\n");
            sb.Append("  ControlTowerSnapshotGlobalList: ").Append(ControlTowerSnapshotGlobalList).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((GlassRUNServiceWebApiControlTowerDTOControlTowerSnapshotGlobalDTO)obj);
        }

        /// <summary>
        /// Returns true if GlassRUNServiceWebApiControlTowerDTOControlTowerSnapshotGlobalDTO instances are equal
        /// </summary>
        /// <param name="other">Instance of GlassRUNServiceWebApiControlTowerDTOControlTowerSnapshotGlobalDTO to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(GlassRUNServiceWebApiControlTowerDTOControlTowerSnapshotGlobalDTO other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    ControlTowerSnapshotGlobalId == other.ControlTowerSnapshotGlobalId ||
                    ControlTowerSnapshotGlobalId != null &&
                    ControlTowerSnapshotGlobalId.Equals(other.ControlTowerSnapshotGlobalId)
                ) && 
                (
                    WorkFlowId == other.WorkFlowId ||
                    WorkFlowId != null &&
                    WorkFlowId.Equals(other.WorkFlowId)
                ) && 
                (
                    SequenceNo == other.SequenceNo ||
                    SequenceNo != null &&
                    SequenceNo.Equals(other.SequenceNo)
                ) && 
                (
                    GlobalTotal == other.GlobalTotal ||
                    GlobalTotal != null &&
                    GlobalTotal.Equals(other.GlobalTotal)
                ) && 
                (
                    GlobalCount == other.GlobalCount ||
                    GlobalCount != null &&
                    GlobalCount.Equals(other.GlobalCount)
                ) && 
                (
                    WorkFlowCode == other.WorkFlowCode ||
                    WorkFlowCode != null &&
                    WorkFlowCode.Equals(other.WorkFlowCode)
                ) && 
                (
                    StatusCode == other.StatusCode ||
                    StatusCode != null &&
                    StatusCode.Equals(other.StatusCode)
                ) && 
                (
                    StatusInLocalLanguage == other.StatusInLocalLanguage ||
                    StatusInLocalLanguage != null &&
                    StatusInLocalLanguage.Equals(other.StatusInLocalLanguage)
                ) && 
                (
                    StatusInEnglish == other.StatusInEnglish ||
                    StatusInEnglish != null &&
                    StatusInEnglish.Equals(other.StatusInEnglish)
                ) && 
                (
                    ParentCompanyId == other.ParentCompanyId ||
                    ParentCompanyId != null &&
                    ParentCompanyId.Equals(other.ParentCompanyId)
                ) && 
                (
                    ParentCompanyMnemonic == other.ParentCompanyMnemonic ||
                    ParentCompanyMnemonic != null &&
                    ParentCompanyMnemonic.Equals(other.ParentCompanyMnemonic)
                ) && 
                (
                    CompanyId == other.CompanyId ||
                    CompanyId != null &&
                    CompanyId.Equals(other.CompanyId)
                ) && 
                (
                    CompanyMnemonic == other.CompanyMnemonic ||
                    CompanyMnemonic != null &&
                    CompanyMnemonic.Equals(other.CompanyMnemonic)
                ) && 
                (
                    UserPersonaMasterId == other.UserPersonaMasterId ||
                    UserPersonaMasterId != null &&
                    UserPersonaMasterId.Equals(other.UserPersonaMasterId)
                ) && 
                (
                    ObjectType == other.ObjectType ||
                    ObjectType != null &&
                    ObjectType.Equals(other.ObjectType)
                ) && 
                (
                    FormType == other.FormType ||
                    FormType != null &&
                    FormType.Equals(other.FormType)
                ) && 
                (
                    StatusGroup == other.StatusGroup ||
                    StatusGroup != null &&
                    StatusGroup.Equals(other.StatusGroup)
                ) && 
                (
                    RoleId == other.RoleId ||
                    RoleId != null &&
                    RoleId.Equals(other.RoleId)
                ) && 
                (
                    UserId == other.UserId ||
                    UserId != null &&
                    UserId.Equals(other.UserId)
                ) && 
                (
                    CultureId == other.CultureId ||
                    CultureId != null &&
                    CultureId.Equals(other.CultureId)
                ) && 
                (
                    ControlTowerSnapshotGlobalList == other.ControlTowerSnapshotGlobalList ||
                    ControlTowerSnapshotGlobalList != null &&
                    ControlTowerSnapshotGlobalList.SequenceEqual(other.ControlTowerSnapshotGlobalList)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (ControlTowerSnapshotGlobalId != null)
                    hashCode = hashCode * 59 + ControlTowerSnapshotGlobalId.GetHashCode();
                    if (WorkFlowId != null)
                    hashCode = hashCode * 59 + WorkFlowId.GetHashCode();
                    if (SequenceNo != null)
                    hashCode = hashCode * 59 + SequenceNo.GetHashCode();
                    if (GlobalTotal != null)
                    hashCode = hashCode * 59 + GlobalTotal.GetHashCode();
                    if (GlobalCount != null)
                    hashCode = hashCode * 59 + GlobalCount.GetHashCode();
                    if (WorkFlowCode != null)
                    hashCode = hashCode * 59 + WorkFlowCode.GetHashCode();
                    if (StatusCode != null)
                    hashCode = hashCode * 59 + StatusCode.GetHashCode();
                    if (StatusInLocalLanguage != null)
                    hashCode = hashCode * 59 + StatusInLocalLanguage.GetHashCode();
                    if (StatusInEnglish != null)
                    hashCode = hashCode * 59 + StatusInEnglish.GetHashCode();
                    if (ParentCompanyId != null)
                    hashCode = hashCode * 59 + ParentCompanyId.GetHashCode();
                    if (ParentCompanyMnemonic != null)
                    hashCode = hashCode * 59 + ParentCompanyMnemonic.GetHashCode();
                    if (CompanyId != null)
                    hashCode = hashCode * 59 + CompanyId.GetHashCode();
                    if (CompanyMnemonic != null)
                    hashCode = hashCode * 59 + CompanyMnemonic.GetHashCode();
                    if (UserPersonaMasterId != null)
                    hashCode = hashCode * 59 + UserPersonaMasterId.GetHashCode();
                    if (ObjectType != null)
                    hashCode = hashCode * 59 + ObjectType.GetHashCode();
                    if (FormType != null)
                    hashCode = hashCode * 59 + FormType.GetHashCode();
                    if (StatusGroup != null)
                    hashCode = hashCode * 59 + StatusGroup.GetHashCode();
                    if (RoleId != null)
                    hashCode = hashCode * 59 + RoleId.GetHashCode();
                    if (UserId != null)
                    hashCode = hashCode * 59 + UserId.GetHashCode();
                    if (CultureId != null)
                    hashCode = hashCode * 59 + CultureId.GetHashCode();
                    if (ControlTowerSnapshotGlobalList != null)
                    hashCode = hashCode * 59 + ControlTowerSnapshotGlobalList.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(GlassRUNServiceWebApiControlTowerDTOControlTowerSnapshotGlobalDTO left, GlassRUNServiceWebApiControlTowerDTOControlTowerSnapshotGlobalDTO right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(GlassRUNServiceWebApiControlTowerDTOControlTowerSnapshotGlobalDTO left, GlassRUNServiceWebApiControlTowerDTOControlTowerSnapshotGlobalDTO right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
