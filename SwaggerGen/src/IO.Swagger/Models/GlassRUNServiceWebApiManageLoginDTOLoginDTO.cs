/*
 * WebAPIBuild
 *
 * This is glassRUN web api library for 3rd party and internal reference
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class GlassRUNServiceWebApiManageLoginDTOLoginDTO : IEquatable<GlassRUNServiceWebApiManageLoginDTOLoginDTO>
    { 
        /// <summary>
        /// Gets or Sets UserId
        /// </summary>
        [DataMember(Name="userId")]
        public long? UserId { get; set; }

        /// <summary>
        /// Gets or Sets RoleMasterId
        /// </summary>
        [DataMember(Name="roleMasterId")]
        public int? RoleMasterId { get; set; }

        /// <summary>
        /// Gets or Sets OtpGenerated
        /// </summary>
        [DataMember(Name="otpGenerated")]
        public string OtpGenerated { get; set; }

        /// <summary>
        /// Gets or Sets OtpCreatedTime
        /// </summary>
        [DataMember(Name="otpCreatedTime")]
        public DateTime? OtpCreatedTime { get; set; }

        /// <summary>
        /// Gets or Sets OtpValidTill
        /// </summary>
        [DataMember(Name="otpValidTill")]
        public DateTime? OtpValidTill { get; set; }

        /// <summary>
        /// Gets or Sets OtpSentByChannelId
        /// </summary>
        [DataMember(Name="otpSentByChannelId")]
        public int? OtpSentByChannelId { get; set; }

        /// <summary>
        /// Gets or Sets Username
        /// </summary>
        [DataMember(Name="username")]
        public string Username { get; set; }

        /// <summary>
        /// Gets or Sets MobileNo
        /// </summary>
        [DataMember(Name="mobileNo")]
        public string MobileNo { get; set; }

        /// <summary>
        /// Gets or Sets Password
        /// </summary>
        [DataMember(Name="password")]
        public string Password { get; set; }

        /// <summary>
        /// Gets or Sets HashedPassword
        /// </summary>
        [DataMember(Name="hashedPassword")]
        public string HashedPassword { get; set; }

        /// <summary>
        /// Gets or Sets PasswordSalt
        /// </summary>
        [DataMember(Name="passwordSalt")]
        public int? PasswordSalt { get; set; }

        /// <summary>
        /// Gets or Sets OtpPrefix
        /// </summary>
        [DataMember(Name="otpPrefix")]
        public string OtpPrefix { get; set; }

        /// <summary>
        /// Gets or Sets CreatedBy
        /// </summary>
        [DataMember(Name="createdBy")]
        public long? CreatedBy { get; set; }

        /// <summary>
        /// Gets or Sets CreatedDate
        /// </summary>
        [DataMember(Name="createdDate")]
        public DateTime? CreatedDate { get; set; }

        /// <summary>
        /// Gets or Sets ModifiedBy
        /// </summary>
        [DataMember(Name="modifiedBy")]
        public long? ModifiedBy { get; set; }

        /// <summary>
        /// Gets or Sets ModifiedDate
        /// </summary>
        [DataMember(Name="modifiedDate")]
        public DateTime? ModifiedDate { get; set; }

        /// <summary>
        /// Gets or Sets IsActive
        /// </summary>
        [DataMember(Name="isActive")]
        public bool? IsActive { get; set; }

        /// <summary>
        /// Gets or Sets IsValid
        /// </summary>
        [DataMember(Name="isValid")]
        public string IsValid { get; set; }

        /// <summary>
        /// Gets or Sets ReasonCode
        /// </summary>
        [DataMember(Name="reasonCode")]
        public string ReasonCode { get; set; }

        /// <summary>
        /// Gets or Sets AccessKey
        /// </summary>
        [DataMember(Name="accessKey")]
        public string AccessKey { get; set; }

        /// <summary>
        /// Gets or Sets IsOTPUsed
        /// </summary>
        [DataMember(Name="isOTPUsed")]
        public bool? IsOTPUsed { get; set; }

        /// <summary>
        /// Gets or Sets IsCurrentOTPRegenerated
        /// </summary>
        [DataMember(Name="isCurrentOTPRegenerated")]
        public bool? IsCurrentOTPRegenerated { get; set; }

        /// <summary>
        /// Gets or Sets CompanyId
        /// </summary>
        [DataMember(Name="companyId")]
        public long? CompanyId { get; set; }

        /// <summary>
        /// Gets or Sets ActivateOrDeactivate
        /// </summary>
        [DataMember(Name="activateOrDeactivate")]
        public string ActivateOrDeactivate { get; set; }

        /// <summary>
        /// Gets or Sets ErrorMessage
        /// </summary>
        [DataMember(Name="errorMessage")]
        public string ErrorMessage { get; set; }

        /// <summary>
        /// Gets or Sets DefaultLanguage
        /// </summary>
        [DataMember(Name="defaultLanguage")]
        public long? DefaultLanguage { get; set; }

        /// <summary>
        /// Gets or Sets EulaAgreement
        /// </summary>
        [DataMember(Name="eulaAgreement")]
        public string EulaAgreement { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class GlassRUNServiceWebApiManageLoginDTOLoginDTO {\n");
            sb.Append("  UserId: ").Append(UserId).Append("\n");
            sb.Append("  RoleMasterId: ").Append(RoleMasterId).Append("\n");
            sb.Append("  OtpGenerated: ").Append(OtpGenerated).Append("\n");
            sb.Append("  OtpCreatedTime: ").Append(OtpCreatedTime).Append("\n");
            sb.Append("  OtpValidTill: ").Append(OtpValidTill).Append("\n");
            sb.Append("  OtpSentByChannelId: ").Append(OtpSentByChannelId).Append("\n");
            sb.Append("  Username: ").Append(Username).Append("\n");
            sb.Append("  MobileNo: ").Append(MobileNo).Append("\n");
            sb.Append("  Password: ").Append(Password).Append("\n");
            sb.Append("  HashedPassword: ").Append(HashedPassword).Append("\n");
            sb.Append("  PasswordSalt: ").Append(PasswordSalt).Append("\n");
            sb.Append("  OtpPrefix: ").Append(OtpPrefix).Append("\n");
            sb.Append("  CreatedBy: ").Append(CreatedBy).Append("\n");
            sb.Append("  CreatedDate: ").Append(CreatedDate).Append("\n");
            sb.Append("  ModifiedBy: ").Append(ModifiedBy).Append("\n");
            sb.Append("  ModifiedDate: ").Append(ModifiedDate).Append("\n");
            sb.Append("  IsActive: ").Append(IsActive).Append("\n");
            sb.Append("  IsValid: ").Append(IsValid).Append("\n");
            sb.Append("  ReasonCode: ").Append(ReasonCode).Append("\n");
            sb.Append("  AccessKey: ").Append(AccessKey).Append("\n");
            sb.Append("  IsOTPUsed: ").Append(IsOTPUsed).Append("\n");
            sb.Append("  IsCurrentOTPRegenerated: ").Append(IsCurrentOTPRegenerated).Append("\n");
            sb.Append("  CompanyId: ").Append(CompanyId).Append("\n");
            sb.Append("  ActivateOrDeactivate: ").Append(ActivateOrDeactivate).Append("\n");
            sb.Append("  ErrorMessage: ").Append(ErrorMessage).Append("\n");
            sb.Append("  DefaultLanguage: ").Append(DefaultLanguage).Append("\n");
            sb.Append("  EulaAgreement: ").Append(EulaAgreement).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((GlassRUNServiceWebApiManageLoginDTOLoginDTO)obj);
        }

        /// <summary>
        /// Returns true if GlassRUNServiceWebApiManageLoginDTOLoginDTO instances are equal
        /// </summary>
        /// <param name="other">Instance of GlassRUNServiceWebApiManageLoginDTOLoginDTO to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(GlassRUNServiceWebApiManageLoginDTOLoginDTO other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    UserId == other.UserId ||
                    UserId != null &&
                    UserId.Equals(other.UserId)
                ) && 
                (
                    RoleMasterId == other.RoleMasterId ||
                    RoleMasterId != null &&
                    RoleMasterId.Equals(other.RoleMasterId)
                ) && 
                (
                    OtpGenerated == other.OtpGenerated ||
                    OtpGenerated != null &&
                    OtpGenerated.Equals(other.OtpGenerated)
                ) && 
                (
                    OtpCreatedTime == other.OtpCreatedTime ||
                    OtpCreatedTime != null &&
                    OtpCreatedTime.Equals(other.OtpCreatedTime)
                ) && 
                (
                    OtpValidTill == other.OtpValidTill ||
                    OtpValidTill != null &&
                    OtpValidTill.Equals(other.OtpValidTill)
                ) && 
                (
                    OtpSentByChannelId == other.OtpSentByChannelId ||
                    OtpSentByChannelId != null &&
                    OtpSentByChannelId.Equals(other.OtpSentByChannelId)
                ) && 
                (
                    Username == other.Username ||
                    Username != null &&
                    Username.Equals(other.Username)
                ) && 
                (
                    MobileNo == other.MobileNo ||
                    MobileNo != null &&
                    MobileNo.Equals(other.MobileNo)
                ) && 
                (
                    Password == other.Password ||
                    Password != null &&
                    Password.Equals(other.Password)
                ) && 
                (
                    HashedPassword == other.HashedPassword ||
                    HashedPassword != null &&
                    HashedPassword.Equals(other.HashedPassword)
                ) && 
                (
                    PasswordSalt == other.PasswordSalt ||
                    PasswordSalt != null &&
                    PasswordSalt.Equals(other.PasswordSalt)
                ) && 
                (
                    OtpPrefix == other.OtpPrefix ||
                    OtpPrefix != null &&
                    OtpPrefix.Equals(other.OtpPrefix)
                ) && 
                (
                    CreatedBy == other.CreatedBy ||
                    CreatedBy != null &&
                    CreatedBy.Equals(other.CreatedBy)
                ) && 
                (
                    CreatedDate == other.CreatedDate ||
                    CreatedDate != null &&
                    CreatedDate.Equals(other.CreatedDate)
                ) && 
                (
                    ModifiedBy == other.ModifiedBy ||
                    ModifiedBy != null &&
                    ModifiedBy.Equals(other.ModifiedBy)
                ) && 
                (
                    ModifiedDate == other.ModifiedDate ||
                    ModifiedDate != null &&
                    ModifiedDate.Equals(other.ModifiedDate)
                ) && 
                (
                    IsActive == other.IsActive ||
                    IsActive != null &&
                    IsActive.Equals(other.IsActive)
                ) && 
                (
                    IsValid == other.IsValid ||
                    IsValid != null &&
                    IsValid.Equals(other.IsValid)
                ) && 
                (
                    ReasonCode == other.ReasonCode ||
                    ReasonCode != null &&
                    ReasonCode.Equals(other.ReasonCode)
                ) && 
                (
                    AccessKey == other.AccessKey ||
                    AccessKey != null &&
                    AccessKey.Equals(other.AccessKey)
                ) && 
                (
                    IsOTPUsed == other.IsOTPUsed ||
                    IsOTPUsed != null &&
                    IsOTPUsed.Equals(other.IsOTPUsed)
                ) && 
                (
                    IsCurrentOTPRegenerated == other.IsCurrentOTPRegenerated ||
                    IsCurrentOTPRegenerated != null &&
                    IsCurrentOTPRegenerated.Equals(other.IsCurrentOTPRegenerated)
                ) && 
                (
                    CompanyId == other.CompanyId ||
                    CompanyId != null &&
                    CompanyId.Equals(other.CompanyId)
                ) && 
                (
                    ActivateOrDeactivate == other.ActivateOrDeactivate ||
                    ActivateOrDeactivate != null &&
                    ActivateOrDeactivate.Equals(other.ActivateOrDeactivate)
                ) && 
                (
                    ErrorMessage == other.ErrorMessage ||
                    ErrorMessage != null &&
                    ErrorMessage.Equals(other.ErrorMessage)
                ) && 
                (
                    DefaultLanguage == other.DefaultLanguage ||
                    DefaultLanguage != null &&
                    DefaultLanguage.Equals(other.DefaultLanguage)
                ) && 
                (
                    EulaAgreement == other.EulaAgreement ||
                    EulaAgreement != null &&
                    EulaAgreement.Equals(other.EulaAgreement)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (UserId != null)
                    hashCode = hashCode * 59 + UserId.GetHashCode();
                    if (RoleMasterId != null)
                    hashCode = hashCode * 59 + RoleMasterId.GetHashCode();
                    if (OtpGenerated != null)
                    hashCode = hashCode * 59 + OtpGenerated.GetHashCode();
                    if (OtpCreatedTime != null)
                    hashCode = hashCode * 59 + OtpCreatedTime.GetHashCode();
                    if (OtpValidTill != null)
                    hashCode = hashCode * 59 + OtpValidTill.GetHashCode();
                    if (OtpSentByChannelId != null)
                    hashCode = hashCode * 59 + OtpSentByChannelId.GetHashCode();
                    if (Username != null)
                    hashCode = hashCode * 59 + Username.GetHashCode();
                    if (MobileNo != null)
                    hashCode = hashCode * 59 + MobileNo.GetHashCode();
                    if (Password != null)
                    hashCode = hashCode * 59 + Password.GetHashCode();
                    if (HashedPassword != null)
                    hashCode = hashCode * 59 + HashedPassword.GetHashCode();
                    if (PasswordSalt != null)
                    hashCode = hashCode * 59 + PasswordSalt.GetHashCode();
                    if (OtpPrefix != null)
                    hashCode = hashCode * 59 + OtpPrefix.GetHashCode();
                    if (CreatedBy != null)
                    hashCode = hashCode * 59 + CreatedBy.GetHashCode();
                    if (CreatedDate != null)
                    hashCode = hashCode * 59 + CreatedDate.GetHashCode();
                    if (ModifiedBy != null)
                    hashCode = hashCode * 59 + ModifiedBy.GetHashCode();
                    if (ModifiedDate != null)
                    hashCode = hashCode * 59 + ModifiedDate.GetHashCode();
                    if (IsActive != null)
                    hashCode = hashCode * 59 + IsActive.GetHashCode();
                    if (IsValid != null)
                    hashCode = hashCode * 59 + IsValid.GetHashCode();
                    if (ReasonCode != null)
                    hashCode = hashCode * 59 + ReasonCode.GetHashCode();
                    if (AccessKey != null)
                    hashCode = hashCode * 59 + AccessKey.GetHashCode();
                    if (IsOTPUsed != null)
                    hashCode = hashCode * 59 + IsOTPUsed.GetHashCode();
                    if (IsCurrentOTPRegenerated != null)
                    hashCode = hashCode * 59 + IsCurrentOTPRegenerated.GetHashCode();
                    if (CompanyId != null)
                    hashCode = hashCode * 59 + CompanyId.GetHashCode();
                    if (ActivateOrDeactivate != null)
                    hashCode = hashCode * 59 + ActivateOrDeactivate.GetHashCode();
                    if (ErrorMessage != null)
                    hashCode = hashCode * 59 + ErrorMessage.GetHashCode();
                    if (DefaultLanguage != null)
                    hashCode = hashCode * 59 + DefaultLanguage.GetHashCode();
                    if (EulaAgreement != null)
                    hashCode = hashCode * 59 + EulaAgreement.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(GlassRUNServiceWebApiManageLoginDTOLoginDTO left, GlassRUNServiceWebApiManageLoginDTOLoginDTO right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(GlassRUNServiceWebApiManageLoginDTOLoginDTO left, GlassRUNServiceWebApiManageLoginDTOLoginDTO right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
