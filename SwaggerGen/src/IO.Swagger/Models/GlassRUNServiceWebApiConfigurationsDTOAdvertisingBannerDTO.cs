/*
 * WebAPIBuild
 *
 * This is glassRUN web api library for 3rd party and internal reference
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class GlassRUNServiceWebApiConfigurationsDTOAdvertisingBannerDTO : IEquatable<GlassRUNServiceWebApiConfigurationsDTOAdvertisingBannerDTO>
    { 
        /// <summary>
        /// Gets or Sets AdvertisingBannerId
        /// </summary>
        [DataMember(Name="advertisingBannerId")]
        public long? AdvertisingBannerId { get; set; }

        /// <summary>
        /// Gets or Sets RoleId
        /// </summary>
        [DataMember(Name="roleId")]
        public long? RoleId { get; set; }

        /// <summary>
        /// Gets or Sets UserId
        /// </summary>
        [DataMember(Name="userId")]
        public long? UserId { get; set; }

        /// <summary>
        /// Gets or Sets CompanyId
        /// </summary>
        [DataMember(Name="companyId")]
        public long? CompanyId { get; set; }

        /// <summary>
        /// Gets or Sets BannerName
        /// </summary>
        [DataMember(Name="bannerName")]
        public string BannerName { get; set; }

        /// <summary>
        /// Gets or Sets BannerImage
        /// </summary>
        [DataMember(Name="bannerImage")]
        public string BannerImage { get; set; }

        /// <summary>
        /// Gets or Sets FromDate
        /// </summary>
        [DataMember(Name="fromDate")]
        public DateTime? FromDate { get; set; }

        /// <summary>
        /// Gets or Sets ToDate
        /// </summary>
        [DataMember(Name="toDate")]
        public DateTime? ToDate { get; set; }

        /// <summary>
        /// Gets or Sets Field1
        /// </summary>
        [DataMember(Name="field1")]
        public string Field1 { get; set; }

        /// <summary>
        /// Gets or Sets Field2
        /// </summary>
        [DataMember(Name="field2")]
        public string Field2 { get; set; }

        /// <summary>
        /// Gets or Sets Field3
        /// </summary>
        [DataMember(Name="field3")]
        public string Field3 { get; set; }

        /// <summary>
        /// Gets or Sets Field4
        /// </summary>
        [DataMember(Name="field4")]
        public string Field4 { get; set; }

        /// <summary>
        /// Gets or Sets Field5
        /// </summary>
        [DataMember(Name="field5")]
        public string Field5 { get; set; }

        /// <summary>
        /// Gets or Sets Field6
        /// </summary>
        [DataMember(Name="field6")]
        public string Field6 { get; set; }

        /// <summary>
        /// Gets or Sets Field7
        /// </summary>
        [DataMember(Name="field7")]
        public string Field7 { get; set; }

        /// <summary>
        /// Gets or Sets Field8
        /// </summary>
        [DataMember(Name="field8")]
        public string Field8 { get; set; }

        /// <summary>
        /// Gets or Sets Field9
        /// </summary>
        [DataMember(Name="field9")]
        public string Field9 { get; set; }

        /// <summary>
        /// Gets or Sets Field10
        /// </summary>
        [DataMember(Name="field10")]
        public string Field10 { get; set; }

        /// <summary>
        /// Gets or Sets CreatedBy
        /// </summary>
        [DataMember(Name="createdBy")]
        public long? CreatedBy { get; set; }

        /// <summary>
        /// Gets or Sets CreatedDate
        /// </summary>
        [DataMember(Name="createdDate")]
        public DateTime? CreatedDate { get; set; }

        /// <summary>
        /// Gets or Sets UpdatedDate
        /// </summary>
        [DataMember(Name="updatedDate")]
        public DateTime? UpdatedDate { get; set; }

        /// <summary>
        /// Gets or Sets UpdatedBy
        /// </summary>
        [DataMember(Name="updatedBy")]
        public long? UpdatedBy { get; set; }

        /// <summary>
        /// Gets or Sets IsActive
        /// </summary>
        [DataMember(Name="isActive")]
        public string IsActive { get; set; }

        /// <summary>
        /// Gets or Sets AdvertisingBannerList
        /// </summary>
        [DataMember(Name="advertisingBannerList")]
        public Collection<GlassRUNServiceWebApiConfigurationsDTOAdvertisingBannerDTO> AdvertisingBannerList { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class GlassRUNServiceWebApiConfigurationsDTOAdvertisingBannerDTO {\n");
            sb.Append("  AdvertisingBannerId: ").Append(AdvertisingBannerId).Append("\n");
            sb.Append("  RoleId: ").Append(RoleId).Append("\n");
            sb.Append("  UserId: ").Append(UserId).Append("\n");
            sb.Append("  CompanyId: ").Append(CompanyId).Append("\n");
            sb.Append("  BannerName: ").Append(BannerName).Append("\n");
            sb.Append("  BannerImage: ").Append(BannerImage).Append("\n");
            sb.Append("  FromDate: ").Append(FromDate).Append("\n");
            sb.Append("  ToDate: ").Append(ToDate).Append("\n");
            sb.Append("  Field1: ").Append(Field1).Append("\n");
            sb.Append("  Field2: ").Append(Field2).Append("\n");
            sb.Append("  Field3: ").Append(Field3).Append("\n");
            sb.Append("  Field4: ").Append(Field4).Append("\n");
            sb.Append("  Field5: ").Append(Field5).Append("\n");
            sb.Append("  Field6: ").Append(Field6).Append("\n");
            sb.Append("  Field7: ").Append(Field7).Append("\n");
            sb.Append("  Field8: ").Append(Field8).Append("\n");
            sb.Append("  Field9: ").Append(Field9).Append("\n");
            sb.Append("  Field10: ").Append(Field10).Append("\n");
            sb.Append("  CreatedBy: ").Append(CreatedBy).Append("\n");
            sb.Append("  CreatedDate: ").Append(CreatedDate).Append("\n");
            sb.Append("  UpdatedDate: ").Append(UpdatedDate).Append("\n");
            sb.Append("  UpdatedBy: ").Append(UpdatedBy).Append("\n");
            sb.Append("  IsActive: ").Append(IsActive).Append("\n");
            sb.Append("  AdvertisingBannerList: ").Append(AdvertisingBannerList).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((GlassRUNServiceWebApiConfigurationsDTOAdvertisingBannerDTO)obj);
        }

        /// <summary>
        /// Returns true if GlassRUNServiceWebApiConfigurationsDTOAdvertisingBannerDTO instances are equal
        /// </summary>
        /// <param name="other">Instance of GlassRUNServiceWebApiConfigurationsDTOAdvertisingBannerDTO to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(GlassRUNServiceWebApiConfigurationsDTOAdvertisingBannerDTO other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    AdvertisingBannerId == other.AdvertisingBannerId ||
                    AdvertisingBannerId != null &&
                    AdvertisingBannerId.Equals(other.AdvertisingBannerId)
                ) && 
                (
                    RoleId == other.RoleId ||
                    RoleId != null &&
                    RoleId.Equals(other.RoleId)
                ) && 
                (
                    UserId == other.UserId ||
                    UserId != null &&
                    UserId.Equals(other.UserId)
                ) && 
                (
                    CompanyId == other.CompanyId ||
                    CompanyId != null &&
                    CompanyId.Equals(other.CompanyId)
                ) && 
                (
                    BannerName == other.BannerName ||
                    BannerName != null &&
                    BannerName.Equals(other.BannerName)
                ) && 
                (
                    BannerImage == other.BannerImage ||
                    BannerImage != null &&
                    BannerImage.Equals(other.BannerImage)
                ) && 
                (
                    FromDate == other.FromDate ||
                    FromDate != null &&
                    FromDate.Equals(other.FromDate)
                ) && 
                (
                    ToDate == other.ToDate ||
                    ToDate != null &&
                    ToDate.Equals(other.ToDate)
                ) && 
                (
                    Field1 == other.Field1 ||
                    Field1 != null &&
                    Field1.Equals(other.Field1)
                ) && 
                (
                    Field2 == other.Field2 ||
                    Field2 != null &&
                    Field2.Equals(other.Field2)
                ) && 
                (
                    Field3 == other.Field3 ||
                    Field3 != null &&
                    Field3.Equals(other.Field3)
                ) && 
                (
                    Field4 == other.Field4 ||
                    Field4 != null &&
                    Field4.Equals(other.Field4)
                ) && 
                (
                    Field5 == other.Field5 ||
                    Field5 != null &&
                    Field5.Equals(other.Field5)
                ) && 
                (
                    Field6 == other.Field6 ||
                    Field6 != null &&
                    Field6.Equals(other.Field6)
                ) && 
                (
                    Field7 == other.Field7 ||
                    Field7 != null &&
                    Field7.Equals(other.Field7)
                ) && 
                (
                    Field8 == other.Field8 ||
                    Field8 != null &&
                    Field8.Equals(other.Field8)
                ) && 
                (
                    Field9 == other.Field9 ||
                    Field9 != null &&
                    Field9.Equals(other.Field9)
                ) && 
                (
                    Field10 == other.Field10 ||
                    Field10 != null &&
                    Field10.Equals(other.Field10)
                ) && 
                (
                    CreatedBy == other.CreatedBy ||
                    CreatedBy != null &&
                    CreatedBy.Equals(other.CreatedBy)
                ) && 
                (
                    CreatedDate == other.CreatedDate ||
                    CreatedDate != null &&
                    CreatedDate.Equals(other.CreatedDate)
                ) && 
                (
                    UpdatedDate == other.UpdatedDate ||
                    UpdatedDate != null &&
                    UpdatedDate.Equals(other.UpdatedDate)
                ) && 
                (
                    UpdatedBy == other.UpdatedBy ||
                    UpdatedBy != null &&
                    UpdatedBy.Equals(other.UpdatedBy)
                ) && 
                (
                    IsActive == other.IsActive ||
                    IsActive != null &&
                    IsActive.Equals(other.IsActive)
                ) && 
                (
                    AdvertisingBannerList == other.AdvertisingBannerList ||
                    AdvertisingBannerList != null &&
                    AdvertisingBannerList.SequenceEqual(other.AdvertisingBannerList)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (AdvertisingBannerId != null)
                    hashCode = hashCode * 59 + AdvertisingBannerId.GetHashCode();
                    if (RoleId != null)
                    hashCode = hashCode * 59 + RoleId.GetHashCode();
                    if (UserId != null)
                    hashCode = hashCode * 59 + UserId.GetHashCode();
                    if (CompanyId != null)
                    hashCode = hashCode * 59 + CompanyId.GetHashCode();
                    if (BannerName != null)
                    hashCode = hashCode * 59 + BannerName.GetHashCode();
                    if (BannerImage != null)
                    hashCode = hashCode * 59 + BannerImage.GetHashCode();
                    if (FromDate != null)
                    hashCode = hashCode * 59 + FromDate.GetHashCode();
                    if (ToDate != null)
                    hashCode = hashCode * 59 + ToDate.GetHashCode();
                    if (Field1 != null)
                    hashCode = hashCode * 59 + Field1.GetHashCode();
                    if (Field2 != null)
                    hashCode = hashCode * 59 + Field2.GetHashCode();
                    if (Field3 != null)
                    hashCode = hashCode * 59 + Field3.GetHashCode();
                    if (Field4 != null)
                    hashCode = hashCode * 59 + Field4.GetHashCode();
                    if (Field5 != null)
                    hashCode = hashCode * 59 + Field5.GetHashCode();
                    if (Field6 != null)
                    hashCode = hashCode * 59 + Field6.GetHashCode();
                    if (Field7 != null)
                    hashCode = hashCode * 59 + Field7.GetHashCode();
                    if (Field8 != null)
                    hashCode = hashCode * 59 + Field8.GetHashCode();
                    if (Field9 != null)
                    hashCode = hashCode * 59 + Field9.GetHashCode();
                    if (Field10 != null)
                    hashCode = hashCode * 59 + Field10.GetHashCode();
                    if (CreatedBy != null)
                    hashCode = hashCode * 59 + CreatedBy.GetHashCode();
                    if (CreatedDate != null)
                    hashCode = hashCode * 59 + CreatedDate.GetHashCode();
                    if (UpdatedDate != null)
                    hashCode = hashCode * 59 + UpdatedDate.GetHashCode();
                    if (UpdatedBy != null)
                    hashCode = hashCode * 59 + UpdatedBy.GetHashCode();
                    if (IsActive != null)
                    hashCode = hashCode * 59 + IsActive.GetHashCode();
                    if (AdvertisingBannerList != null)
                    hashCode = hashCode * 59 + AdvertisingBannerList.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(GlassRUNServiceWebApiConfigurationsDTOAdvertisingBannerDTO left, GlassRUNServiceWebApiConfigurationsDTOAdvertisingBannerDTO right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(GlassRUNServiceWebApiConfigurationsDTOAdvertisingBannerDTO left, GlassRUNServiceWebApiConfigurationsDTOAdvertisingBannerDTO right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
