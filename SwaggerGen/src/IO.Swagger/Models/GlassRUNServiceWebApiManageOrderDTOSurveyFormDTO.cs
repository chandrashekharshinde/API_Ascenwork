/*
 * WebAPIBuild
 *
 * This is glassRUN web api library for 3rd party and internal reference
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class GlassRUNServiceWebApiManageOrderDTOSurveyFormDTO : IEquatable<GlassRUNServiceWebApiManageOrderDTOSurveyFormDTO>
    { 
        /// <summary>
        /// Gets or Sets SurveyFormId
        /// </summary>
        [DataMember(Name="surveyFormId")]
        public long? SurveyFormId { get; set; }

        /// <summary>
        /// Gets or Sets OrderId
        /// </summary>
        [DataMember(Name="orderId")]
        public long? OrderId { get; set; }

        /// <summary>
        /// Gets or Sets OrderNumber
        /// </summary>
        [DataMember(Name="orderNumber")]
        public string OrderNumber { get; set; }

        /// <summary>
        /// Gets or Sets Survey
        /// </summary>
        [DataMember(Name="survey")]
        public long? Survey { get; set; }

        /// <summary>
        /// Gets or Sets Comment
        /// </summary>
        [DataMember(Name="comment")]
        public string Comment { get; set; }

        /// <summary>
        /// Gets or Sets IsActive
        /// </summary>
        [DataMember(Name="isActive")]
        public bool? IsActive { get; set; }

        /// <summary>
        /// Gets or Sets CreatedBy
        /// </summary>
        [DataMember(Name="createdBy")]
        public long? CreatedBy { get; set; }

        /// <summary>
        /// Gets or Sets SurveyFormList
        /// </summary>
        [DataMember(Name="surveyFormList")]
        public Collection<GlassRUNServiceWebApiManageOrderDTOSurveyFormDTO> SurveyFormList { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class GlassRUNServiceWebApiManageOrderDTOSurveyFormDTO {\n");
            sb.Append("  SurveyFormId: ").Append(SurveyFormId).Append("\n");
            sb.Append("  OrderId: ").Append(OrderId).Append("\n");
            sb.Append("  OrderNumber: ").Append(OrderNumber).Append("\n");
            sb.Append("  Survey: ").Append(Survey).Append("\n");
            sb.Append("  Comment: ").Append(Comment).Append("\n");
            sb.Append("  IsActive: ").Append(IsActive).Append("\n");
            sb.Append("  CreatedBy: ").Append(CreatedBy).Append("\n");
            sb.Append("  SurveyFormList: ").Append(SurveyFormList).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((GlassRUNServiceWebApiManageOrderDTOSurveyFormDTO)obj);
        }

        /// <summary>
        /// Returns true if GlassRUNServiceWebApiManageOrderDTOSurveyFormDTO instances are equal
        /// </summary>
        /// <param name="other">Instance of GlassRUNServiceWebApiManageOrderDTOSurveyFormDTO to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(GlassRUNServiceWebApiManageOrderDTOSurveyFormDTO other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    SurveyFormId == other.SurveyFormId ||
                    SurveyFormId != null &&
                    SurveyFormId.Equals(other.SurveyFormId)
                ) && 
                (
                    OrderId == other.OrderId ||
                    OrderId != null &&
                    OrderId.Equals(other.OrderId)
                ) && 
                (
                    OrderNumber == other.OrderNumber ||
                    OrderNumber != null &&
                    OrderNumber.Equals(other.OrderNumber)
                ) && 
                (
                    Survey == other.Survey ||
                    Survey != null &&
                    Survey.Equals(other.Survey)
                ) && 
                (
                    Comment == other.Comment ||
                    Comment != null &&
                    Comment.Equals(other.Comment)
                ) && 
                (
                    IsActive == other.IsActive ||
                    IsActive != null &&
                    IsActive.Equals(other.IsActive)
                ) && 
                (
                    CreatedBy == other.CreatedBy ||
                    CreatedBy != null &&
                    CreatedBy.Equals(other.CreatedBy)
                ) && 
                (
                    SurveyFormList == other.SurveyFormList ||
                    SurveyFormList != null &&
                    SurveyFormList.SequenceEqual(other.SurveyFormList)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (SurveyFormId != null)
                    hashCode = hashCode * 59 + SurveyFormId.GetHashCode();
                    if (OrderId != null)
                    hashCode = hashCode * 59 + OrderId.GetHashCode();
                    if (OrderNumber != null)
                    hashCode = hashCode * 59 + OrderNumber.GetHashCode();
                    if (Survey != null)
                    hashCode = hashCode * 59 + Survey.GetHashCode();
                    if (Comment != null)
                    hashCode = hashCode * 59 + Comment.GetHashCode();
                    if (IsActive != null)
                    hashCode = hashCode * 59 + IsActive.GetHashCode();
                    if (CreatedBy != null)
                    hashCode = hashCode * 59 + CreatedBy.GetHashCode();
                    if (SurveyFormList != null)
                    hashCode = hashCode * 59 + SurveyFormList.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(GlassRUNServiceWebApiManageOrderDTOSurveyFormDTO left, GlassRUNServiceWebApiManageOrderDTOSurveyFormDTO right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(GlassRUNServiceWebApiManageOrderDTOSurveyFormDTO left, GlassRUNServiceWebApiManageOrderDTOSurveyFormDTO right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
