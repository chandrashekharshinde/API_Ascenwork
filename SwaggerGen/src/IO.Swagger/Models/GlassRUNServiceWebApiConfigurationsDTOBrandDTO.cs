/*
 * WebAPIBuild
 *
 * This is glassRUN web api library for 3rd party and internal reference
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class GlassRUNServiceWebApiConfigurationsDTOBrandDTO : IEquatable<GlassRUNServiceWebApiConfigurationsDTOBrandDTO>
    { 
        /// <summary>
        /// Gets or Sets BrandId
        /// </summary>
        [DataMember(Name="brandId")]
        public long? BrandId { get; set; }

        /// <summary>
        /// Gets or Sets BrandName
        /// </summary>
        [DataMember(Name="brandName")]
        public string BrandName { get; set; }

        /// <summary>
        /// Gets or Sets BrandLogo
        /// </summary>
        [DataMember(Name="brandLogo")]
        public string BrandLogo { get; set; }

        /// <summary>
        /// Gets or Sets CreatedBy
        /// </summary>
        [DataMember(Name="createdBy")]
        public long? CreatedBy { get; set; }

        /// <summary>
        /// Gets or Sets CreatedDate
        /// </summary>
        [DataMember(Name="createdDate")]
        public DateTime? CreatedDate { get; set; }

        /// <summary>
        /// Gets or Sets UpdatedDate
        /// </summary>
        [DataMember(Name="updatedDate")]
        public DateTime? UpdatedDate { get; set; }

        /// <summary>
        /// Gets or Sets UpdatedBy
        /// </summary>
        [DataMember(Name="updatedBy")]
        public long? UpdatedBy { get; set; }

        /// <summary>
        /// Gets or Sets IsActive
        /// </summary>
        [DataMember(Name="isActive")]
        public string IsActive { get; set; }

        /// <summary>
        /// Gets or Sets BrandList
        /// </summary>
        [DataMember(Name="brandList")]
        public Collection<GlassRUNServiceWebApiConfigurationsDTOBrandDTO> BrandList { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class GlassRUNServiceWebApiConfigurationsDTOBrandDTO {\n");
            sb.Append("  BrandId: ").Append(BrandId).Append("\n");
            sb.Append("  BrandName: ").Append(BrandName).Append("\n");
            sb.Append("  BrandLogo: ").Append(BrandLogo).Append("\n");
            sb.Append("  CreatedBy: ").Append(CreatedBy).Append("\n");
            sb.Append("  CreatedDate: ").Append(CreatedDate).Append("\n");
            sb.Append("  UpdatedDate: ").Append(UpdatedDate).Append("\n");
            sb.Append("  UpdatedBy: ").Append(UpdatedBy).Append("\n");
            sb.Append("  IsActive: ").Append(IsActive).Append("\n");
            sb.Append("  BrandList: ").Append(BrandList).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((GlassRUNServiceWebApiConfigurationsDTOBrandDTO)obj);
        }

        /// <summary>
        /// Returns true if GlassRUNServiceWebApiConfigurationsDTOBrandDTO instances are equal
        /// </summary>
        /// <param name="other">Instance of GlassRUNServiceWebApiConfigurationsDTOBrandDTO to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(GlassRUNServiceWebApiConfigurationsDTOBrandDTO other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    BrandId == other.BrandId ||
                    BrandId != null &&
                    BrandId.Equals(other.BrandId)
                ) && 
                (
                    BrandName == other.BrandName ||
                    BrandName != null &&
                    BrandName.Equals(other.BrandName)
                ) && 
                (
                    BrandLogo == other.BrandLogo ||
                    BrandLogo != null &&
                    BrandLogo.Equals(other.BrandLogo)
                ) && 
                (
                    CreatedBy == other.CreatedBy ||
                    CreatedBy != null &&
                    CreatedBy.Equals(other.CreatedBy)
                ) && 
                (
                    CreatedDate == other.CreatedDate ||
                    CreatedDate != null &&
                    CreatedDate.Equals(other.CreatedDate)
                ) && 
                (
                    UpdatedDate == other.UpdatedDate ||
                    UpdatedDate != null &&
                    UpdatedDate.Equals(other.UpdatedDate)
                ) && 
                (
                    UpdatedBy == other.UpdatedBy ||
                    UpdatedBy != null &&
                    UpdatedBy.Equals(other.UpdatedBy)
                ) && 
                (
                    IsActive == other.IsActive ||
                    IsActive != null &&
                    IsActive.Equals(other.IsActive)
                ) && 
                (
                    BrandList == other.BrandList ||
                    BrandList != null &&
                    BrandList.SequenceEqual(other.BrandList)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (BrandId != null)
                    hashCode = hashCode * 59 + BrandId.GetHashCode();
                    if (BrandName != null)
                    hashCode = hashCode * 59 + BrandName.GetHashCode();
                    if (BrandLogo != null)
                    hashCode = hashCode * 59 + BrandLogo.GetHashCode();
                    if (CreatedBy != null)
                    hashCode = hashCode * 59 + CreatedBy.GetHashCode();
                    if (CreatedDate != null)
                    hashCode = hashCode * 59 + CreatedDate.GetHashCode();
                    if (UpdatedDate != null)
                    hashCode = hashCode * 59 + UpdatedDate.GetHashCode();
                    if (UpdatedBy != null)
                    hashCode = hashCode * 59 + UpdatedBy.GetHashCode();
                    if (IsActive != null)
                    hashCode = hashCode * 59 + IsActive.GetHashCode();
                    if (BrandList != null)
                    hashCode = hashCode * 59 + BrandList.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(GlassRUNServiceWebApiConfigurationsDTOBrandDTO left, GlassRUNServiceWebApiConfigurationsDTOBrandDTO right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(GlassRUNServiceWebApiConfigurationsDTOBrandDTO left, GlassRUNServiceWebApiConfigurationsDTOBrandDTO right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
