/*
 * WebAPIBuild
 *
 * This is glassRUN web api library for 3rd party and internal reference
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class GlassRUNServiceWebApiManageProductDTOItemBasePriceDTO : IEquatable<GlassRUNServiceWebApiManageProductDTOItemBasePriceDTO>
    { 
        /// <summary>
        /// Gets or Sets ItemBasePriceID
        /// </summary>
        [DataMember(Name="itemBasePriceID")]
        public long? ItemBasePriceID { get; set; }

        /// <summary>
        /// Gets or Sets ItemId
        /// </summary>
        [DataMember(Name="itemId")]
        public long? ItemId { get; set; }

        /// <summary>
        /// Gets or Sets ItemName
        /// </summary>
        [DataMember(Name="itemName")]
        public string ItemName { get; set; }

        /// <summary>
        /// Gets or Sets ItemShortCode
        /// </summary>
        [DataMember(Name="itemShortCode")]
        public string ItemShortCode { get; set; }

        /// <summary>
        /// Gets or Sets ItemLongCode
        /// </summary>
        [DataMember(Name="itemLongCode")]
        public string ItemLongCode { get; set; }

        /// <summary>
        /// Gets or Sets AddressNumber
        /// </summary>
        [DataMember(Name="addressNumber")]
        public string AddressNumber { get; set; }

        /// <summary>
        /// Gets or Sets CurrencyCode
        /// </summary>
        [DataMember(Name="currencyCode")]
        public string CurrencyCode { get; set; }

        /// <summary>
        /// Gets or Sets Uom
        /// </summary>
        [DataMember(Name="uom")]
        public string Uom { get; set; }

        /// <summary>
        /// Gets or Sets ApplicableFor
        /// </summary>
        [DataMember(Name="applicableFor")]
        public string ApplicableFor { get; set; }

        /// <summary>
        /// Gets or Sets Brand
        /// </summary>
        [DataMember(Name="brand")]
        public string Brand { get; set; }

        /// <summary>
        /// Gets or Sets ImageUrl
        /// </summary>
        [DataMember(Name="imageUrl")]
        public string ImageUrl { get; set; }

        /// <summary>
        /// Gets or Sets EffectiveDate
        /// </summary>
        [DataMember(Name="effectiveDate")]
        public DateTime? EffectiveDate { get; set; }

        /// <summary>
        /// Gets or Sets ExpiryDate
        /// </summary>
        [DataMember(Name="expiryDate")]
        public DateTime? ExpiryDate { get; set; }

        /// <summary>
        /// Gets or Sets CustomerGroupName
        /// </summary>
        [DataMember(Name="customerGroupName")]
        public string CustomerGroupName { get; set; }

        /// <summary>
        /// Gets or Sets ModifiedDate
        /// </summary>
        [DataMember(Name="modifiedDate")]
        public DateTime? ModifiedDate { get; set; }

        /// <summary>
        /// Gets or Sets Price
        /// </summary>
        [DataMember(Name="price")]
        public double? Price { get; set; }

        /// <summary>
        /// Gets or Sets CustomerGroupID
        /// </summary>
        [DataMember(Name="customerGroupID")]
        public string CustomerGroupID { get; set; }

        /// <summary>
        /// Gets or Sets CustomerPriceGroup
        /// </summary>
        [DataMember(Name="customerPriceGroup")]
        public string CustomerPriceGroup { get; set; }

        /// <summary>
        /// Gets or Sets ItemGroupId
        /// </summary>
        [DataMember(Name="itemGroupId")]
        public string ItemGroupId { get; set; }

        /// <summary>
        /// Gets or Sets CompanyId
        /// </summary>
        [DataMember(Name="companyId")]
        public long? CompanyId { get; set; }

        /// <summary>
        /// Gets or Sets CompanyCode
        /// </summary>
        [DataMember(Name="companyCode")]
        public string CompanyCode { get; set; }

        /// <summary>
        /// Gets or Sets IsGroupAll
        /// </summary>
        [DataMember(Name="isGroupAll")]
        public bool? IsGroupAll { get; set; }

        /// <summary>
        /// Gets or Sets IsGroup
        /// </summary>
        [DataMember(Name="isGroup")]
        public bool? IsGroup { get; set; }

        /// <summary>
        /// Gets or Sets IsValid
        /// </summary>
        [DataMember(Name="isValid")]
        public bool? IsValid { get; set; }

        /// <summary>
        /// Gets or Sets IsActive
        /// </summary>
        [DataMember(Name="isActive")]
        public bool? IsActive { get; set; }

        /// <summary>
        /// Gets or Sets ItemBasePriceList
        /// </summary>
        [DataMember(Name="itemBasePriceList")]
        public Collection<GlassRUNServiceWebApiManageProductDTOItemBasePriceDTO> ItemBasePriceList { get; set; }

        /// <summary>
        /// Gets or Sets CustomerGroupForPricing
        /// </summary>
        [DataMember(Name="customerGroupForPricing")]
        public GlassRUNServiceWebApiManageProductDTOCustomerGroupForPricingDTO CustomerGroupForPricing { get; set; }

        /// <summary>
        /// Gets or Sets CustomerMasterForPricingList
        /// </summary>
        [DataMember(Name="customerMasterForPricingList")]
        public Collection<GlassRUNServiceWebApiManageProductDTOCustomerMasterForPricingDTO> CustomerMasterForPricingList { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class GlassRUNServiceWebApiManageProductDTOItemBasePriceDTO {\n");
            sb.Append("  ItemBasePriceID: ").Append(ItemBasePriceID).Append("\n");
            sb.Append("  ItemId: ").Append(ItemId).Append("\n");
            sb.Append("  ItemName: ").Append(ItemName).Append("\n");
            sb.Append("  ItemShortCode: ").Append(ItemShortCode).Append("\n");
            sb.Append("  ItemLongCode: ").Append(ItemLongCode).Append("\n");
            sb.Append("  AddressNumber: ").Append(AddressNumber).Append("\n");
            sb.Append("  CurrencyCode: ").Append(CurrencyCode).Append("\n");
            sb.Append("  Uom: ").Append(Uom).Append("\n");
            sb.Append("  ApplicableFor: ").Append(ApplicableFor).Append("\n");
            sb.Append("  Brand: ").Append(Brand).Append("\n");
            sb.Append("  ImageUrl: ").Append(ImageUrl).Append("\n");
            sb.Append("  EffectiveDate: ").Append(EffectiveDate).Append("\n");
            sb.Append("  ExpiryDate: ").Append(ExpiryDate).Append("\n");
            sb.Append("  CustomerGroupName: ").Append(CustomerGroupName).Append("\n");
            sb.Append("  ModifiedDate: ").Append(ModifiedDate).Append("\n");
            sb.Append("  Price: ").Append(Price).Append("\n");
            sb.Append("  CustomerGroupID: ").Append(CustomerGroupID).Append("\n");
            sb.Append("  CustomerPriceGroup: ").Append(CustomerPriceGroup).Append("\n");
            sb.Append("  ItemGroupId: ").Append(ItemGroupId).Append("\n");
            sb.Append("  CompanyId: ").Append(CompanyId).Append("\n");
            sb.Append("  CompanyCode: ").Append(CompanyCode).Append("\n");
            sb.Append("  IsGroupAll: ").Append(IsGroupAll).Append("\n");
            sb.Append("  IsGroup: ").Append(IsGroup).Append("\n");
            sb.Append("  IsValid: ").Append(IsValid).Append("\n");
            sb.Append("  IsActive: ").Append(IsActive).Append("\n");
            sb.Append("  ItemBasePriceList: ").Append(ItemBasePriceList).Append("\n");
            sb.Append("  CustomerGroupForPricing: ").Append(CustomerGroupForPricing).Append("\n");
            sb.Append("  CustomerMasterForPricingList: ").Append(CustomerMasterForPricingList).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((GlassRUNServiceWebApiManageProductDTOItemBasePriceDTO)obj);
        }

        /// <summary>
        /// Returns true if GlassRUNServiceWebApiManageProductDTOItemBasePriceDTO instances are equal
        /// </summary>
        /// <param name="other">Instance of GlassRUNServiceWebApiManageProductDTOItemBasePriceDTO to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(GlassRUNServiceWebApiManageProductDTOItemBasePriceDTO other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    ItemBasePriceID == other.ItemBasePriceID ||
                    ItemBasePriceID != null &&
                    ItemBasePriceID.Equals(other.ItemBasePriceID)
                ) && 
                (
                    ItemId == other.ItemId ||
                    ItemId != null &&
                    ItemId.Equals(other.ItemId)
                ) && 
                (
                    ItemName == other.ItemName ||
                    ItemName != null &&
                    ItemName.Equals(other.ItemName)
                ) && 
                (
                    ItemShortCode == other.ItemShortCode ||
                    ItemShortCode != null &&
                    ItemShortCode.Equals(other.ItemShortCode)
                ) && 
                (
                    ItemLongCode == other.ItemLongCode ||
                    ItemLongCode != null &&
                    ItemLongCode.Equals(other.ItemLongCode)
                ) && 
                (
                    AddressNumber == other.AddressNumber ||
                    AddressNumber != null &&
                    AddressNumber.Equals(other.AddressNumber)
                ) && 
                (
                    CurrencyCode == other.CurrencyCode ||
                    CurrencyCode != null &&
                    CurrencyCode.Equals(other.CurrencyCode)
                ) && 
                (
                    Uom == other.Uom ||
                    Uom != null &&
                    Uom.Equals(other.Uom)
                ) && 
                (
                    ApplicableFor == other.ApplicableFor ||
                    ApplicableFor != null &&
                    ApplicableFor.Equals(other.ApplicableFor)
                ) && 
                (
                    Brand == other.Brand ||
                    Brand != null &&
                    Brand.Equals(other.Brand)
                ) && 
                (
                    ImageUrl == other.ImageUrl ||
                    ImageUrl != null &&
                    ImageUrl.Equals(other.ImageUrl)
                ) && 
                (
                    EffectiveDate == other.EffectiveDate ||
                    EffectiveDate != null &&
                    EffectiveDate.Equals(other.EffectiveDate)
                ) && 
                (
                    ExpiryDate == other.ExpiryDate ||
                    ExpiryDate != null &&
                    ExpiryDate.Equals(other.ExpiryDate)
                ) && 
                (
                    CustomerGroupName == other.CustomerGroupName ||
                    CustomerGroupName != null &&
                    CustomerGroupName.Equals(other.CustomerGroupName)
                ) && 
                (
                    ModifiedDate == other.ModifiedDate ||
                    ModifiedDate != null &&
                    ModifiedDate.Equals(other.ModifiedDate)
                ) && 
                (
                    Price == other.Price ||
                    Price != null &&
                    Price.Equals(other.Price)
                ) && 
                (
                    CustomerGroupID == other.CustomerGroupID ||
                    CustomerGroupID != null &&
                    CustomerGroupID.Equals(other.CustomerGroupID)
                ) && 
                (
                    CustomerPriceGroup == other.CustomerPriceGroup ||
                    CustomerPriceGroup != null &&
                    CustomerPriceGroup.Equals(other.CustomerPriceGroup)
                ) && 
                (
                    ItemGroupId == other.ItemGroupId ||
                    ItemGroupId != null &&
                    ItemGroupId.Equals(other.ItemGroupId)
                ) && 
                (
                    CompanyId == other.CompanyId ||
                    CompanyId != null &&
                    CompanyId.Equals(other.CompanyId)
                ) && 
                (
                    CompanyCode == other.CompanyCode ||
                    CompanyCode != null &&
                    CompanyCode.Equals(other.CompanyCode)
                ) && 
                (
                    IsGroupAll == other.IsGroupAll ||
                    IsGroupAll != null &&
                    IsGroupAll.Equals(other.IsGroupAll)
                ) && 
                (
                    IsGroup == other.IsGroup ||
                    IsGroup != null &&
                    IsGroup.Equals(other.IsGroup)
                ) && 
                (
                    IsValid == other.IsValid ||
                    IsValid != null &&
                    IsValid.Equals(other.IsValid)
                ) && 
                (
                    IsActive == other.IsActive ||
                    IsActive != null &&
                    IsActive.Equals(other.IsActive)
                ) && 
                (
                    ItemBasePriceList == other.ItemBasePriceList ||
                    ItemBasePriceList != null &&
                    ItemBasePriceList.SequenceEqual(other.ItemBasePriceList)
                ) && 
                (
                    CustomerGroupForPricing == other.CustomerGroupForPricing ||
                    CustomerGroupForPricing != null &&
                    CustomerGroupForPricing.Equals(other.CustomerGroupForPricing)
                ) && 
                (
                    CustomerMasterForPricingList == other.CustomerMasterForPricingList ||
                    CustomerMasterForPricingList != null &&
                    CustomerMasterForPricingList.SequenceEqual(other.CustomerMasterForPricingList)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (ItemBasePriceID != null)
                    hashCode = hashCode * 59 + ItemBasePriceID.GetHashCode();
                    if (ItemId != null)
                    hashCode = hashCode * 59 + ItemId.GetHashCode();
                    if (ItemName != null)
                    hashCode = hashCode * 59 + ItemName.GetHashCode();
                    if (ItemShortCode != null)
                    hashCode = hashCode * 59 + ItemShortCode.GetHashCode();
                    if (ItemLongCode != null)
                    hashCode = hashCode * 59 + ItemLongCode.GetHashCode();
                    if (AddressNumber != null)
                    hashCode = hashCode * 59 + AddressNumber.GetHashCode();
                    if (CurrencyCode != null)
                    hashCode = hashCode * 59 + CurrencyCode.GetHashCode();
                    if (Uom != null)
                    hashCode = hashCode * 59 + Uom.GetHashCode();
                    if (ApplicableFor != null)
                    hashCode = hashCode * 59 + ApplicableFor.GetHashCode();
                    if (Brand != null)
                    hashCode = hashCode * 59 + Brand.GetHashCode();
                    if (ImageUrl != null)
                    hashCode = hashCode * 59 + ImageUrl.GetHashCode();
                    if (EffectiveDate != null)
                    hashCode = hashCode * 59 + EffectiveDate.GetHashCode();
                    if (ExpiryDate != null)
                    hashCode = hashCode * 59 + ExpiryDate.GetHashCode();
                    if (CustomerGroupName != null)
                    hashCode = hashCode * 59 + CustomerGroupName.GetHashCode();
                    if (ModifiedDate != null)
                    hashCode = hashCode * 59 + ModifiedDate.GetHashCode();
                    if (Price != null)
                    hashCode = hashCode * 59 + Price.GetHashCode();
                    if (CustomerGroupID != null)
                    hashCode = hashCode * 59 + CustomerGroupID.GetHashCode();
                    if (CustomerPriceGroup != null)
                    hashCode = hashCode * 59 + CustomerPriceGroup.GetHashCode();
                    if (ItemGroupId != null)
                    hashCode = hashCode * 59 + ItemGroupId.GetHashCode();
                    if (CompanyId != null)
                    hashCode = hashCode * 59 + CompanyId.GetHashCode();
                    if (CompanyCode != null)
                    hashCode = hashCode * 59 + CompanyCode.GetHashCode();
                    if (IsGroupAll != null)
                    hashCode = hashCode * 59 + IsGroupAll.GetHashCode();
                    if (IsGroup != null)
                    hashCode = hashCode * 59 + IsGroup.GetHashCode();
                    if (IsValid != null)
                    hashCode = hashCode * 59 + IsValid.GetHashCode();
                    if (IsActive != null)
                    hashCode = hashCode * 59 + IsActive.GetHashCode();
                    if (ItemBasePriceList != null)
                    hashCode = hashCode * 59 + ItemBasePriceList.GetHashCode();
                    if (CustomerGroupForPricing != null)
                    hashCode = hashCode * 59 + CustomerGroupForPricing.GetHashCode();
                    if (CustomerMasterForPricingList != null)
                    hashCode = hashCode * 59 + CustomerMasterForPricingList.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(GlassRUNServiceWebApiManageProductDTOItemBasePriceDTO left, GlassRUNServiceWebApiManageProductDTOItemBasePriceDTO right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(GlassRUNServiceWebApiManageProductDTOItemBasePriceDTO left, GlassRUNServiceWebApiManageProductDTOItemBasePriceDTO right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
