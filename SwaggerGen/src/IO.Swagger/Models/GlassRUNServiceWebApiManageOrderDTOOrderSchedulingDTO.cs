/*
 * WebAPIBuild
 *
 * This is glassRUN web api library for 3rd party and internal reference
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class GlassRUNServiceWebApiManageOrderDTOOrderSchedulingDTO : IEquatable<GlassRUNServiceWebApiManageOrderDTOOrderSchedulingDTO>
    { 
        /// <summary>
        /// Database primary key of order entity
        /// </summary>
        /// <value>Database primary key of order entity</value>
        [DataMember(Name="orderId")]
        public long? OrderId { get; set; }

        /// <summary>
        /// Unique order number generated by glassRUN or sent to glassRUN from external 3rd party system.
        /// </summary>
        /// <value>Unique order number generated by glassRUN or sent to glassRUN from external 3rd party system.</value>
        [DataMember(Name="orderNumber")]
        public string OrderNumber { get; set; }

        /// <summary>
        /// Gets or Sets SalesOrderNumber
        /// </summary>
        [DataMember(Name="salesOrderNumber")]
        public string SalesOrderNumber { get; set; }

        /// <summary>
        /// Gets or Sets DeliveryPersonName
        /// </summary>
        [DataMember(Name="deliveryPersonName")]
        public string DeliveryPersonName { get; set; }

        /// <summary>
        /// Gets or Sets PlateNumber
        /// </summary>
        [DataMember(Name="plateNumber")]
        public string PlateNumber { get; set; }

        /// <summary>
        /// Gets or Sets PickDateTime
        /// </summary>
        [DataMember(Name="pickDateTime")]
        public DateTime? PickDateTime { get; set; }

        /// <summary>
        /// Gets or Sets EnquiryId
        /// </summary>
        [DataMember(Name="enquiryId")]
        public long? EnquiryId { get; set; }

        /// <summary>
        /// Gets or Sets EnquiryNumber
        /// </summary>
        [DataMember(Name="enquiryNumber")]
        public string EnquiryNumber { get; set; }

        /// <summary>
        /// Gets or Sets OrderType
        /// </summary>
        [DataMember(Name="orderType")]
        public string OrderType { get; set; }

        /// <summary>
        /// Gets or Sets IsAdhoc
        /// </summary>
        [DataMember(Name="isAdhoc")]
        public bool? IsAdhoc { get; set; }

        /// <summary>
        /// Gets or Sets ExpectedTimeOfDelivery
        /// </summary>
        [DataMember(Name="expectedTimeOfDelivery")]
        public DateTime? ExpectedTimeOfDelivery { get; set; }

        /// <summary>
        /// Gets or Sets EnquiryDate
        /// </summary>
        [DataMember(Name="enquiryDate")]
        public DateTime? EnquiryDate { get; set; }

        /// <summary>
        /// Gets or Sets DeliveryPersonnelId
        /// </summary>
        [DataMember(Name="deliveryPersonnelId")]
        public long? DeliveryPersonnelId { get; set; }

        /// <summary>
        /// Gets or Sets CarrierId
        /// </summary>
        [DataMember(Name="carrierId")]
        public long? CarrierId { get; set; }

        /// <summary>
        /// Gets or Sets ExpectedShift
        /// </summary>
        [DataMember(Name="expectedShift")]
        public long? ExpectedShift { get; set; }

        /// <summary>
        /// Gets or Sets ProposedShift
        /// </summary>
        [DataMember(Name="proposedShift")]
        public string ProposedShift { get; set; }

        /// <summary>
        /// Gets or Sets PickingShift
        /// </summary>
        [DataMember(Name="pickingShift")]
        public string PickingShift { get; set; }

        /// <summary>
        /// Gets or Sets CreatedBy
        /// </summary>
        [DataMember(Name="createdBy")]
        public long? CreatedBy { get; set; }

        /// <summary>
        /// Gets or Sets UserId
        /// </summary>
        [DataMember(Name="userId")]
        public long? UserId { get; set; }

        /// <summary>
        /// Gets or Sets LocationType
        /// </summary>
        [DataMember(Name="locationType")]
        public long? LocationType { get; set; }

        /// <summary>
        /// Gets or Sets PlateNumberBy
        /// </summary>
        [DataMember(Name="plateNumberBy")]
        public long? PlateNumberBy { get; set; }

        /// <summary>
        /// Gets or Sets CreatedDate
        /// </summary>
        [DataMember(Name="createdDate")]
        public DateTime? CreatedDate { get; set; }

        /// <summary>
        /// Gets or Sets ModifiedBy
        /// </summary>
        [DataMember(Name="modifiedBy")]
        public long? ModifiedBy { get; set; }

        /// <summary>
        /// Gets or Sets ModifiedDate
        /// </summary>
        [DataMember(Name="modifiedDate")]
        public DateTime? ModifiedDate { get; set; }

        /// <summary>
        /// Gets or Sets RelatedOrderId
        /// </summary>
        [DataMember(Name="relatedOrderId")]
        public long? RelatedOrderId { get; set; }

        /// <summary>
        /// Gets or Sets RelatedOrderNumber
        /// </summary>
        [DataMember(Name="relatedOrderNumber")]
        public long? RelatedOrderNumber { get; set; }

        /// <summary>
        /// Gets or Sets Sequence
        /// </summary>
        [DataMember(Name="sequence")]
        public long? Sequence { get; set; }

        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [DataMember(Name="status")]
        public string Status { get; set; }

        /// <summary>
        /// Gets or Sets CurrentState
        /// </summary>
        [DataMember(Name="currentState")]
        public long? CurrentState { get; set; }

        /// <summary>
        /// Gets or Sets IsSOAttached
        /// </summary>
        [DataMember(Name="isSOAttached")]
        public bool? IsSOAttached { get; set; }

        /// <summary>
        /// Gets or Sets OrderSchedulingList
        /// </summary>
        [DataMember(Name="orderSchedulingList")]
        public Collection<GlassRUNServiceWebApiManageOrderDTOOrderSchedulingDTO> OrderSchedulingList { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class GlassRUNServiceWebApiManageOrderDTOOrderSchedulingDTO {\n");
            sb.Append("  OrderId: ").Append(OrderId).Append("\n");
            sb.Append("  OrderNumber: ").Append(OrderNumber).Append("\n");
            sb.Append("  SalesOrderNumber: ").Append(SalesOrderNumber).Append("\n");
            sb.Append("  DeliveryPersonName: ").Append(DeliveryPersonName).Append("\n");
            sb.Append("  PlateNumber: ").Append(PlateNumber).Append("\n");
            sb.Append("  PickDateTime: ").Append(PickDateTime).Append("\n");
            sb.Append("  EnquiryId: ").Append(EnquiryId).Append("\n");
            sb.Append("  EnquiryNumber: ").Append(EnquiryNumber).Append("\n");
            sb.Append("  OrderType: ").Append(OrderType).Append("\n");
            sb.Append("  IsAdhoc: ").Append(IsAdhoc).Append("\n");
            sb.Append("  ExpectedTimeOfDelivery: ").Append(ExpectedTimeOfDelivery).Append("\n");
            sb.Append("  EnquiryDate: ").Append(EnquiryDate).Append("\n");
            sb.Append("  DeliveryPersonnelId: ").Append(DeliveryPersonnelId).Append("\n");
            sb.Append("  CarrierId: ").Append(CarrierId).Append("\n");
            sb.Append("  ExpectedShift: ").Append(ExpectedShift).Append("\n");
            sb.Append("  ProposedShift: ").Append(ProposedShift).Append("\n");
            sb.Append("  PickingShift: ").Append(PickingShift).Append("\n");
            sb.Append("  CreatedBy: ").Append(CreatedBy).Append("\n");
            sb.Append("  UserId: ").Append(UserId).Append("\n");
            sb.Append("  LocationType: ").Append(LocationType).Append("\n");
            sb.Append("  PlateNumberBy: ").Append(PlateNumberBy).Append("\n");
            sb.Append("  CreatedDate: ").Append(CreatedDate).Append("\n");
            sb.Append("  ModifiedBy: ").Append(ModifiedBy).Append("\n");
            sb.Append("  ModifiedDate: ").Append(ModifiedDate).Append("\n");
            sb.Append("  RelatedOrderId: ").Append(RelatedOrderId).Append("\n");
            sb.Append("  RelatedOrderNumber: ").Append(RelatedOrderNumber).Append("\n");
            sb.Append("  Sequence: ").Append(Sequence).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  CurrentState: ").Append(CurrentState).Append("\n");
            sb.Append("  IsSOAttached: ").Append(IsSOAttached).Append("\n");
            sb.Append("  OrderSchedulingList: ").Append(OrderSchedulingList).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((GlassRUNServiceWebApiManageOrderDTOOrderSchedulingDTO)obj);
        }

        /// <summary>
        /// Returns true if GlassRUNServiceWebApiManageOrderDTOOrderSchedulingDTO instances are equal
        /// </summary>
        /// <param name="other">Instance of GlassRUNServiceWebApiManageOrderDTOOrderSchedulingDTO to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(GlassRUNServiceWebApiManageOrderDTOOrderSchedulingDTO other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    OrderId == other.OrderId ||
                    OrderId != null &&
                    OrderId.Equals(other.OrderId)
                ) && 
                (
                    OrderNumber == other.OrderNumber ||
                    OrderNumber != null &&
                    OrderNumber.Equals(other.OrderNumber)
                ) && 
                (
                    SalesOrderNumber == other.SalesOrderNumber ||
                    SalesOrderNumber != null &&
                    SalesOrderNumber.Equals(other.SalesOrderNumber)
                ) && 
                (
                    DeliveryPersonName == other.DeliveryPersonName ||
                    DeliveryPersonName != null &&
                    DeliveryPersonName.Equals(other.DeliveryPersonName)
                ) && 
                (
                    PlateNumber == other.PlateNumber ||
                    PlateNumber != null &&
                    PlateNumber.Equals(other.PlateNumber)
                ) && 
                (
                    PickDateTime == other.PickDateTime ||
                    PickDateTime != null &&
                    PickDateTime.Equals(other.PickDateTime)
                ) && 
                (
                    EnquiryId == other.EnquiryId ||
                    EnquiryId != null &&
                    EnquiryId.Equals(other.EnquiryId)
                ) && 
                (
                    EnquiryNumber == other.EnquiryNumber ||
                    EnquiryNumber != null &&
                    EnquiryNumber.Equals(other.EnquiryNumber)
                ) && 
                (
                    OrderType == other.OrderType ||
                    OrderType != null &&
                    OrderType.Equals(other.OrderType)
                ) && 
                (
                    IsAdhoc == other.IsAdhoc ||
                    IsAdhoc != null &&
                    IsAdhoc.Equals(other.IsAdhoc)
                ) && 
                (
                    ExpectedTimeOfDelivery == other.ExpectedTimeOfDelivery ||
                    ExpectedTimeOfDelivery != null &&
                    ExpectedTimeOfDelivery.Equals(other.ExpectedTimeOfDelivery)
                ) && 
                (
                    EnquiryDate == other.EnquiryDate ||
                    EnquiryDate != null &&
                    EnquiryDate.Equals(other.EnquiryDate)
                ) && 
                (
                    DeliveryPersonnelId == other.DeliveryPersonnelId ||
                    DeliveryPersonnelId != null &&
                    DeliveryPersonnelId.Equals(other.DeliveryPersonnelId)
                ) && 
                (
                    CarrierId == other.CarrierId ||
                    CarrierId != null &&
                    CarrierId.Equals(other.CarrierId)
                ) && 
                (
                    ExpectedShift == other.ExpectedShift ||
                    ExpectedShift != null &&
                    ExpectedShift.Equals(other.ExpectedShift)
                ) && 
                (
                    ProposedShift == other.ProposedShift ||
                    ProposedShift != null &&
                    ProposedShift.Equals(other.ProposedShift)
                ) && 
                (
                    PickingShift == other.PickingShift ||
                    PickingShift != null &&
                    PickingShift.Equals(other.PickingShift)
                ) && 
                (
                    CreatedBy == other.CreatedBy ||
                    CreatedBy != null &&
                    CreatedBy.Equals(other.CreatedBy)
                ) && 
                (
                    UserId == other.UserId ||
                    UserId != null &&
                    UserId.Equals(other.UserId)
                ) && 
                (
                    LocationType == other.LocationType ||
                    LocationType != null &&
                    LocationType.Equals(other.LocationType)
                ) && 
                (
                    PlateNumberBy == other.PlateNumberBy ||
                    PlateNumberBy != null &&
                    PlateNumberBy.Equals(other.PlateNumberBy)
                ) && 
                (
                    CreatedDate == other.CreatedDate ||
                    CreatedDate != null &&
                    CreatedDate.Equals(other.CreatedDate)
                ) && 
                (
                    ModifiedBy == other.ModifiedBy ||
                    ModifiedBy != null &&
                    ModifiedBy.Equals(other.ModifiedBy)
                ) && 
                (
                    ModifiedDate == other.ModifiedDate ||
                    ModifiedDate != null &&
                    ModifiedDate.Equals(other.ModifiedDate)
                ) && 
                (
                    RelatedOrderId == other.RelatedOrderId ||
                    RelatedOrderId != null &&
                    RelatedOrderId.Equals(other.RelatedOrderId)
                ) && 
                (
                    RelatedOrderNumber == other.RelatedOrderNumber ||
                    RelatedOrderNumber != null &&
                    RelatedOrderNumber.Equals(other.RelatedOrderNumber)
                ) && 
                (
                    Sequence == other.Sequence ||
                    Sequence != null &&
                    Sequence.Equals(other.Sequence)
                ) && 
                (
                    Status == other.Status ||
                    Status != null &&
                    Status.Equals(other.Status)
                ) && 
                (
                    CurrentState == other.CurrentState ||
                    CurrentState != null &&
                    CurrentState.Equals(other.CurrentState)
                ) && 
                (
                    IsSOAttached == other.IsSOAttached ||
                    IsSOAttached != null &&
                    IsSOAttached.Equals(other.IsSOAttached)
                ) && 
                (
                    OrderSchedulingList == other.OrderSchedulingList ||
                    OrderSchedulingList != null &&
                    OrderSchedulingList.SequenceEqual(other.OrderSchedulingList)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (OrderId != null)
                    hashCode = hashCode * 59 + OrderId.GetHashCode();
                    if (OrderNumber != null)
                    hashCode = hashCode * 59 + OrderNumber.GetHashCode();
                    if (SalesOrderNumber != null)
                    hashCode = hashCode * 59 + SalesOrderNumber.GetHashCode();
                    if (DeliveryPersonName != null)
                    hashCode = hashCode * 59 + DeliveryPersonName.GetHashCode();
                    if (PlateNumber != null)
                    hashCode = hashCode * 59 + PlateNumber.GetHashCode();
                    if (PickDateTime != null)
                    hashCode = hashCode * 59 + PickDateTime.GetHashCode();
                    if (EnquiryId != null)
                    hashCode = hashCode * 59 + EnquiryId.GetHashCode();
                    if (EnquiryNumber != null)
                    hashCode = hashCode * 59 + EnquiryNumber.GetHashCode();
                    if (OrderType != null)
                    hashCode = hashCode * 59 + OrderType.GetHashCode();
                    if (IsAdhoc != null)
                    hashCode = hashCode * 59 + IsAdhoc.GetHashCode();
                    if (ExpectedTimeOfDelivery != null)
                    hashCode = hashCode * 59 + ExpectedTimeOfDelivery.GetHashCode();
                    if (EnquiryDate != null)
                    hashCode = hashCode * 59 + EnquiryDate.GetHashCode();
                    if (DeliveryPersonnelId != null)
                    hashCode = hashCode * 59 + DeliveryPersonnelId.GetHashCode();
                    if (CarrierId != null)
                    hashCode = hashCode * 59 + CarrierId.GetHashCode();
                    if (ExpectedShift != null)
                    hashCode = hashCode * 59 + ExpectedShift.GetHashCode();
                    if (ProposedShift != null)
                    hashCode = hashCode * 59 + ProposedShift.GetHashCode();
                    if (PickingShift != null)
                    hashCode = hashCode * 59 + PickingShift.GetHashCode();
                    if (CreatedBy != null)
                    hashCode = hashCode * 59 + CreatedBy.GetHashCode();
                    if (UserId != null)
                    hashCode = hashCode * 59 + UserId.GetHashCode();
                    if (LocationType != null)
                    hashCode = hashCode * 59 + LocationType.GetHashCode();
                    if (PlateNumberBy != null)
                    hashCode = hashCode * 59 + PlateNumberBy.GetHashCode();
                    if (CreatedDate != null)
                    hashCode = hashCode * 59 + CreatedDate.GetHashCode();
                    if (ModifiedBy != null)
                    hashCode = hashCode * 59 + ModifiedBy.GetHashCode();
                    if (ModifiedDate != null)
                    hashCode = hashCode * 59 + ModifiedDate.GetHashCode();
                    if (RelatedOrderId != null)
                    hashCode = hashCode * 59 + RelatedOrderId.GetHashCode();
                    if (RelatedOrderNumber != null)
                    hashCode = hashCode * 59 + RelatedOrderNumber.GetHashCode();
                    if (Sequence != null)
                    hashCode = hashCode * 59 + Sequence.GetHashCode();
                    if (Status != null)
                    hashCode = hashCode * 59 + Status.GetHashCode();
                    if (CurrentState != null)
                    hashCode = hashCode * 59 + CurrentState.GetHashCode();
                    if (IsSOAttached != null)
                    hashCode = hashCode * 59 + IsSOAttached.GetHashCode();
                    if (OrderSchedulingList != null)
                    hashCode = hashCode * 59 + OrderSchedulingList.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(GlassRUNServiceWebApiManageOrderDTOOrderSchedulingDTO left, GlassRUNServiceWebApiManageOrderDTOOrderSchedulingDTO right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(GlassRUNServiceWebApiManageOrderDTOOrderSchedulingDTO left, GlassRUNServiceWebApiManageOrderDTOOrderSchedulingDTO right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
