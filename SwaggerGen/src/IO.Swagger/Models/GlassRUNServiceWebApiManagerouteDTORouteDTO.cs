/*
 * WebAPIBuild
 *
 * This is glassRUN web api library for 3rd party and internal reference
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class GlassRUNServiceWebApiManagerouteDTORouteDTO : IEquatable<GlassRUNServiceWebApiManagerouteDTORouteDTO>
    { 
        /// <summary>
        /// Gets or Sets RouteId
        /// </summary>
        [DataMember(Name="routeId")]
        public long? RouteId { get; set; }

        /// <summary>
        /// Gets or Sets CompanyId
        /// </summary>
        [DataMember(Name="companyId")]
        public long? CompanyId { get; set; }

        /// <summary>
        /// Gets or Sets CompanyName
        /// </summary>
        [DataMember(Name="companyName")]
        public string CompanyName { get; set; }

        /// <summary>
        /// Gets or Sets CompanyMnemonic
        /// </summary>
        [DataMember(Name="companyMnemonic")]
        public string CompanyMnemonic { get; set; }

        /// <summary>
        /// Gets or Sets RouteNumber
        /// </summary>
        [DataMember(Name="routeNumber")]
        public string RouteNumber { get; set; }

        /// <summary>
        /// Gets or Sets OriginId
        /// </summary>
        [DataMember(Name="originId")]
        public long? OriginId { get; set; }

        /// <summary>
        /// Gets or Sets OriginCode
        /// </summary>
        [DataMember(Name="originCode")]
        public string OriginCode { get; set; }

        /// <summary>
        /// Gets or Sets OriginName
        /// </summary>
        [DataMember(Name="originName")]
        public string OriginName { get; set; }

        /// <summary>
        /// Gets or Sets DestinationId
        /// </summary>
        [DataMember(Name="destinationId")]
        public long? DestinationId { get; set; }

        /// <summary>
        /// Gets or Sets DestinationCode
        /// </summary>
        [DataMember(Name="destinationCode")]
        public string DestinationCode { get; set; }

        /// <summary>
        /// Gets or Sets DestinationName
        /// </summary>
        [DataMember(Name="destinationName")]
        public string DestinationName { get; set; }

        /// <summary>
        /// Gets or Sets TruckSizeId
        /// </summary>
        [DataMember(Name="truckSizeId")]
        public long? TruckSizeId { get; set; }

        /// <summary>
        /// Gets or Sets TruckSize
        /// </summary>
        [DataMember(Name="truckSize")]
        public string TruckSize { get; set; }

        /// <summary>
        /// Gets or Sets TruckCapacityPalettes
        /// </summary>
        [DataMember(Name="truckCapacityPalettes")]
        public double? TruckCapacityPalettes { get; set; }

        /// <summary>
        /// Gets or Sets TruckCapacityWeight
        /// </summary>
        [DataMember(Name="truckCapacityWeight")]
        public double? TruckCapacityWeight { get; set; }

        /// <summary>
        /// Gets or Sets CarrierNumber
        /// </summary>
        [DataMember(Name="carrierNumber")]
        public string CarrierNumber { get; set; }

        /// <summary>
        /// Gets or Sets CarrierCode
        /// </summary>
        [DataMember(Name="carrierCode")]
        public string CarrierCode { get; set; }

        /// <summary>
        /// Gets or Sets CarrierName
        /// </summary>
        [DataMember(Name="carrierName")]
        public string CarrierName { get; set; }

        /// <summary>
        /// Gets or Sets PalletInclusionGroup
        /// </summary>
        [DataMember(Name="palletInclusionGroup")]
        public string PalletInclusionGroup { get; set; }

        /// <summary>
        /// Gets or Sets IsActive
        /// </summary>
        [DataMember(Name="isActive")]
        public bool? IsActive { get; set; }

        /// <summary>
        /// Gets or Sets ReferenceID
        /// </summary>
        [DataMember(Name="referenceID")]
        public string ReferenceID { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class GlassRUNServiceWebApiManagerouteDTORouteDTO {\n");
            sb.Append("  RouteId: ").Append(RouteId).Append("\n");
            sb.Append("  CompanyId: ").Append(CompanyId).Append("\n");
            sb.Append("  CompanyName: ").Append(CompanyName).Append("\n");
            sb.Append("  CompanyMnemonic: ").Append(CompanyMnemonic).Append("\n");
            sb.Append("  RouteNumber: ").Append(RouteNumber).Append("\n");
            sb.Append("  OriginId: ").Append(OriginId).Append("\n");
            sb.Append("  OriginCode: ").Append(OriginCode).Append("\n");
            sb.Append("  OriginName: ").Append(OriginName).Append("\n");
            sb.Append("  DestinationId: ").Append(DestinationId).Append("\n");
            sb.Append("  DestinationCode: ").Append(DestinationCode).Append("\n");
            sb.Append("  DestinationName: ").Append(DestinationName).Append("\n");
            sb.Append("  TruckSizeId: ").Append(TruckSizeId).Append("\n");
            sb.Append("  TruckSize: ").Append(TruckSize).Append("\n");
            sb.Append("  TruckCapacityPalettes: ").Append(TruckCapacityPalettes).Append("\n");
            sb.Append("  TruckCapacityWeight: ").Append(TruckCapacityWeight).Append("\n");
            sb.Append("  CarrierNumber: ").Append(CarrierNumber).Append("\n");
            sb.Append("  CarrierCode: ").Append(CarrierCode).Append("\n");
            sb.Append("  CarrierName: ").Append(CarrierName).Append("\n");
            sb.Append("  PalletInclusionGroup: ").Append(PalletInclusionGroup).Append("\n");
            sb.Append("  IsActive: ").Append(IsActive).Append("\n");
            sb.Append("  ReferenceID: ").Append(ReferenceID).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((GlassRUNServiceWebApiManagerouteDTORouteDTO)obj);
        }

        /// <summary>
        /// Returns true if GlassRUNServiceWebApiManagerouteDTORouteDTO instances are equal
        /// </summary>
        /// <param name="other">Instance of GlassRUNServiceWebApiManagerouteDTORouteDTO to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(GlassRUNServiceWebApiManagerouteDTORouteDTO other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    RouteId == other.RouteId ||
                    RouteId != null &&
                    RouteId.Equals(other.RouteId)
                ) && 
                (
                    CompanyId == other.CompanyId ||
                    CompanyId != null &&
                    CompanyId.Equals(other.CompanyId)
                ) && 
                (
                    CompanyName == other.CompanyName ||
                    CompanyName != null &&
                    CompanyName.Equals(other.CompanyName)
                ) && 
                (
                    CompanyMnemonic == other.CompanyMnemonic ||
                    CompanyMnemonic != null &&
                    CompanyMnemonic.Equals(other.CompanyMnemonic)
                ) && 
                (
                    RouteNumber == other.RouteNumber ||
                    RouteNumber != null &&
                    RouteNumber.Equals(other.RouteNumber)
                ) && 
                (
                    OriginId == other.OriginId ||
                    OriginId != null &&
                    OriginId.Equals(other.OriginId)
                ) && 
                (
                    OriginCode == other.OriginCode ||
                    OriginCode != null &&
                    OriginCode.Equals(other.OriginCode)
                ) && 
                (
                    OriginName == other.OriginName ||
                    OriginName != null &&
                    OriginName.Equals(other.OriginName)
                ) && 
                (
                    DestinationId == other.DestinationId ||
                    DestinationId != null &&
                    DestinationId.Equals(other.DestinationId)
                ) && 
                (
                    DestinationCode == other.DestinationCode ||
                    DestinationCode != null &&
                    DestinationCode.Equals(other.DestinationCode)
                ) && 
                (
                    DestinationName == other.DestinationName ||
                    DestinationName != null &&
                    DestinationName.Equals(other.DestinationName)
                ) && 
                (
                    TruckSizeId == other.TruckSizeId ||
                    TruckSizeId != null &&
                    TruckSizeId.Equals(other.TruckSizeId)
                ) && 
                (
                    TruckSize == other.TruckSize ||
                    TruckSize != null &&
                    TruckSize.Equals(other.TruckSize)
                ) && 
                (
                    TruckCapacityPalettes == other.TruckCapacityPalettes ||
                    TruckCapacityPalettes != null &&
                    TruckCapacityPalettes.Equals(other.TruckCapacityPalettes)
                ) && 
                (
                    TruckCapacityWeight == other.TruckCapacityWeight ||
                    TruckCapacityWeight != null &&
                    TruckCapacityWeight.Equals(other.TruckCapacityWeight)
                ) && 
                (
                    CarrierNumber == other.CarrierNumber ||
                    CarrierNumber != null &&
                    CarrierNumber.Equals(other.CarrierNumber)
                ) && 
                (
                    CarrierCode == other.CarrierCode ||
                    CarrierCode != null &&
                    CarrierCode.Equals(other.CarrierCode)
                ) && 
                (
                    CarrierName == other.CarrierName ||
                    CarrierName != null &&
                    CarrierName.Equals(other.CarrierName)
                ) && 
                (
                    PalletInclusionGroup == other.PalletInclusionGroup ||
                    PalletInclusionGroup != null &&
                    PalletInclusionGroup.Equals(other.PalletInclusionGroup)
                ) && 
                (
                    IsActive == other.IsActive ||
                    IsActive != null &&
                    IsActive.Equals(other.IsActive)
                ) && 
                (
                    ReferenceID == other.ReferenceID ||
                    ReferenceID != null &&
                    ReferenceID.Equals(other.ReferenceID)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (RouteId != null)
                    hashCode = hashCode * 59 + RouteId.GetHashCode();
                    if (CompanyId != null)
                    hashCode = hashCode * 59 + CompanyId.GetHashCode();
                    if (CompanyName != null)
                    hashCode = hashCode * 59 + CompanyName.GetHashCode();
                    if (CompanyMnemonic != null)
                    hashCode = hashCode * 59 + CompanyMnemonic.GetHashCode();
                    if (RouteNumber != null)
                    hashCode = hashCode * 59 + RouteNumber.GetHashCode();
                    if (OriginId != null)
                    hashCode = hashCode * 59 + OriginId.GetHashCode();
                    if (OriginCode != null)
                    hashCode = hashCode * 59 + OriginCode.GetHashCode();
                    if (OriginName != null)
                    hashCode = hashCode * 59 + OriginName.GetHashCode();
                    if (DestinationId != null)
                    hashCode = hashCode * 59 + DestinationId.GetHashCode();
                    if (DestinationCode != null)
                    hashCode = hashCode * 59 + DestinationCode.GetHashCode();
                    if (DestinationName != null)
                    hashCode = hashCode * 59 + DestinationName.GetHashCode();
                    if (TruckSizeId != null)
                    hashCode = hashCode * 59 + TruckSizeId.GetHashCode();
                    if (TruckSize != null)
                    hashCode = hashCode * 59 + TruckSize.GetHashCode();
                    if (TruckCapacityPalettes != null)
                    hashCode = hashCode * 59 + TruckCapacityPalettes.GetHashCode();
                    if (TruckCapacityWeight != null)
                    hashCode = hashCode * 59 + TruckCapacityWeight.GetHashCode();
                    if (CarrierNumber != null)
                    hashCode = hashCode * 59 + CarrierNumber.GetHashCode();
                    if (CarrierCode != null)
                    hashCode = hashCode * 59 + CarrierCode.GetHashCode();
                    if (CarrierName != null)
                    hashCode = hashCode * 59 + CarrierName.GetHashCode();
                    if (PalletInclusionGroup != null)
                    hashCode = hashCode * 59 + PalletInclusionGroup.GetHashCode();
                    if (IsActive != null)
                    hashCode = hashCode * 59 + IsActive.GetHashCode();
                    if (ReferenceID != null)
                    hashCode = hashCode * 59 + ReferenceID.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(GlassRUNServiceWebApiManagerouteDTORouteDTO left, GlassRUNServiceWebApiManagerouteDTORouteDTO right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(GlassRUNServiceWebApiManagerouteDTORouteDTO left, GlassRUNServiceWebApiManagerouteDTORouteDTO right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
