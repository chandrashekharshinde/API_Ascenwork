/*
 * WebAPIBuild
 *
 * This is glassRUN web api library for 3rd party and internal reference
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class GlassRUNServiceWebAPIManageBayDTOBayDTO : IEquatable<GlassRUNServiceWebAPIManageBayDTOBayDTO>
    { 
        /// <summary>
        /// Gets or Sets BayId
        /// </summary>
        [DataMember(Name="bayId")]
        public long? BayId { get; set; }

        /// <summary>
        /// Gets or Sets OrderId
        /// </summary>
        [DataMember(Name="orderId")]
        public long? OrderId { get; set; }

        /// <summary>
        /// Gets or Sets BayName
        /// </summary>
        [DataMember(Name="bayName")]
        public string BayName { get; set; }

        /// <summary>
        /// Gets or Sets OrderNumber
        /// </summary>
        [DataMember(Name="orderNumber")]
        public string OrderNumber { get; set; }

        /// <summary>
        /// Gets or Sets BayCode
        /// </summary>
        [DataMember(Name="bayCode")]
        public string BayCode { get; set; }

        /// <summary>
        /// Gets or Sets LocationCode
        /// </summary>
        [DataMember(Name="locationCode")]
        public string LocationCode { get; set; }

        /// <summary>
        /// Gets or Sets TruckNumber
        /// </summary>
        [DataMember(Name="truckNumber")]
        public string TruckNumber { get; set; }

        /// <summary>
        /// Gets or Sets EstimatedLoadingTimeInMinutes
        /// </summary>
        [DataMember(Name="estimatedLoadingTimeInMinutes")]
        public string EstimatedLoadingTimeInMinutes { get; set; }

        /// <summary>
        /// Gets or Sets IsActive
        /// </summary>
        [DataMember(Name="isActive")]
        public bool? IsActive { get; set; }

        /// <summary>
        /// Gets or Sets IsDeActivated
        /// </summary>
        [DataMember(Name="isDeActivated")]
        public bool? IsDeActivated { get; set; }

        /// <summary>
        /// Gets or Sets CreatedBy
        /// </summary>
        [DataMember(Name="createdBy")]
        public long? CreatedBy { get; set; }

        /// <summary>
        /// Gets or Sets CreatedDate
        /// </summary>
        [DataMember(Name="createdDate")]
        public DateTime? CreatedDate { get; set; }

        /// <summary>
        /// Gets or Sets ModifiedBy
        /// </summary>
        [DataMember(Name="modifiedBy")]
        public long? ModifiedBy { get; set; }

        /// <summary>
        /// Gets or Sets ModifiedDate
        /// </summary>
        [DataMember(Name="modifiedDate")]
        public DateTime? ModifiedDate { get; set; }

        /// <summary>
        /// Gets or Sets IsQueueHorizontal
        /// </summary>
        [DataMember(Name="isQueueHorizontal")]
        public bool? IsQueueHorizontal { get; set; }

        /// <summary>
        /// Gets or Sets UserName
        /// </summary>
        [DataMember(Name="userName")]
        public string UserName { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name="name")]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets UserId
        /// </summary>
        [DataMember(Name="userId")]
        public long? UserId { get; set; }

        /// <summary>
        /// Gets or Sets ChangedRequestBay
        /// </summary>
        [DataMember(Name="changedRequestBay")]
        public string ChangedRequestBay { get; set; }

        /// <summary>
        /// Gets or Sets BayList
        /// </summary>
        [DataMember(Name="bayList")]
        public Collection<GlassRUNServiceWebAPIManageBayDTOBayDTO> BayList { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class GlassRUNServiceWebAPIManageBayDTOBayDTO {\n");
            sb.Append("  BayId: ").Append(BayId).Append("\n");
            sb.Append("  OrderId: ").Append(OrderId).Append("\n");
            sb.Append("  BayName: ").Append(BayName).Append("\n");
            sb.Append("  OrderNumber: ").Append(OrderNumber).Append("\n");
            sb.Append("  BayCode: ").Append(BayCode).Append("\n");
            sb.Append("  LocationCode: ").Append(LocationCode).Append("\n");
            sb.Append("  TruckNumber: ").Append(TruckNumber).Append("\n");
            sb.Append("  EstimatedLoadingTimeInMinutes: ").Append(EstimatedLoadingTimeInMinutes).Append("\n");
            sb.Append("  IsActive: ").Append(IsActive).Append("\n");
            sb.Append("  IsDeActivated: ").Append(IsDeActivated).Append("\n");
            sb.Append("  CreatedBy: ").Append(CreatedBy).Append("\n");
            sb.Append("  CreatedDate: ").Append(CreatedDate).Append("\n");
            sb.Append("  ModifiedBy: ").Append(ModifiedBy).Append("\n");
            sb.Append("  ModifiedDate: ").Append(ModifiedDate).Append("\n");
            sb.Append("  IsQueueHorizontal: ").Append(IsQueueHorizontal).Append("\n");
            sb.Append("  UserName: ").Append(UserName).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  UserId: ").Append(UserId).Append("\n");
            sb.Append("  ChangedRequestBay: ").Append(ChangedRequestBay).Append("\n");
            sb.Append("  BayList: ").Append(BayList).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((GlassRUNServiceWebAPIManageBayDTOBayDTO)obj);
        }

        /// <summary>
        /// Returns true if GlassRUNServiceWebAPIManageBayDTOBayDTO instances are equal
        /// </summary>
        /// <param name="other">Instance of GlassRUNServiceWebAPIManageBayDTOBayDTO to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(GlassRUNServiceWebAPIManageBayDTOBayDTO other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    BayId == other.BayId ||
                    BayId != null &&
                    BayId.Equals(other.BayId)
                ) && 
                (
                    OrderId == other.OrderId ||
                    OrderId != null &&
                    OrderId.Equals(other.OrderId)
                ) && 
                (
                    BayName == other.BayName ||
                    BayName != null &&
                    BayName.Equals(other.BayName)
                ) && 
                (
                    OrderNumber == other.OrderNumber ||
                    OrderNumber != null &&
                    OrderNumber.Equals(other.OrderNumber)
                ) && 
                (
                    BayCode == other.BayCode ||
                    BayCode != null &&
                    BayCode.Equals(other.BayCode)
                ) && 
                (
                    LocationCode == other.LocationCode ||
                    LocationCode != null &&
                    LocationCode.Equals(other.LocationCode)
                ) && 
                (
                    TruckNumber == other.TruckNumber ||
                    TruckNumber != null &&
                    TruckNumber.Equals(other.TruckNumber)
                ) && 
                (
                    EstimatedLoadingTimeInMinutes == other.EstimatedLoadingTimeInMinutes ||
                    EstimatedLoadingTimeInMinutes != null &&
                    EstimatedLoadingTimeInMinutes.Equals(other.EstimatedLoadingTimeInMinutes)
                ) && 
                (
                    IsActive == other.IsActive ||
                    IsActive != null &&
                    IsActive.Equals(other.IsActive)
                ) && 
                (
                    IsDeActivated == other.IsDeActivated ||
                    IsDeActivated != null &&
                    IsDeActivated.Equals(other.IsDeActivated)
                ) && 
                (
                    CreatedBy == other.CreatedBy ||
                    CreatedBy != null &&
                    CreatedBy.Equals(other.CreatedBy)
                ) && 
                (
                    CreatedDate == other.CreatedDate ||
                    CreatedDate != null &&
                    CreatedDate.Equals(other.CreatedDate)
                ) && 
                (
                    ModifiedBy == other.ModifiedBy ||
                    ModifiedBy != null &&
                    ModifiedBy.Equals(other.ModifiedBy)
                ) && 
                (
                    ModifiedDate == other.ModifiedDate ||
                    ModifiedDate != null &&
                    ModifiedDate.Equals(other.ModifiedDate)
                ) && 
                (
                    IsQueueHorizontal == other.IsQueueHorizontal ||
                    IsQueueHorizontal != null &&
                    IsQueueHorizontal.Equals(other.IsQueueHorizontal)
                ) && 
                (
                    UserName == other.UserName ||
                    UserName != null &&
                    UserName.Equals(other.UserName)
                ) && 
                (
                    Name == other.Name ||
                    Name != null &&
                    Name.Equals(other.Name)
                ) && 
                (
                    UserId == other.UserId ||
                    UserId != null &&
                    UserId.Equals(other.UserId)
                ) && 
                (
                    ChangedRequestBay == other.ChangedRequestBay ||
                    ChangedRequestBay != null &&
                    ChangedRequestBay.Equals(other.ChangedRequestBay)
                ) && 
                (
                    BayList == other.BayList ||
                    BayList != null &&
                    BayList.SequenceEqual(other.BayList)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (BayId != null)
                    hashCode = hashCode * 59 + BayId.GetHashCode();
                    if (OrderId != null)
                    hashCode = hashCode * 59 + OrderId.GetHashCode();
                    if (BayName != null)
                    hashCode = hashCode * 59 + BayName.GetHashCode();
                    if (OrderNumber != null)
                    hashCode = hashCode * 59 + OrderNumber.GetHashCode();
                    if (BayCode != null)
                    hashCode = hashCode * 59 + BayCode.GetHashCode();
                    if (LocationCode != null)
                    hashCode = hashCode * 59 + LocationCode.GetHashCode();
                    if (TruckNumber != null)
                    hashCode = hashCode * 59 + TruckNumber.GetHashCode();
                    if (EstimatedLoadingTimeInMinutes != null)
                    hashCode = hashCode * 59 + EstimatedLoadingTimeInMinutes.GetHashCode();
                    if (IsActive != null)
                    hashCode = hashCode * 59 + IsActive.GetHashCode();
                    if (IsDeActivated != null)
                    hashCode = hashCode * 59 + IsDeActivated.GetHashCode();
                    if (CreatedBy != null)
                    hashCode = hashCode * 59 + CreatedBy.GetHashCode();
                    if (CreatedDate != null)
                    hashCode = hashCode * 59 + CreatedDate.GetHashCode();
                    if (ModifiedBy != null)
                    hashCode = hashCode * 59 + ModifiedBy.GetHashCode();
                    if (ModifiedDate != null)
                    hashCode = hashCode * 59 + ModifiedDate.GetHashCode();
                    if (IsQueueHorizontal != null)
                    hashCode = hashCode * 59 + IsQueueHorizontal.GetHashCode();
                    if (UserName != null)
                    hashCode = hashCode * 59 + UserName.GetHashCode();
                    if (Name != null)
                    hashCode = hashCode * 59 + Name.GetHashCode();
                    if (UserId != null)
                    hashCode = hashCode * 59 + UserId.GetHashCode();
                    if (ChangedRequestBay != null)
                    hashCode = hashCode * 59 + ChangedRequestBay.GetHashCode();
                    if (BayList != null)
                    hashCode = hashCode * 59 + BayList.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(GlassRUNServiceWebAPIManageBayDTOBayDTO left, GlassRUNServiceWebAPIManageBayDTOBayDTO right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(GlassRUNServiceWebAPIManageBayDTOBayDTO left, GlassRUNServiceWebAPIManageBayDTOBayDTO right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
