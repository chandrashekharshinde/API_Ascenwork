/*
 * WebAPIBuild
 *
 * This is glassRUN web api library for 3rd party and internal reference
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class GlassRUNServiceWebApiManageOrderDTOOrderSuggestionDTO : IEquatable<GlassRUNServiceWebApiManageOrderDTOOrderSuggestionDTO>
    { 
        /// <summary>
        /// Gets or Sets OrderSuggestionId
        /// </summary>
        [DataMember(Name="orderSuggestionId")]
        public long? OrderSuggestionId { get; set; }

        /// <summary>
        /// Gets or Sets CompanyCode
        /// </summary>
        [DataMember(Name="companyCode")]
        public string CompanyCode { get; set; }

        /// <summary>
        /// Gets or Sets ProductCode
        /// </summary>
        [DataMember(Name="productCode")]
        public string ProductCode { get; set; }

        /// <summary>
        /// Gets or Sets ProductQuantity
        /// </summary>
        [DataMember(Name="productQuantity")]
        public double? ProductQuantity { get; set; }

        /// <summary>
        /// Gets or Sets ItemName
        /// </summary>
        [DataMember(Name="itemName")]
        public string ItemName { get; set; }

        /// <summary>
        /// Gets or Sets ProductName
        /// </summary>
        [DataMember(Name="productName")]
        public string ProductName { get; set; }

        /// <summary>
        /// Gets or Sets ImageUrl
        /// </summary>
        [DataMember(Name="imageUrl")]
        public string ImageUrl { get; set; }

        /// <summary>
        /// Gets or Sets UnitPrice
        /// </summary>
        [DataMember(Name="unitPrice")]
        public double? UnitPrice { get; set; }

        /// <summary>
        /// Gets or Sets TotalPrice
        /// </summary>
        [DataMember(Name="totalPrice")]
        public double? TotalPrice { get; set; }

        /// <summary>
        /// Gets or Sets OrderDate
        /// </summary>
        [DataMember(Name="orderDate")]
        public DateTime? OrderDate { get; set; }

        /// <summary>
        /// Gets or Sets SuggestionGroup
        /// </summary>
        [DataMember(Name="suggestionGroup")]
        public string SuggestionGroup { get; set; }

        /// <summary>
        /// Gets or Sets SuggestionIdentifier
        /// </summary>
        [DataMember(Name="suggestionIdentifier")]
        public string SuggestionIdentifier { get; set; }

        /// <summary>
        /// Gets or Sets IsActive
        /// </summary>
        [DataMember(Name="isActive")]
        public bool? IsActive { get; set; }

        /// <summary>
        /// Gets or Sets CreatedBy
        /// </summary>
        [DataMember(Name="createdBy")]
        public long? CreatedBy { get; set; }

        /// <summary>
        /// Gets or Sets CreatedDate
        /// </summary>
        [DataMember(Name="createdDate")]
        public DateTime? CreatedDate { get; set; }

        /// <summary>
        /// Gets or Sets Sequence
        /// </summary>
        [DataMember(Name="sequence")]
        public long? Sequence { get; set; }

        /// <summary>
        /// Gets or Sets UpdatedBy
        /// </summary>
        [DataMember(Name="updatedBy")]
        public long? UpdatedBy { get; set; }

        /// <summary>
        /// Gets or Sets UpdatedDate
        /// </summary>
        [DataMember(Name="updatedDate")]
        public DateTime? UpdatedDate { get; set; }

        /// <summary>
        /// Gets or Sets PromotionRefId
        /// </summary>
        [DataMember(Name="promotionRefId")]
        public string PromotionRefId { get; set; }

        /// <summary>
        /// Gets or Sets NumberOfPromotions
        /// </summary>
        [DataMember(Name="numberOfPromotions")]
        public long? NumberOfPromotions { get; set; }

        /// <summary>
        /// Gets or Sets AvailableNumberOfPromotions
        /// </summary>
        [DataMember(Name="availableNumberOfPromotions")]
        public long? AvailableNumberOfPromotions { get; set; }

        /// <summary>
        /// Gets or Sets AvailableAdditionalQuantity
        /// </summary>
        [DataMember(Name="availableAdditionalQuantity")]
        public double? AvailableAdditionalQuantity { get; set; }

        /// <summary>
        /// Gets or Sets AdditionalQuantity
        /// </summary>
        [DataMember(Name="additionalQuantity")]
        public double? AdditionalQuantity { get; set; }

        /// <summary>
        /// Gets or Sets ItemType
        /// </summary>
        [DataMember(Name="itemType")]
        public long? ItemType { get; set; }

        /// <summary>
        /// Gets or Sets ProductType
        /// </summary>
        [DataMember(Name="productType")]
        public string ProductType { get; set; }

        /// <summary>
        /// Gets or Sets OrderSuggestionList
        /// </summary>
        [DataMember(Name="orderSuggestionList")]
        public Collection<GlassRUNServiceWebApiManageOrderDTOOrderSuggestionDTO> OrderSuggestionList { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class GlassRUNServiceWebApiManageOrderDTOOrderSuggestionDTO {\n");
            sb.Append("  OrderSuggestionId: ").Append(OrderSuggestionId).Append("\n");
            sb.Append("  CompanyCode: ").Append(CompanyCode).Append("\n");
            sb.Append("  ProductCode: ").Append(ProductCode).Append("\n");
            sb.Append("  ProductQuantity: ").Append(ProductQuantity).Append("\n");
            sb.Append("  ItemName: ").Append(ItemName).Append("\n");
            sb.Append("  ProductName: ").Append(ProductName).Append("\n");
            sb.Append("  ImageUrl: ").Append(ImageUrl).Append("\n");
            sb.Append("  UnitPrice: ").Append(UnitPrice).Append("\n");
            sb.Append("  TotalPrice: ").Append(TotalPrice).Append("\n");
            sb.Append("  OrderDate: ").Append(OrderDate).Append("\n");
            sb.Append("  SuggestionGroup: ").Append(SuggestionGroup).Append("\n");
            sb.Append("  SuggestionIdentifier: ").Append(SuggestionIdentifier).Append("\n");
            sb.Append("  IsActive: ").Append(IsActive).Append("\n");
            sb.Append("  CreatedBy: ").Append(CreatedBy).Append("\n");
            sb.Append("  CreatedDate: ").Append(CreatedDate).Append("\n");
            sb.Append("  Sequence: ").Append(Sequence).Append("\n");
            sb.Append("  UpdatedBy: ").Append(UpdatedBy).Append("\n");
            sb.Append("  UpdatedDate: ").Append(UpdatedDate).Append("\n");
            sb.Append("  PromotionRefId: ").Append(PromotionRefId).Append("\n");
            sb.Append("  NumberOfPromotions: ").Append(NumberOfPromotions).Append("\n");
            sb.Append("  AvailableNumberOfPromotions: ").Append(AvailableNumberOfPromotions).Append("\n");
            sb.Append("  AvailableAdditionalQuantity: ").Append(AvailableAdditionalQuantity).Append("\n");
            sb.Append("  AdditionalQuantity: ").Append(AdditionalQuantity).Append("\n");
            sb.Append("  ItemType: ").Append(ItemType).Append("\n");
            sb.Append("  ProductType: ").Append(ProductType).Append("\n");
            sb.Append("  OrderSuggestionList: ").Append(OrderSuggestionList).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((GlassRUNServiceWebApiManageOrderDTOOrderSuggestionDTO)obj);
        }

        /// <summary>
        /// Returns true if GlassRUNServiceWebApiManageOrderDTOOrderSuggestionDTO instances are equal
        /// </summary>
        /// <param name="other">Instance of GlassRUNServiceWebApiManageOrderDTOOrderSuggestionDTO to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(GlassRUNServiceWebApiManageOrderDTOOrderSuggestionDTO other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    OrderSuggestionId == other.OrderSuggestionId ||
                    OrderSuggestionId != null &&
                    OrderSuggestionId.Equals(other.OrderSuggestionId)
                ) && 
                (
                    CompanyCode == other.CompanyCode ||
                    CompanyCode != null &&
                    CompanyCode.Equals(other.CompanyCode)
                ) && 
                (
                    ProductCode == other.ProductCode ||
                    ProductCode != null &&
                    ProductCode.Equals(other.ProductCode)
                ) && 
                (
                    ProductQuantity == other.ProductQuantity ||
                    ProductQuantity != null &&
                    ProductQuantity.Equals(other.ProductQuantity)
                ) && 
                (
                    ItemName == other.ItemName ||
                    ItemName != null &&
                    ItemName.Equals(other.ItemName)
                ) && 
                (
                    ProductName == other.ProductName ||
                    ProductName != null &&
                    ProductName.Equals(other.ProductName)
                ) && 
                (
                    ImageUrl == other.ImageUrl ||
                    ImageUrl != null &&
                    ImageUrl.Equals(other.ImageUrl)
                ) && 
                (
                    UnitPrice == other.UnitPrice ||
                    UnitPrice != null &&
                    UnitPrice.Equals(other.UnitPrice)
                ) && 
                (
                    TotalPrice == other.TotalPrice ||
                    TotalPrice != null &&
                    TotalPrice.Equals(other.TotalPrice)
                ) && 
                (
                    OrderDate == other.OrderDate ||
                    OrderDate != null &&
                    OrderDate.Equals(other.OrderDate)
                ) && 
                (
                    SuggestionGroup == other.SuggestionGroup ||
                    SuggestionGroup != null &&
                    SuggestionGroup.Equals(other.SuggestionGroup)
                ) && 
                (
                    SuggestionIdentifier == other.SuggestionIdentifier ||
                    SuggestionIdentifier != null &&
                    SuggestionIdentifier.Equals(other.SuggestionIdentifier)
                ) && 
                (
                    IsActive == other.IsActive ||
                    IsActive != null &&
                    IsActive.Equals(other.IsActive)
                ) && 
                (
                    CreatedBy == other.CreatedBy ||
                    CreatedBy != null &&
                    CreatedBy.Equals(other.CreatedBy)
                ) && 
                (
                    CreatedDate == other.CreatedDate ||
                    CreatedDate != null &&
                    CreatedDate.Equals(other.CreatedDate)
                ) && 
                (
                    Sequence == other.Sequence ||
                    Sequence != null &&
                    Sequence.Equals(other.Sequence)
                ) && 
                (
                    UpdatedBy == other.UpdatedBy ||
                    UpdatedBy != null &&
                    UpdatedBy.Equals(other.UpdatedBy)
                ) && 
                (
                    UpdatedDate == other.UpdatedDate ||
                    UpdatedDate != null &&
                    UpdatedDate.Equals(other.UpdatedDate)
                ) && 
                (
                    PromotionRefId == other.PromotionRefId ||
                    PromotionRefId != null &&
                    PromotionRefId.Equals(other.PromotionRefId)
                ) && 
                (
                    NumberOfPromotions == other.NumberOfPromotions ||
                    NumberOfPromotions != null &&
                    NumberOfPromotions.Equals(other.NumberOfPromotions)
                ) && 
                (
                    AvailableNumberOfPromotions == other.AvailableNumberOfPromotions ||
                    AvailableNumberOfPromotions != null &&
                    AvailableNumberOfPromotions.Equals(other.AvailableNumberOfPromotions)
                ) && 
                (
                    AvailableAdditionalQuantity == other.AvailableAdditionalQuantity ||
                    AvailableAdditionalQuantity != null &&
                    AvailableAdditionalQuantity.Equals(other.AvailableAdditionalQuantity)
                ) && 
                (
                    AdditionalQuantity == other.AdditionalQuantity ||
                    AdditionalQuantity != null &&
                    AdditionalQuantity.Equals(other.AdditionalQuantity)
                ) && 
                (
                    ItemType == other.ItemType ||
                    ItemType != null &&
                    ItemType.Equals(other.ItemType)
                ) && 
                (
                    ProductType == other.ProductType ||
                    ProductType != null &&
                    ProductType.Equals(other.ProductType)
                ) && 
                (
                    OrderSuggestionList == other.OrderSuggestionList ||
                    OrderSuggestionList != null &&
                    OrderSuggestionList.SequenceEqual(other.OrderSuggestionList)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (OrderSuggestionId != null)
                    hashCode = hashCode * 59 + OrderSuggestionId.GetHashCode();
                    if (CompanyCode != null)
                    hashCode = hashCode * 59 + CompanyCode.GetHashCode();
                    if (ProductCode != null)
                    hashCode = hashCode * 59 + ProductCode.GetHashCode();
                    if (ProductQuantity != null)
                    hashCode = hashCode * 59 + ProductQuantity.GetHashCode();
                    if (ItemName != null)
                    hashCode = hashCode * 59 + ItemName.GetHashCode();
                    if (ProductName != null)
                    hashCode = hashCode * 59 + ProductName.GetHashCode();
                    if (ImageUrl != null)
                    hashCode = hashCode * 59 + ImageUrl.GetHashCode();
                    if (UnitPrice != null)
                    hashCode = hashCode * 59 + UnitPrice.GetHashCode();
                    if (TotalPrice != null)
                    hashCode = hashCode * 59 + TotalPrice.GetHashCode();
                    if (OrderDate != null)
                    hashCode = hashCode * 59 + OrderDate.GetHashCode();
                    if (SuggestionGroup != null)
                    hashCode = hashCode * 59 + SuggestionGroup.GetHashCode();
                    if (SuggestionIdentifier != null)
                    hashCode = hashCode * 59 + SuggestionIdentifier.GetHashCode();
                    if (IsActive != null)
                    hashCode = hashCode * 59 + IsActive.GetHashCode();
                    if (CreatedBy != null)
                    hashCode = hashCode * 59 + CreatedBy.GetHashCode();
                    if (CreatedDate != null)
                    hashCode = hashCode * 59 + CreatedDate.GetHashCode();
                    if (Sequence != null)
                    hashCode = hashCode * 59 + Sequence.GetHashCode();
                    if (UpdatedBy != null)
                    hashCode = hashCode * 59 + UpdatedBy.GetHashCode();
                    if (UpdatedDate != null)
                    hashCode = hashCode * 59 + UpdatedDate.GetHashCode();
                    if (PromotionRefId != null)
                    hashCode = hashCode * 59 + PromotionRefId.GetHashCode();
                    if (NumberOfPromotions != null)
                    hashCode = hashCode * 59 + NumberOfPromotions.GetHashCode();
                    if (AvailableNumberOfPromotions != null)
                    hashCode = hashCode * 59 + AvailableNumberOfPromotions.GetHashCode();
                    if (AvailableAdditionalQuantity != null)
                    hashCode = hashCode * 59 + AvailableAdditionalQuantity.GetHashCode();
                    if (AdditionalQuantity != null)
                    hashCode = hashCode * 59 + AdditionalQuantity.GetHashCode();
                    if (ItemType != null)
                    hashCode = hashCode * 59 + ItemType.GetHashCode();
                    if (ProductType != null)
                    hashCode = hashCode * 59 + ProductType.GetHashCode();
                    if (OrderSuggestionList != null)
                    hashCode = hashCode * 59 + OrderSuggestionList.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(GlassRUNServiceWebApiManageOrderDTOOrderSuggestionDTO left, GlassRUNServiceWebApiManageOrderDTOOrderSuggestionDTO right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(GlassRUNServiceWebApiManageOrderDTOOrderSuggestionDTO left, GlassRUNServiceWebApiManageOrderDTOOrderSuggestionDTO right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
