/*
 * WebAPIBuild
 *
 * This is glassRUN web api library for 3rd party and internal reference
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class GlassRUNServiceWebAPIManageEnquiryDTOConsolidatedProductsSearchDTO : IEquatable<GlassRUNServiceWebAPIManageEnquiryDTOConsolidatedProductsSearchDTO>
    { 
        /// <summary>
        /// Gets or Sets EnquiryId
        /// </summary>
        [DataMember(Name="enquiryId")]
        public long? EnquiryId { get; set; }

        /// <summary>
        /// Gets or Sets EnquiryAutoNumber
        /// </summary>
        [DataMember(Name="enquiryAutoNumber")]
        public string EnquiryAutoNumber { get; set; }

        /// <summary>
        /// Gets or Sets SoldToCode
        /// </summary>
        [DataMember(Name="soldToCode")]
        public string SoldToCode { get; set; }

        /// <summary>
        /// Gets or Sets SoldToName
        /// </summary>
        [DataMember(Name="soldToName")]
        public string SoldToName { get; set; }

        /// <summary>
        /// Gets or Sets ShipToCode
        /// </summary>
        [DataMember(Name="shipToCode")]
        public string ShipToCode { get; set; }

        /// <summary>
        /// Gets or Sets ShipToName
        /// </summary>
        [DataMember(Name="shipToName")]
        public string ShipToName { get; set; }

        /// <summary>
        /// Gets or Sets ProductCode
        /// </summary>
        [DataMember(Name="productCode")]
        public string ProductCode { get; set; }

        /// <summary>
        /// Gets or Sets ProductName
        /// </summary>
        [DataMember(Name="productName")]
        public string ProductName { get; set; }

        /// <summary>
        /// Gets or Sets ProductQuantity
        /// </summary>
        [DataMember(Name="productQuantity")]
        public long? ProductQuantity { get; set; }

        /// <summary>
        /// Gets or Sets Uom
        /// </summary>
        [DataMember(Name="uom")]
        public string Uom { get; set; }

        /// <summary>
        /// Gets or Sets RequestDate
        /// </summary>
        [DataMember(Name="requestDate")]
        public DateTime? RequestDate { get; set; }

        /// <summary>
        /// Gets or Sets UnitPrice
        /// </summary>
        [DataMember(Name="unitPrice")]
        public double? UnitPrice { get; set; }

        /// <summary>
        /// Gets or Sets TotalPrice
        /// </summary>
        [DataMember(Name="totalPrice")]
        public double? TotalPrice { get; set; }

        /// <summary>
        /// Gets or Sets TotalEnquiriesCount
        /// </summary>
        [DataMember(Name="totalEnquiriesCount")]
        public long? TotalEnquiriesCount { get; set; }

        /// <summary>
        /// Gets or Sets Stock
        /// </summary>
        [DataMember(Name="stock")]
        public long? Stock { get; set; }

        /// <summary>
        /// Gets or Sets PriorityRating
        /// </summary>
        [DataMember(Name="priorityRating")]
        public long? PriorityRating { get; set; }

        /// <summary>
        /// Gets or Sets RequestDateFrom
        /// </summary>
        [DataMember(Name="requestDateFrom")]
        public DateTime? RequestDateFrom { get; set; }

        /// <summary>
        /// Gets or Sets RequestDateTo
        /// </summary>
        [DataMember(Name="requestDateTo")]
        public DateTime? RequestDateTo { get; set; }

        /// <summary>
        /// Gets or Sets CompanyId
        /// </summary>
        [DataMember(Name="companyId")]
        public long? CompanyId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class GlassRUNServiceWebAPIManageEnquiryDTOConsolidatedProductsSearchDTO {\n");
            sb.Append("  EnquiryId: ").Append(EnquiryId).Append("\n");
            sb.Append("  EnquiryAutoNumber: ").Append(EnquiryAutoNumber).Append("\n");
            sb.Append("  SoldToCode: ").Append(SoldToCode).Append("\n");
            sb.Append("  SoldToName: ").Append(SoldToName).Append("\n");
            sb.Append("  ShipToCode: ").Append(ShipToCode).Append("\n");
            sb.Append("  ShipToName: ").Append(ShipToName).Append("\n");
            sb.Append("  ProductCode: ").Append(ProductCode).Append("\n");
            sb.Append("  ProductName: ").Append(ProductName).Append("\n");
            sb.Append("  ProductQuantity: ").Append(ProductQuantity).Append("\n");
            sb.Append("  Uom: ").Append(Uom).Append("\n");
            sb.Append("  RequestDate: ").Append(RequestDate).Append("\n");
            sb.Append("  UnitPrice: ").Append(UnitPrice).Append("\n");
            sb.Append("  TotalPrice: ").Append(TotalPrice).Append("\n");
            sb.Append("  TotalEnquiriesCount: ").Append(TotalEnquiriesCount).Append("\n");
            sb.Append("  Stock: ").Append(Stock).Append("\n");
            sb.Append("  PriorityRating: ").Append(PriorityRating).Append("\n");
            sb.Append("  RequestDateFrom: ").Append(RequestDateFrom).Append("\n");
            sb.Append("  RequestDateTo: ").Append(RequestDateTo).Append("\n");
            sb.Append("  CompanyId: ").Append(CompanyId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((GlassRUNServiceWebAPIManageEnquiryDTOConsolidatedProductsSearchDTO)obj);
        }

        /// <summary>
        /// Returns true if GlassRUNServiceWebAPIManageEnquiryDTOConsolidatedProductsSearchDTO instances are equal
        /// </summary>
        /// <param name="other">Instance of GlassRUNServiceWebAPIManageEnquiryDTOConsolidatedProductsSearchDTO to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(GlassRUNServiceWebAPIManageEnquiryDTOConsolidatedProductsSearchDTO other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    EnquiryId == other.EnquiryId ||
                    EnquiryId != null &&
                    EnquiryId.Equals(other.EnquiryId)
                ) && 
                (
                    EnquiryAutoNumber == other.EnquiryAutoNumber ||
                    EnquiryAutoNumber != null &&
                    EnquiryAutoNumber.Equals(other.EnquiryAutoNumber)
                ) && 
                (
                    SoldToCode == other.SoldToCode ||
                    SoldToCode != null &&
                    SoldToCode.Equals(other.SoldToCode)
                ) && 
                (
                    SoldToName == other.SoldToName ||
                    SoldToName != null &&
                    SoldToName.Equals(other.SoldToName)
                ) && 
                (
                    ShipToCode == other.ShipToCode ||
                    ShipToCode != null &&
                    ShipToCode.Equals(other.ShipToCode)
                ) && 
                (
                    ShipToName == other.ShipToName ||
                    ShipToName != null &&
                    ShipToName.Equals(other.ShipToName)
                ) && 
                (
                    ProductCode == other.ProductCode ||
                    ProductCode != null &&
                    ProductCode.Equals(other.ProductCode)
                ) && 
                (
                    ProductName == other.ProductName ||
                    ProductName != null &&
                    ProductName.Equals(other.ProductName)
                ) && 
                (
                    ProductQuantity == other.ProductQuantity ||
                    ProductQuantity != null &&
                    ProductQuantity.Equals(other.ProductQuantity)
                ) && 
                (
                    Uom == other.Uom ||
                    Uom != null &&
                    Uom.Equals(other.Uom)
                ) && 
                (
                    RequestDate == other.RequestDate ||
                    RequestDate != null &&
                    RequestDate.Equals(other.RequestDate)
                ) && 
                (
                    UnitPrice == other.UnitPrice ||
                    UnitPrice != null &&
                    UnitPrice.Equals(other.UnitPrice)
                ) && 
                (
                    TotalPrice == other.TotalPrice ||
                    TotalPrice != null &&
                    TotalPrice.Equals(other.TotalPrice)
                ) && 
                (
                    TotalEnquiriesCount == other.TotalEnquiriesCount ||
                    TotalEnquiriesCount != null &&
                    TotalEnquiriesCount.Equals(other.TotalEnquiriesCount)
                ) && 
                (
                    Stock == other.Stock ||
                    Stock != null &&
                    Stock.Equals(other.Stock)
                ) && 
                (
                    PriorityRating == other.PriorityRating ||
                    PriorityRating != null &&
                    PriorityRating.Equals(other.PriorityRating)
                ) && 
                (
                    RequestDateFrom == other.RequestDateFrom ||
                    RequestDateFrom != null &&
                    RequestDateFrom.Equals(other.RequestDateFrom)
                ) && 
                (
                    RequestDateTo == other.RequestDateTo ||
                    RequestDateTo != null &&
                    RequestDateTo.Equals(other.RequestDateTo)
                ) && 
                (
                    CompanyId == other.CompanyId ||
                    CompanyId != null &&
                    CompanyId.Equals(other.CompanyId)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (EnquiryId != null)
                    hashCode = hashCode * 59 + EnquiryId.GetHashCode();
                    if (EnquiryAutoNumber != null)
                    hashCode = hashCode * 59 + EnquiryAutoNumber.GetHashCode();
                    if (SoldToCode != null)
                    hashCode = hashCode * 59 + SoldToCode.GetHashCode();
                    if (SoldToName != null)
                    hashCode = hashCode * 59 + SoldToName.GetHashCode();
                    if (ShipToCode != null)
                    hashCode = hashCode * 59 + ShipToCode.GetHashCode();
                    if (ShipToName != null)
                    hashCode = hashCode * 59 + ShipToName.GetHashCode();
                    if (ProductCode != null)
                    hashCode = hashCode * 59 + ProductCode.GetHashCode();
                    if (ProductName != null)
                    hashCode = hashCode * 59 + ProductName.GetHashCode();
                    if (ProductQuantity != null)
                    hashCode = hashCode * 59 + ProductQuantity.GetHashCode();
                    if (Uom != null)
                    hashCode = hashCode * 59 + Uom.GetHashCode();
                    if (RequestDate != null)
                    hashCode = hashCode * 59 + RequestDate.GetHashCode();
                    if (UnitPrice != null)
                    hashCode = hashCode * 59 + UnitPrice.GetHashCode();
                    if (TotalPrice != null)
                    hashCode = hashCode * 59 + TotalPrice.GetHashCode();
                    if (TotalEnquiriesCount != null)
                    hashCode = hashCode * 59 + TotalEnquiriesCount.GetHashCode();
                    if (Stock != null)
                    hashCode = hashCode * 59 + Stock.GetHashCode();
                    if (PriorityRating != null)
                    hashCode = hashCode * 59 + PriorityRating.GetHashCode();
                    if (RequestDateFrom != null)
                    hashCode = hashCode * 59 + RequestDateFrom.GetHashCode();
                    if (RequestDateTo != null)
                    hashCode = hashCode * 59 + RequestDateTo.GetHashCode();
                    if (CompanyId != null)
                    hashCode = hashCode * 59 + CompanyId.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(GlassRUNServiceWebAPIManageEnquiryDTOConsolidatedProductsSearchDTO left, GlassRUNServiceWebAPIManageEnquiryDTOConsolidatedProductsSearchDTO right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(GlassRUNServiceWebAPIManageEnquiryDTOConsolidatedProductsSearchDTO left, GlassRUNServiceWebAPIManageEnquiryDTOConsolidatedProductsSearchDTO right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
