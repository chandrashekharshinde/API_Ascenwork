/*
 * WebAPIBuild
 *
 * This is glassRUN web api library for 3rd party and internal reference
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class GlassRUNServiceWebApiManageProductDTOProductDTO : IEquatable<GlassRUNServiceWebApiManageProductDTOProductDTO>
    { 
        /// <summary>
        /// Gets or Sets ItemId
        /// </summary>
        [DataMember(Name="itemId")]
        public long? ItemId { get; set; }

        /// <summary>
        /// Gets or Sets ItemName
        /// </summary>
        [DataMember(Name="itemName")]
        public string ItemName { get; set; }

        /// <summary>
        /// Gets or Sets ItemNameInDefaultLanguage
        /// </summary>
        [DataMember(Name="itemNameInDefaultLanguage")]
        public string ItemNameInDefaultLanguage { get; set; }

        /// <summary>
        /// Gets or Sets ItemNameEnglishLanguage
        /// </summary>
        [DataMember(Name="itemNameEnglishLanguage")]
        public string ItemNameEnglishLanguage { get; set; }

        /// <summary>
        /// Gets or Sets ItemCode
        /// </summary>
        [DataMember(Name="itemCode")]
        public string ItemCode { get; set; }

        /// <summary>
        /// Gets or Sets ItemShortCode
        /// </summary>
        [DataMember(Name="itemShortCode")]
        public string ItemShortCode { get; set; }

        /// <summary>
        /// Gets or Sets PrimaryUnitOfMeasure
        /// </summary>
        [DataMember(Name="primaryUnitOfMeasure")]
        public string PrimaryUnitOfMeasure { get; set; }

        /// <summary>
        /// Gets or Sets SecondaryUnitOfMeasure
        /// </summary>
        [DataMember(Name="secondaryUnitOfMeasure")]
        public string SecondaryUnitOfMeasure { get; set; }

        /// <summary>
        /// Gets or Sets ProductType
        /// </summary>
        [DataMember(Name="productType")]
        public string ProductType { get; set; }

        /// <summary>
        /// Gets or Sets BussinessUnit
        /// </summary>
        [DataMember(Name="bussinessUnit")]
        public string BussinessUnit { get; set; }

        /// <summary>
        /// Gets or Sets DangerGoods
        /// </summary>
        [DataMember(Name="dangerGoods")]
        public bool? DangerGoods { get; set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name="description")]
        public string Description { get; set; }

        /// <summary>
        /// Gets or Sets StockInQuantity
        /// </summary>
        [DataMember(Name="stockInQuantity")]
        public int? StockInQuantity { get; set; }

        /// <summary>
        /// Gets or Sets WeightPerUnit
        /// </summary>
        [DataMember(Name="weightPerUnit")]
        public int? WeightPerUnit { get; set; }

        /// <summary>
        /// Gets or Sets ImageUrl
        /// </summary>
        [DataMember(Name="imageUrl")]
        public string ImageUrl { get; set; }

        /// <summary>
        /// Gets or Sets PackSize
        /// </summary>
        [DataMember(Name="packSize")]
        public long? PackSize { get; set; }

        /// <summary>
        /// Gets or Sets BranchPlant
        /// </summary>
        [DataMember(Name="branchPlant")]
        public string BranchPlant { get; set; }

        /// <summary>
        /// Gets or Sets CreatedBy
        /// </summary>
        [DataMember(Name="createdBy")]
        public long? CreatedBy { get; set; }

        /// <summary>
        /// Gets or Sets CreatedDate
        /// </summary>
        [DataMember(Name="createdDate")]
        public DateTime? CreatedDate { get; set; }

        /// <summary>
        /// Gets or Sets ModifiedBy
        /// </summary>
        [DataMember(Name="modifiedBy")]
        public long? ModifiedBy { get; set; }

        /// <summary>
        /// Gets or Sets ModifiedDate
        /// </summary>
        [DataMember(Name="modifiedDate")]
        public DateTime? ModifiedDate { get; set; }

        /// <summary>
        /// Gets or Sets IsActive
        /// </summary>
        [DataMember(Name="isActive")]
        public bool? IsActive { get; set; }

        /// <summary>
        /// Gets or Sets SequenceNo
        /// </summary>
        [DataMember(Name="sequenceNo")]
        public long? SequenceNo { get; set; }

        /// <summary>
        /// Gets or Sets PricingUnit
        /// </summary>
        [DataMember(Name="pricingUnit")]
        public string PricingUnit { get; set; }

        /// <summary>
        /// Gets or Sets ShippingUnit
        /// </summary>
        [DataMember(Name="shippingUnit")]
        public string ShippingUnit { get; set; }

        /// <summary>
        /// Gets or Sets ComponentUnit
        /// </summary>
        [DataMember(Name="componentUnit")]
        public string ComponentUnit { get; set; }

        /// <summary>
        /// Gets or Sets ItemClass
        /// </summary>
        [DataMember(Name="itemClass")]
        public string ItemClass { get; set; }

        /// <summary>
        /// Gets or Sets ShelfLife
        /// </summary>
        [DataMember(Name="shelfLife")]
        public string ShelfLife { get; set; }

        /// <summary>
        /// Gets or Sets Bbd
        /// </summary>
        [DataMember(Name="bbd")]
        public string Bbd { get; set; }

        /// <summary>
        /// Gets or Sets Barcode
        /// </summary>
        [DataMember(Name="barcode")]
        public string Barcode { get; set; }

        /// <summary>
        /// Gets or Sets ItemOwner
        /// </summary>
        [DataMember(Name="itemOwner")]
        public long? ItemOwner { get; set; }

        /// <summary>
        /// Gets or Sets Field1
        /// </summary>
        [DataMember(Name="field1")]
        public string Field1 { get; set; }

        /// <summary>
        /// Gets or Sets Field2
        /// </summary>
        [DataMember(Name="field2")]
        public string Field2 { get; set; }

        /// <summary>
        /// Gets or Sets Field3
        /// </summary>
        [DataMember(Name="field3")]
        public string Field3 { get; set; }

        /// <summary>
        /// Gets or Sets Field4
        /// </summary>
        [DataMember(Name="field4")]
        public string Field4 { get; set; }

        /// <summary>
        /// Gets or Sets Field5
        /// </summary>
        [DataMember(Name="field5")]
        public string Field5 { get; set; }

        /// <summary>
        /// Gets or Sets Field6
        /// </summary>
        [DataMember(Name="field6")]
        public string Field6 { get; set; }

        /// <summary>
        /// Gets or Sets Field7
        /// </summary>
        [DataMember(Name="field7")]
        public string Field7 { get; set; }

        /// <summary>
        /// Gets or Sets Field8
        /// </summary>
        [DataMember(Name="field8")]
        public string Field8 { get; set; }

        /// <summary>
        /// Gets or Sets Field9
        /// </summary>
        [DataMember(Name="field9")]
        public string Field9 { get; set; }

        /// <summary>
        /// Gets or Sets Field10
        /// </summary>
        [DataMember(Name="field10")]
        public string Field10 { get; set; }

        /// <summary>
        /// Gets or Sets ItemType
        /// </summary>
        [DataMember(Name="itemType")]
        public string ItemType { get; set; }

        /// <summary>
        /// Gets or Sets AutomatedWareHouseUOM
        /// </summary>
        [DataMember(Name="automatedWareHouseUOM")]
        public long? AutomatedWareHouseUOM { get; set; }

        /// <summary>
        /// Gets or Sets Tax
        /// </summary>
        [DataMember(Name="tax")]
        public string Tax { get; set; }

        /// <summary>
        /// Gets or Sets Length
        /// </summary>
        [DataMember(Name="length")]
        public int? Length { get; set; }

        /// <summary>
        /// Gets or Sets Breadth
        /// </summary>
        [DataMember(Name="breadth")]
        public int? Breadth { get; set; }

        /// <summary>
        /// Gets or Sets Height
        /// </summary>
        [DataMember(Name="height")]
        public int? Height { get; set; }

        /// <summary>
        /// Gets or Sets Brand
        /// </summary>
        [DataMember(Name="brand")]
        public string Brand { get; set; }

        /// <summary>
        /// Gets or Sets OrderDate
        /// </summary>
        [DataMember(Name="orderDate")]
        public DateTime? OrderDate { get; set; }

        /// <summary>
        /// Gets or Sets Price
        /// </summary>
        [DataMember(Name="price")]
        public double? Price { get; set; }

        /// <summary>
        /// Gets or Sets NumberOfVariations
        /// </summary>
        [DataMember(Name="numberOfVariations")]
        public int? NumberOfVariations { get; set; }

        /// <summary>
        /// Gets or Sets SoldTo
        /// </summary>
        [DataMember(Name="soldTo")]
        public long? SoldTo { get; set; }

        /// <summary>
        /// Gets or Sets Uom
        /// </summary>
        [DataMember(Name="uom")]
        public string Uom { get; set; }

        /// <summary>
        /// Gets or Sets ProductList
        /// </summary>
        [DataMember(Name="productList")]
        public Collection<GlassRUNServiceWebApiManageProductDTOProductDTO> ProductList { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class GlassRUNServiceWebApiManageProductDTOProductDTO {\n");
            sb.Append("  ItemId: ").Append(ItemId).Append("\n");
            sb.Append("  ItemName: ").Append(ItemName).Append("\n");
            sb.Append("  ItemNameInDefaultLanguage: ").Append(ItemNameInDefaultLanguage).Append("\n");
            sb.Append("  ItemNameEnglishLanguage: ").Append(ItemNameEnglishLanguage).Append("\n");
            sb.Append("  ItemCode: ").Append(ItemCode).Append("\n");
            sb.Append("  ItemShortCode: ").Append(ItemShortCode).Append("\n");
            sb.Append("  PrimaryUnitOfMeasure: ").Append(PrimaryUnitOfMeasure).Append("\n");
            sb.Append("  SecondaryUnitOfMeasure: ").Append(SecondaryUnitOfMeasure).Append("\n");
            sb.Append("  ProductType: ").Append(ProductType).Append("\n");
            sb.Append("  BussinessUnit: ").Append(BussinessUnit).Append("\n");
            sb.Append("  DangerGoods: ").Append(DangerGoods).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  StockInQuantity: ").Append(StockInQuantity).Append("\n");
            sb.Append("  WeightPerUnit: ").Append(WeightPerUnit).Append("\n");
            sb.Append("  ImageUrl: ").Append(ImageUrl).Append("\n");
            sb.Append("  PackSize: ").Append(PackSize).Append("\n");
            sb.Append("  BranchPlant: ").Append(BranchPlant).Append("\n");
            sb.Append("  CreatedBy: ").Append(CreatedBy).Append("\n");
            sb.Append("  CreatedDate: ").Append(CreatedDate).Append("\n");
            sb.Append("  ModifiedBy: ").Append(ModifiedBy).Append("\n");
            sb.Append("  ModifiedDate: ").Append(ModifiedDate).Append("\n");
            sb.Append("  IsActive: ").Append(IsActive).Append("\n");
            sb.Append("  SequenceNo: ").Append(SequenceNo).Append("\n");
            sb.Append("  PricingUnit: ").Append(PricingUnit).Append("\n");
            sb.Append("  ShippingUnit: ").Append(ShippingUnit).Append("\n");
            sb.Append("  ComponentUnit: ").Append(ComponentUnit).Append("\n");
            sb.Append("  ItemClass: ").Append(ItemClass).Append("\n");
            sb.Append("  ShelfLife: ").Append(ShelfLife).Append("\n");
            sb.Append("  Bbd: ").Append(Bbd).Append("\n");
            sb.Append("  Barcode: ").Append(Barcode).Append("\n");
            sb.Append("  ItemOwner: ").Append(ItemOwner).Append("\n");
            sb.Append("  Field1: ").Append(Field1).Append("\n");
            sb.Append("  Field2: ").Append(Field2).Append("\n");
            sb.Append("  Field3: ").Append(Field3).Append("\n");
            sb.Append("  Field4: ").Append(Field4).Append("\n");
            sb.Append("  Field5: ").Append(Field5).Append("\n");
            sb.Append("  Field6: ").Append(Field6).Append("\n");
            sb.Append("  Field7: ").Append(Field7).Append("\n");
            sb.Append("  Field8: ").Append(Field8).Append("\n");
            sb.Append("  Field9: ").Append(Field9).Append("\n");
            sb.Append("  Field10: ").Append(Field10).Append("\n");
            sb.Append("  ItemType: ").Append(ItemType).Append("\n");
            sb.Append("  AutomatedWareHouseUOM: ").Append(AutomatedWareHouseUOM).Append("\n");
            sb.Append("  Tax: ").Append(Tax).Append("\n");
            sb.Append("  Length: ").Append(Length).Append("\n");
            sb.Append("  Breadth: ").Append(Breadth).Append("\n");
            sb.Append("  Height: ").Append(Height).Append("\n");
            sb.Append("  Brand: ").Append(Brand).Append("\n");
            sb.Append("  OrderDate: ").Append(OrderDate).Append("\n");
            sb.Append("  Price: ").Append(Price).Append("\n");
            sb.Append("  NumberOfVariations: ").Append(NumberOfVariations).Append("\n");
            sb.Append("  SoldTo: ").Append(SoldTo).Append("\n");
            sb.Append("  Uom: ").Append(Uom).Append("\n");
            sb.Append("  ProductList: ").Append(ProductList).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((GlassRUNServiceWebApiManageProductDTOProductDTO)obj);
        }

        /// <summary>
        /// Returns true if GlassRUNServiceWebApiManageProductDTOProductDTO instances are equal
        /// </summary>
        /// <param name="other">Instance of GlassRUNServiceWebApiManageProductDTOProductDTO to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(GlassRUNServiceWebApiManageProductDTOProductDTO other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    ItemId == other.ItemId ||
                    ItemId != null &&
                    ItemId.Equals(other.ItemId)
                ) && 
                (
                    ItemName == other.ItemName ||
                    ItemName != null &&
                    ItemName.Equals(other.ItemName)
                ) && 
                (
                    ItemNameInDefaultLanguage == other.ItemNameInDefaultLanguage ||
                    ItemNameInDefaultLanguage != null &&
                    ItemNameInDefaultLanguage.Equals(other.ItemNameInDefaultLanguage)
                ) && 
                (
                    ItemNameEnglishLanguage == other.ItemNameEnglishLanguage ||
                    ItemNameEnglishLanguage != null &&
                    ItemNameEnglishLanguage.Equals(other.ItemNameEnglishLanguage)
                ) && 
                (
                    ItemCode == other.ItemCode ||
                    ItemCode != null &&
                    ItemCode.Equals(other.ItemCode)
                ) && 
                (
                    ItemShortCode == other.ItemShortCode ||
                    ItemShortCode != null &&
                    ItemShortCode.Equals(other.ItemShortCode)
                ) && 
                (
                    PrimaryUnitOfMeasure == other.PrimaryUnitOfMeasure ||
                    PrimaryUnitOfMeasure != null &&
                    PrimaryUnitOfMeasure.Equals(other.PrimaryUnitOfMeasure)
                ) && 
                (
                    SecondaryUnitOfMeasure == other.SecondaryUnitOfMeasure ||
                    SecondaryUnitOfMeasure != null &&
                    SecondaryUnitOfMeasure.Equals(other.SecondaryUnitOfMeasure)
                ) && 
                (
                    ProductType == other.ProductType ||
                    ProductType != null &&
                    ProductType.Equals(other.ProductType)
                ) && 
                (
                    BussinessUnit == other.BussinessUnit ||
                    BussinessUnit != null &&
                    BussinessUnit.Equals(other.BussinessUnit)
                ) && 
                (
                    DangerGoods == other.DangerGoods ||
                    DangerGoods != null &&
                    DangerGoods.Equals(other.DangerGoods)
                ) && 
                (
                    Description == other.Description ||
                    Description != null &&
                    Description.Equals(other.Description)
                ) && 
                (
                    StockInQuantity == other.StockInQuantity ||
                    StockInQuantity != null &&
                    StockInQuantity.Equals(other.StockInQuantity)
                ) && 
                (
                    WeightPerUnit == other.WeightPerUnit ||
                    WeightPerUnit != null &&
                    WeightPerUnit.Equals(other.WeightPerUnit)
                ) && 
                (
                    ImageUrl == other.ImageUrl ||
                    ImageUrl != null &&
                    ImageUrl.Equals(other.ImageUrl)
                ) && 
                (
                    PackSize == other.PackSize ||
                    PackSize != null &&
                    PackSize.Equals(other.PackSize)
                ) && 
                (
                    BranchPlant == other.BranchPlant ||
                    BranchPlant != null &&
                    BranchPlant.Equals(other.BranchPlant)
                ) && 
                (
                    CreatedBy == other.CreatedBy ||
                    CreatedBy != null &&
                    CreatedBy.Equals(other.CreatedBy)
                ) && 
                (
                    CreatedDate == other.CreatedDate ||
                    CreatedDate != null &&
                    CreatedDate.Equals(other.CreatedDate)
                ) && 
                (
                    ModifiedBy == other.ModifiedBy ||
                    ModifiedBy != null &&
                    ModifiedBy.Equals(other.ModifiedBy)
                ) && 
                (
                    ModifiedDate == other.ModifiedDate ||
                    ModifiedDate != null &&
                    ModifiedDate.Equals(other.ModifiedDate)
                ) && 
                (
                    IsActive == other.IsActive ||
                    IsActive != null &&
                    IsActive.Equals(other.IsActive)
                ) && 
                (
                    SequenceNo == other.SequenceNo ||
                    SequenceNo != null &&
                    SequenceNo.Equals(other.SequenceNo)
                ) && 
                (
                    PricingUnit == other.PricingUnit ||
                    PricingUnit != null &&
                    PricingUnit.Equals(other.PricingUnit)
                ) && 
                (
                    ShippingUnit == other.ShippingUnit ||
                    ShippingUnit != null &&
                    ShippingUnit.Equals(other.ShippingUnit)
                ) && 
                (
                    ComponentUnit == other.ComponentUnit ||
                    ComponentUnit != null &&
                    ComponentUnit.Equals(other.ComponentUnit)
                ) && 
                (
                    ItemClass == other.ItemClass ||
                    ItemClass != null &&
                    ItemClass.Equals(other.ItemClass)
                ) && 
                (
                    ShelfLife == other.ShelfLife ||
                    ShelfLife != null &&
                    ShelfLife.Equals(other.ShelfLife)
                ) && 
                (
                    Bbd == other.Bbd ||
                    Bbd != null &&
                    Bbd.Equals(other.Bbd)
                ) && 
                (
                    Barcode == other.Barcode ||
                    Barcode != null &&
                    Barcode.Equals(other.Barcode)
                ) && 
                (
                    ItemOwner == other.ItemOwner ||
                    ItemOwner != null &&
                    ItemOwner.Equals(other.ItemOwner)
                ) && 
                (
                    Field1 == other.Field1 ||
                    Field1 != null &&
                    Field1.Equals(other.Field1)
                ) && 
                (
                    Field2 == other.Field2 ||
                    Field2 != null &&
                    Field2.Equals(other.Field2)
                ) && 
                (
                    Field3 == other.Field3 ||
                    Field3 != null &&
                    Field3.Equals(other.Field3)
                ) && 
                (
                    Field4 == other.Field4 ||
                    Field4 != null &&
                    Field4.Equals(other.Field4)
                ) && 
                (
                    Field5 == other.Field5 ||
                    Field5 != null &&
                    Field5.Equals(other.Field5)
                ) && 
                (
                    Field6 == other.Field6 ||
                    Field6 != null &&
                    Field6.Equals(other.Field6)
                ) && 
                (
                    Field7 == other.Field7 ||
                    Field7 != null &&
                    Field7.Equals(other.Field7)
                ) && 
                (
                    Field8 == other.Field8 ||
                    Field8 != null &&
                    Field8.Equals(other.Field8)
                ) && 
                (
                    Field9 == other.Field9 ||
                    Field9 != null &&
                    Field9.Equals(other.Field9)
                ) && 
                (
                    Field10 == other.Field10 ||
                    Field10 != null &&
                    Field10.Equals(other.Field10)
                ) && 
                (
                    ItemType == other.ItemType ||
                    ItemType != null &&
                    ItemType.Equals(other.ItemType)
                ) && 
                (
                    AutomatedWareHouseUOM == other.AutomatedWareHouseUOM ||
                    AutomatedWareHouseUOM != null &&
                    AutomatedWareHouseUOM.Equals(other.AutomatedWareHouseUOM)
                ) && 
                (
                    Tax == other.Tax ||
                    Tax != null &&
                    Tax.Equals(other.Tax)
                ) && 
                (
                    Length == other.Length ||
                    Length != null &&
                    Length.Equals(other.Length)
                ) && 
                (
                    Breadth == other.Breadth ||
                    Breadth != null &&
                    Breadth.Equals(other.Breadth)
                ) && 
                (
                    Height == other.Height ||
                    Height != null &&
                    Height.Equals(other.Height)
                ) && 
                (
                    Brand == other.Brand ||
                    Brand != null &&
                    Brand.Equals(other.Brand)
                ) && 
                (
                    OrderDate == other.OrderDate ||
                    OrderDate != null &&
                    OrderDate.Equals(other.OrderDate)
                ) && 
                (
                    Price == other.Price ||
                    Price != null &&
                    Price.Equals(other.Price)
                ) && 
                (
                    NumberOfVariations == other.NumberOfVariations ||
                    NumberOfVariations != null &&
                    NumberOfVariations.Equals(other.NumberOfVariations)
                ) && 
                (
                    SoldTo == other.SoldTo ||
                    SoldTo != null &&
                    SoldTo.Equals(other.SoldTo)
                ) && 
                (
                    Uom == other.Uom ||
                    Uom != null &&
                    Uom.Equals(other.Uom)
                ) && 
                (
                    ProductList == other.ProductList ||
                    ProductList != null &&
                    ProductList.SequenceEqual(other.ProductList)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (ItemId != null)
                    hashCode = hashCode * 59 + ItemId.GetHashCode();
                    if (ItemName != null)
                    hashCode = hashCode * 59 + ItemName.GetHashCode();
                    if (ItemNameInDefaultLanguage != null)
                    hashCode = hashCode * 59 + ItemNameInDefaultLanguage.GetHashCode();
                    if (ItemNameEnglishLanguage != null)
                    hashCode = hashCode * 59 + ItemNameEnglishLanguage.GetHashCode();
                    if (ItemCode != null)
                    hashCode = hashCode * 59 + ItemCode.GetHashCode();
                    if (ItemShortCode != null)
                    hashCode = hashCode * 59 + ItemShortCode.GetHashCode();
                    if (PrimaryUnitOfMeasure != null)
                    hashCode = hashCode * 59 + PrimaryUnitOfMeasure.GetHashCode();
                    if (SecondaryUnitOfMeasure != null)
                    hashCode = hashCode * 59 + SecondaryUnitOfMeasure.GetHashCode();
                    if (ProductType != null)
                    hashCode = hashCode * 59 + ProductType.GetHashCode();
                    if (BussinessUnit != null)
                    hashCode = hashCode * 59 + BussinessUnit.GetHashCode();
                    if (DangerGoods != null)
                    hashCode = hashCode * 59 + DangerGoods.GetHashCode();
                    if (Description != null)
                    hashCode = hashCode * 59 + Description.GetHashCode();
                    if (StockInQuantity != null)
                    hashCode = hashCode * 59 + StockInQuantity.GetHashCode();
                    if (WeightPerUnit != null)
                    hashCode = hashCode * 59 + WeightPerUnit.GetHashCode();
                    if (ImageUrl != null)
                    hashCode = hashCode * 59 + ImageUrl.GetHashCode();
                    if (PackSize != null)
                    hashCode = hashCode * 59 + PackSize.GetHashCode();
                    if (BranchPlant != null)
                    hashCode = hashCode * 59 + BranchPlant.GetHashCode();
                    if (CreatedBy != null)
                    hashCode = hashCode * 59 + CreatedBy.GetHashCode();
                    if (CreatedDate != null)
                    hashCode = hashCode * 59 + CreatedDate.GetHashCode();
                    if (ModifiedBy != null)
                    hashCode = hashCode * 59 + ModifiedBy.GetHashCode();
                    if (ModifiedDate != null)
                    hashCode = hashCode * 59 + ModifiedDate.GetHashCode();
                    if (IsActive != null)
                    hashCode = hashCode * 59 + IsActive.GetHashCode();
                    if (SequenceNo != null)
                    hashCode = hashCode * 59 + SequenceNo.GetHashCode();
                    if (PricingUnit != null)
                    hashCode = hashCode * 59 + PricingUnit.GetHashCode();
                    if (ShippingUnit != null)
                    hashCode = hashCode * 59 + ShippingUnit.GetHashCode();
                    if (ComponentUnit != null)
                    hashCode = hashCode * 59 + ComponentUnit.GetHashCode();
                    if (ItemClass != null)
                    hashCode = hashCode * 59 + ItemClass.GetHashCode();
                    if (ShelfLife != null)
                    hashCode = hashCode * 59 + ShelfLife.GetHashCode();
                    if (Bbd != null)
                    hashCode = hashCode * 59 + Bbd.GetHashCode();
                    if (Barcode != null)
                    hashCode = hashCode * 59 + Barcode.GetHashCode();
                    if (ItemOwner != null)
                    hashCode = hashCode * 59 + ItemOwner.GetHashCode();
                    if (Field1 != null)
                    hashCode = hashCode * 59 + Field1.GetHashCode();
                    if (Field2 != null)
                    hashCode = hashCode * 59 + Field2.GetHashCode();
                    if (Field3 != null)
                    hashCode = hashCode * 59 + Field3.GetHashCode();
                    if (Field4 != null)
                    hashCode = hashCode * 59 + Field4.GetHashCode();
                    if (Field5 != null)
                    hashCode = hashCode * 59 + Field5.GetHashCode();
                    if (Field6 != null)
                    hashCode = hashCode * 59 + Field6.GetHashCode();
                    if (Field7 != null)
                    hashCode = hashCode * 59 + Field7.GetHashCode();
                    if (Field8 != null)
                    hashCode = hashCode * 59 + Field8.GetHashCode();
                    if (Field9 != null)
                    hashCode = hashCode * 59 + Field9.GetHashCode();
                    if (Field10 != null)
                    hashCode = hashCode * 59 + Field10.GetHashCode();
                    if (ItemType != null)
                    hashCode = hashCode * 59 + ItemType.GetHashCode();
                    if (AutomatedWareHouseUOM != null)
                    hashCode = hashCode * 59 + AutomatedWareHouseUOM.GetHashCode();
                    if (Tax != null)
                    hashCode = hashCode * 59 + Tax.GetHashCode();
                    if (Length != null)
                    hashCode = hashCode * 59 + Length.GetHashCode();
                    if (Breadth != null)
                    hashCode = hashCode * 59 + Breadth.GetHashCode();
                    if (Height != null)
                    hashCode = hashCode * 59 + Height.GetHashCode();
                    if (Brand != null)
                    hashCode = hashCode * 59 + Brand.GetHashCode();
                    if (OrderDate != null)
                    hashCode = hashCode * 59 + OrderDate.GetHashCode();
                    if (Price != null)
                    hashCode = hashCode * 59 + Price.GetHashCode();
                    if (NumberOfVariations != null)
                    hashCode = hashCode * 59 + NumberOfVariations.GetHashCode();
                    if (SoldTo != null)
                    hashCode = hashCode * 59 + SoldTo.GetHashCode();
                    if (Uom != null)
                    hashCode = hashCode * 59 + Uom.GetHashCode();
                    if (ProductList != null)
                    hashCode = hashCode * 59 + ProductList.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(GlassRUNServiceWebApiManageProductDTOProductDTO left, GlassRUNServiceWebApiManageProductDTOProductDTO right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(GlassRUNServiceWebApiManageProductDTOProductDTO left, GlassRUNServiceWebApiManageProductDTOProductDTO right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
