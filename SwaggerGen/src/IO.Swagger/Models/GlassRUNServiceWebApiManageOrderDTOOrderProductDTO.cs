/*
 * WebAPIBuild
 *
 * This is glassRUN web api library for 3rd party and internal reference
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class GlassRUNServiceWebApiManageOrderDTOOrderProductDTO : IEquatable<GlassRUNServiceWebApiManageOrderDTOOrderProductDTO>
    { 
        /// <summary>
        /// Gets or Sets AssociatedOrder
        /// </summary>
        [DataMember(Name="associatedOrder")]
        public string AssociatedOrder { get; set; }

        /// <summary>
        /// Gets or Sets AssociatedOrderNumber
        /// </summary>
        [DataMember(Name="associatedOrderNumber")]
        public string AssociatedOrderNumber { get; set; }

        /// <summary>
        /// Gets or Sets BackOrderQuantity
        /// </summary>
        [DataMember(Name="backOrderQuantity")]
        public double? BackOrderQuantity { get; set; }

        /// <summary>
        /// Gets or Sets CancelledQuantity
        /// </summary>
        [DataMember(Name="cancelledQuantity")]
        public double? CancelledQuantity { get; set; }

        /// <summary>
        /// Gets or Sets CollectedQuantity
        /// </summary>
        [DataMember(Name="collectedQuantity")]
        public double? CollectedQuantity { get; set; }

        /// <summary>
        /// Gets or Sets CompanyCode
        /// </summary>
        [DataMember(Name="companyCode")]
        public string CompanyCode { get; set; }

        /// <summary>
        /// Gets or Sets CompanyId
        /// </summary>
        [DataMember(Name="companyId")]
        public long? CompanyId { get; set; }

        /// <summary>
        /// Gets or Sets CreatedBy
        /// </summary>
        [DataMember(Name="createdBy")]
        public long? CreatedBy { get; set; }

        /// <summary>
        /// Gets or Sets CreatedDate
        /// </summary>
        [DataMember(Name="createdDate")]
        public DateTime? CreatedDate { get; set; }

        /// <summary>
        /// Gets or Sets DeliveredQuantity
        /// </summary>
        [DataMember(Name="deliveredQuantity")]
        public double? DeliveredQuantity { get; set; }

        /// <summary>
        /// Gets or Sets DepositeAmount
        /// </summary>
        [DataMember(Name="depositeAmount")]
        public double? DepositeAmount { get; set; }

        /// <summary>
        /// Gets or Sets DiscountAmount
        /// </summary>
        [DataMember(Name="discountAmount")]
        public double? DiscountAmount { get; set; }

        /// <summary>
        /// Gets or Sets DiscountPercent
        /// </summary>
        [DataMember(Name="discountPercent")]
        public double? DiscountPercent { get; set; }

        /// <summary>
        /// Gets or Sets EffectiveDate
        /// </summary>
        [DataMember(Name="effectiveDate")]
        public DateTime? EffectiveDate { get; set; }

        /// <summary>
        /// Gets or Sets Field1
        /// </summary>
        [DataMember(Name="field1")]
        public string Field1 { get; set; }

        /// <summary>
        /// Gets or Sets Field10
        /// </summary>
        [DataMember(Name="field10")]
        public string Field10 { get; set; }

        /// <summary>
        /// Gets or Sets Field2
        /// </summary>
        [DataMember(Name="field2")]
        public string Field2 { get; set; }

        /// <summary>
        /// Gets or Sets Field3
        /// </summary>
        [DataMember(Name="field3")]
        public string Field3 { get; set; }

        /// <summary>
        /// Gets or Sets Field4
        /// </summary>
        [DataMember(Name="field4")]
        public string Field4 { get; set; }

        /// <summary>
        /// Gets or Sets Field5
        /// </summary>
        [DataMember(Name="field5")]
        public string Field5 { get; set; }

        /// <summary>
        /// Gets or Sets Field6
        /// </summary>
        [DataMember(Name="field6")]
        public string Field6 { get; set; }

        /// <summary>
        /// Gets or Sets Field7
        /// </summary>
        [DataMember(Name="field7")]
        public string Field7 { get; set; }

        /// <summary>
        /// Gets or Sets Field8
        /// </summary>
        [DataMember(Name="field8")]
        public string Field8 { get; set; }

        /// <summary>
        /// Gets or Sets Field9
        /// </summary>
        [DataMember(Name="field9")]
        public string Field9 { get; set; }

        /// <summary>
        /// Gets or Sets InvoiceNumber
        /// </summary>
        [DataMember(Name="invoiceNumber")]
        public string InvoiceNumber { get; set; }

        /// <summary>
        /// Gets or Sets IsActive
        /// </summary>
        [DataMember(Name="isActive")]
        public bool? IsActive { get; set; }

        /// <summary>
        /// Gets or Sets IsGRN
        /// </summary>
        [DataMember(Name="isGRN")]
        public bool? IsGRN { get; set; }

        /// <summary>
        /// Gets or Sets IsPackingItem
        /// </summary>
        [DataMember(Name="isPackingItem")]
        public bool? IsPackingItem { get; set; }

        /// <summary>
        /// Gets or Sets IsProductShipConfirmed
        /// </summary>
        [DataMember(Name="isProductShipConfirmed")]
        public bool? IsProductShipConfirmed { get; set; }

        /// <summary>
        /// Gets or Sets IsReplaceable
        /// </summary>
        [DataMember(Name="isReplaceable")]
        public bool? IsReplaceable { get; set; }

        /// <summary>
        /// Gets or Sets ItemType
        /// </summary>
        [DataMember(Name="itemType")]
        public long? ItemType { get; set; }

        /// <summary>
        /// Gets or Sets ItemTypeText
        /// </summary>
        [DataMember(Name="itemTypeText")]
        public string ItemTypeText { get; set; }

        /// <summary>
        /// Gets or Sets LastStatus
        /// </summary>
        [DataMember(Name="lastStatus")]
        public long? LastStatus { get; set; }

        /// <summary>
        /// Gets or Sets LineNumber
        /// </summary>
        [DataMember(Name="lineNumber")]
        public long? LineNumber { get; set; }

        /// <summary>
        /// Gets or Sets LotNumber
        /// </summary>
        [DataMember(Name="lotNumber")]
        public string LotNumber { get; set; }

        /// <summary>
        /// Gets or Sets ModifiedBy
        /// </summary>
        [DataMember(Name="modifiedBy")]
        public long? ModifiedBy { get; set; }

        /// <summary>
        /// Gets or Sets ModifiedDate
        /// </summary>
        [DataMember(Name="modifiedDate")]
        public DateTime? ModifiedDate { get; set; }

        /// <summary>
        /// Gets or Sets NextStatus
        /// </summary>
        [DataMember(Name="nextStatus")]
        public long? NextStatus { get; set; }

        /// <summary>
        /// Gets or Sets OrderId
        /// </summary>
        [DataMember(Name="orderId")]
        public long? OrderId { get; set; }

        /// <summary>
        /// Gets or Sets OrderNumber
        /// </summary>
        [DataMember(Name="orderNumber")]
        public string OrderNumber { get; set; }

        /// <summary>
        /// Gets or Sets OrderProductGuid
        /// </summary>
        [DataMember(Name="orderProductGuid")]
        public string OrderProductGuid { get; set; }

        /// <summary>
        /// Gets or Sets OrderProductId
        /// </summary>
        [DataMember(Name="orderProductId")]
        public long? OrderProductId { get; set; }

        /// <summary>
        /// Gets or Sets PackingItemCode
        /// </summary>
        [DataMember(Name="packingItemCode")]
        public string PackingItemCode { get; set; }

        /// <summary>
        /// Gets or Sets PackingItemCount
        /// </summary>
        [DataMember(Name="packingItemCount")]
        public double? PackingItemCount { get; set; }

        /// <summary>
        /// Gets or Sets PalletNumber
        /// </summary>
        [DataMember(Name="palletNumber")]
        public string PalletNumber { get; set; }

        /// <summary>
        /// Gets or Sets ParentProductCode
        /// </summary>
        [DataMember(Name="parentProductCode")]
        public string ParentProductCode { get; set; }

        /// <summary>
        /// Gets or Sets ProductCode
        /// </summary>
        [DataMember(Name="productCode")]
        public string ProductCode { get; set; }

        /// <summary>
        /// Gets or Sets ProductName
        /// </summary>
        [DataMember(Name="productName")]
        public string ProductName { get; set; }

        /// <summary>
        /// Gets or Sets ItemNameInDefaultLanguage
        /// </summary>
        [DataMember(Name="itemNameInDefaultLanguage")]
        public string ItemNameInDefaultLanguage { get; set; }

        /// <summary>
        /// Gets or Sets Brand
        /// </summary>
        [DataMember(Name="brand")]
        public string Brand { get; set; }

        /// <summary>
        /// Gets or Sets ProductQuantity
        /// </summary>
        [DataMember(Name="productQuantity")]
        public double? ProductQuantity { get; set; }

        /// <summary>
        /// Gets or Sets ProductType
        /// </summary>
        [DataMember(Name="productType")]
        public string ProductType { get; set; }

        /// <summary>
        /// Gets or Sets ReferenceOrderId
        /// </summary>
        [DataMember(Name="referenceOrderId")]
        public long? ReferenceOrderId { get; set; }

        /// <summary>
        /// Gets or Sets ReferenceOrderProductId
        /// </summary>
        [DataMember(Name="referenceOrderProductId")]
        public long? ReferenceOrderProductId { get; set; }

        /// <summary>
        /// Gets or Sets Remarks
        /// </summary>
        [DataMember(Name="remarks")]
        public string Remarks { get; set; }

        /// <summary>
        /// Gets or Sets ReplacementParentProductId
        /// </summary>
        [DataMember(Name="replacementParentProductId")]
        public long? ReplacementParentProductId { get; set; }

        /// <summary>
        /// Gets or Sets ReturnQuantity
        /// </summary>
        [DataMember(Name="returnQuantity")]
        public double? ReturnQuantity { get; set; }

        /// <summary>
        /// Gets or Sets ShippableQuantity
        /// </summary>
        [DataMember(Name="shippableQuantity")]
        public double? ShippableQuantity { get; set; }

        /// <summary>
        /// Gets or Sets SignalValue
        /// </summary>
        [DataMember(Name="signalValue")]
        public long? SignalValue { get; set; }

        /// <summary>
        /// Gets or Sets StockLocationCode
        /// </summary>
        [DataMember(Name="stockLocationCode")]
        public string StockLocationCode { get; set; }

        /// <summary>
        /// Gets or Sets StockLocationName
        /// </summary>
        [DataMember(Name="stockLocationName")]
        public string StockLocationName { get; set; }

        /// <summary>
        /// Gets or Sets TotalUnitPrice
        /// </summary>
        [DataMember(Name="totalUnitPrice")]
        public double? TotalUnitPrice { get; set; }

        /// <summary>
        /// Gets or Sets TotalVolume
        /// </summary>
        [DataMember(Name="totalVolume")]
        public double? TotalVolume { get; set; }

        /// <summary>
        /// Gets or Sets TotalValue
        /// </summary>
        [DataMember(Name="totalValue")]
        public double? TotalValue { get; set; }

        /// <summary>
        /// Gets or Sets TotalWeight
        /// </summary>
        [DataMember(Name="totalWeight")]
        public double? TotalWeight { get; set; }

        /// <summary>
        /// Gets or Sets UnitPrice
        /// </summary>
        [DataMember(Name="unitPrice")]
        public double? UnitPrice { get; set; }

        /// <summary>
        /// Gets or Sets Uom
        /// </summary>
        [DataMember(Name="uom")]
        public string Uom { get; set; }

        /// <summary>
        /// Gets or Sets NumberOfPromotions
        /// </summary>
        [DataMember(Name="numberOfPromotions")]
        public long? NumberOfPromotions { get; set; }

        /// <summary>
        /// Gets or Sets AdditionalQuantity
        /// </summary>
        [DataMember(Name="additionalQuantity")]
        public double? AdditionalQuantity { get; set; }

        /// <summary>
        /// Gets or Sets AvailableNumberOfPromotions
        /// </summary>
        [DataMember(Name="availableNumberOfPromotions")]
        public long? AvailableNumberOfPromotions { get; set; }

        /// <summary>
        /// Gets or Sets AvailableAdditionalQuantity
        /// </summary>
        [DataMember(Name="availableAdditionalQuantity")]
        public double? AvailableAdditionalQuantity { get; set; }

        /// <summary>
        /// Gets or Sets PromotionRefId
        /// </summary>
        [DataMember(Name="promotionRefId")]
        public string PromotionRefId { get; set; }

        /// <summary>
        /// Gets or Sets ImageUrl
        /// </summary>
        [DataMember(Name="imageUrl")]
        public string ImageUrl { get; set; }

        /// <summary>
        /// Gets or Sets OrderFeedbackList
        /// </summary>
        [DataMember(Name="orderFeedbackList")]
        public Collection<GlassRUNServiceWebApiManageOrderDTOOrderFeedbackDTO> OrderFeedbackList { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class GlassRUNServiceWebApiManageOrderDTOOrderProductDTO {\n");
            sb.Append("  AssociatedOrder: ").Append(AssociatedOrder).Append("\n");
            sb.Append("  AssociatedOrderNumber: ").Append(AssociatedOrderNumber).Append("\n");
            sb.Append("  BackOrderQuantity: ").Append(BackOrderQuantity).Append("\n");
            sb.Append("  CancelledQuantity: ").Append(CancelledQuantity).Append("\n");
            sb.Append("  CollectedQuantity: ").Append(CollectedQuantity).Append("\n");
            sb.Append("  CompanyCode: ").Append(CompanyCode).Append("\n");
            sb.Append("  CompanyId: ").Append(CompanyId).Append("\n");
            sb.Append("  CreatedBy: ").Append(CreatedBy).Append("\n");
            sb.Append("  CreatedDate: ").Append(CreatedDate).Append("\n");
            sb.Append("  DeliveredQuantity: ").Append(DeliveredQuantity).Append("\n");
            sb.Append("  DepositeAmount: ").Append(DepositeAmount).Append("\n");
            sb.Append("  DiscountAmount: ").Append(DiscountAmount).Append("\n");
            sb.Append("  DiscountPercent: ").Append(DiscountPercent).Append("\n");
            sb.Append("  EffectiveDate: ").Append(EffectiveDate).Append("\n");
            sb.Append("  Field1: ").Append(Field1).Append("\n");
            sb.Append("  Field10: ").Append(Field10).Append("\n");
            sb.Append("  Field2: ").Append(Field2).Append("\n");
            sb.Append("  Field3: ").Append(Field3).Append("\n");
            sb.Append("  Field4: ").Append(Field4).Append("\n");
            sb.Append("  Field5: ").Append(Field5).Append("\n");
            sb.Append("  Field6: ").Append(Field6).Append("\n");
            sb.Append("  Field7: ").Append(Field7).Append("\n");
            sb.Append("  Field8: ").Append(Field8).Append("\n");
            sb.Append("  Field9: ").Append(Field9).Append("\n");
            sb.Append("  InvoiceNumber: ").Append(InvoiceNumber).Append("\n");
            sb.Append("  IsActive: ").Append(IsActive).Append("\n");
            sb.Append("  IsGRN: ").Append(IsGRN).Append("\n");
            sb.Append("  IsPackingItem: ").Append(IsPackingItem).Append("\n");
            sb.Append("  IsProductShipConfirmed: ").Append(IsProductShipConfirmed).Append("\n");
            sb.Append("  IsReplaceable: ").Append(IsReplaceable).Append("\n");
            sb.Append("  ItemType: ").Append(ItemType).Append("\n");
            sb.Append("  ItemTypeText: ").Append(ItemTypeText).Append("\n");
            sb.Append("  LastStatus: ").Append(LastStatus).Append("\n");
            sb.Append("  LineNumber: ").Append(LineNumber).Append("\n");
            sb.Append("  LotNumber: ").Append(LotNumber).Append("\n");
            sb.Append("  ModifiedBy: ").Append(ModifiedBy).Append("\n");
            sb.Append("  ModifiedDate: ").Append(ModifiedDate).Append("\n");
            sb.Append("  NextStatus: ").Append(NextStatus).Append("\n");
            sb.Append("  OrderId: ").Append(OrderId).Append("\n");
            sb.Append("  OrderNumber: ").Append(OrderNumber).Append("\n");
            sb.Append("  OrderProductGuid: ").Append(OrderProductGuid).Append("\n");
            sb.Append("  OrderProductId: ").Append(OrderProductId).Append("\n");
            sb.Append("  PackingItemCode: ").Append(PackingItemCode).Append("\n");
            sb.Append("  PackingItemCount: ").Append(PackingItemCount).Append("\n");
            sb.Append("  PalletNumber: ").Append(PalletNumber).Append("\n");
            sb.Append("  ParentProductCode: ").Append(ParentProductCode).Append("\n");
            sb.Append("  ProductCode: ").Append(ProductCode).Append("\n");
            sb.Append("  ProductName: ").Append(ProductName).Append("\n");
            sb.Append("  ItemNameInDefaultLanguage: ").Append(ItemNameInDefaultLanguage).Append("\n");
            sb.Append("  Brand: ").Append(Brand).Append("\n");
            sb.Append("  ProductQuantity: ").Append(ProductQuantity).Append("\n");
            sb.Append("  ProductType: ").Append(ProductType).Append("\n");
            sb.Append("  ReferenceOrderId: ").Append(ReferenceOrderId).Append("\n");
            sb.Append("  ReferenceOrderProductId: ").Append(ReferenceOrderProductId).Append("\n");
            sb.Append("  Remarks: ").Append(Remarks).Append("\n");
            sb.Append("  ReplacementParentProductId: ").Append(ReplacementParentProductId).Append("\n");
            sb.Append("  ReturnQuantity: ").Append(ReturnQuantity).Append("\n");
            sb.Append("  ShippableQuantity: ").Append(ShippableQuantity).Append("\n");
            sb.Append("  SignalValue: ").Append(SignalValue).Append("\n");
            sb.Append("  StockLocationCode: ").Append(StockLocationCode).Append("\n");
            sb.Append("  StockLocationName: ").Append(StockLocationName).Append("\n");
            sb.Append("  TotalUnitPrice: ").Append(TotalUnitPrice).Append("\n");
            sb.Append("  TotalVolume: ").Append(TotalVolume).Append("\n");
            sb.Append("  TotalValue: ").Append(TotalValue).Append("\n");
            sb.Append("  TotalWeight: ").Append(TotalWeight).Append("\n");
            sb.Append("  UnitPrice: ").Append(UnitPrice).Append("\n");
            sb.Append("  Uom: ").Append(Uom).Append("\n");
            sb.Append("  NumberOfPromotions: ").Append(NumberOfPromotions).Append("\n");
            sb.Append("  AdditionalQuantity: ").Append(AdditionalQuantity).Append("\n");
            sb.Append("  AvailableNumberOfPromotions: ").Append(AvailableNumberOfPromotions).Append("\n");
            sb.Append("  AvailableAdditionalQuantity: ").Append(AvailableAdditionalQuantity).Append("\n");
            sb.Append("  PromotionRefId: ").Append(PromotionRefId).Append("\n");
            sb.Append("  ImageUrl: ").Append(ImageUrl).Append("\n");
            sb.Append("  OrderFeedbackList: ").Append(OrderFeedbackList).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((GlassRUNServiceWebApiManageOrderDTOOrderProductDTO)obj);
        }

        /// <summary>
        /// Returns true if GlassRUNServiceWebApiManageOrderDTOOrderProductDTO instances are equal
        /// </summary>
        /// <param name="other">Instance of GlassRUNServiceWebApiManageOrderDTOOrderProductDTO to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(GlassRUNServiceWebApiManageOrderDTOOrderProductDTO other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    AssociatedOrder == other.AssociatedOrder ||
                    AssociatedOrder != null &&
                    AssociatedOrder.Equals(other.AssociatedOrder)
                ) && 
                (
                    AssociatedOrderNumber == other.AssociatedOrderNumber ||
                    AssociatedOrderNumber != null &&
                    AssociatedOrderNumber.Equals(other.AssociatedOrderNumber)
                ) && 
                (
                    BackOrderQuantity == other.BackOrderQuantity ||
                    BackOrderQuantity != null &&
                    BackOrderQuantity.Equals(other.BackOrderQuantity)
                ) && 
                (
                    CancelledQuantity == other.CancelledQuantity ||
                    CancelledQuantity != null &&
                    CancelledQuantity.Equals(other.CancelledQuantity)
                ) && 
                (
                    CollectedQuantity == other.CollectedQuantity ||
                    CollectedQuantity != null &&
                    CollectedQuantity.Equals(other.CollectedQuantity)
                ) && 
                (
                    CompanyCode == other.CompanyCode ||
                    CompanyCode != null &&
                    CompanyCode.Equals(other.CompanyCode)
                ) && 
                (
                    CompanyId == other.CompanyId ||
                    CompanyId != null &&
                    CompanyId.Equals(other.CompanyId)
                ) && 
                (
                    CreatedBy == other.CreatedBy ||
                    CreatedBy != null &&
                    CreatedBy.Equals(other.CreatedBy)
                ) && 
                (
                    CreatedDate == other.CreatedDate ||
                    CreatedDate != null &&
                    CreatedDate.Equals(other.CreatedDate)
                ) && 
                (
                    DeliveredQuantity == other.DeliveredQuantity ||
                    DeliveredQuantity != null &&
                    DeliveredQuantity.Equals(other.DeliveredQuantity)
                ) && 
                (
                    DepositeAmount == other.DepositeAmount ||
                    DepositeAmount != null &&
                    DepositeAmount.Equals(other.DepositeAmount)
                ) && 
                (
                    DiscountAmount == other.DiscountAmount ||
                    DiscountAmount != null &&
                    DiscountAmount.Equals(other.DiscountAmount)
                ) && 
                (
                    DiscountPercent == other.DiscountPercent ||
                    DiscountPercent != null &&
                    DiscountPercent.Equals(other.DiscountPercent)
                ) && 
                (
                    EffectiveDate == other.EffectiveDate ||
                    EffectiveDate != null &&
                    EffectiveDate.Equals(other.EffectiveDate)
                ) && 
                (
                    Field1 == other.Field1 ||
                    Field1 != null &&
                    Field1.Equals(other.Field1)
                ) && 
                (
                    Field10 == other.Field10 ||
                    Field10 != null &&
                    Field10.Equals(other.Field10)
                ) && 
                (
                    Field2 == other.Field2 ||
                    Field2 != null &&
                    Field2.Equals(other.Field2)
                ) && 
                (
                    Field3 == other.Field3 ||
                    Field3 != null &&
                    Field3.Equals(other.Field3)
                ) && 
                (
                    Field4 == other.Field4 ||
                    Field4 != null &&
                    Field4.Equals(other.Field4)
                ) && 
                (
                    Field5 == other.Field5 ||
                    Field5 != null &&
                    Field5.Equals(other.Field5)
                ) && 
                (
                    Field6 == other.Field6 ||
                    Field6 != null &&
                    Field6.Equals(other.Field6)
                ) && 
                (
                    Field7 == other.Field7 ||
                    Field7 != null &&
                    Field7.Equals(other.Field7)
                ) && 
                (
                    Field8 == other.Field8 ||
                    Field8 != null &&
                    Field8.Equals(other.Field8)
                ) && 
                (
                    Field9 == other.Field9 ||
                    Field9 != null &&
                    Field9.Equals(other.Field9)
                ) && 
                (
                    InvoiceNumber == other.InvoiceNumber ||
                    InvoiceNumber != null &&
                    InvoiceNumber.Equals(other.InvoiceNumber)
                ) && 
                (
                    IsActive == other.IsActive ||
                    IsActive != null &&
                    IsActive.Equals(other.IsActive)
                ) && 
                (
                    IsGRN == other.IsGRN ||
                    IsGRN != null &&
                    IsGRN.Equals(other.IsGRN)
                ) && 
                (
                    IsPackingItem == other.IsPackingItem ||
                    IsPackingItem != null &&
                    IsPackingItem.Equals(other.IsPackingItem)
                ) && 
                (
                    IsProductShipConfirmed == other.IsProductShipConfirmed ||
                    IsProductShipConfirmed != null &&
                    IsProductShipConfirmed.Equals(other.IsProductShipConfirmed)
                ) && 
                (
                    IsReplaceable == other.IsReplaceable ||
                    IsReplaceable != null &&
                    IsReplaceable.Equals(other.IsReplaceable)
                ) && 
                (
                    ItemType == other.ItemType ||
                    ItemType != null &&
                    ItemType.Equals(other.ItemType)
                ) && 
                (
                    ItemTypeText == other.ItemTypeText ||
                    ItemTypeText != null &&
                    ItemTypeText.Equals(other.ItemTypeText)
                ) && 
                (
                    LastStatus == other.LastStatus ||
                    LastStatus != null &&
                    LastStatus.Equals(other.LastStatus)
                ) && 
                (
                    LineNumber == other.LineNumber ||
                    LineNumber != null &&
                    LineNumber.Equals(other.LineNumber)
                ) && 
                (
                    LotNumber == other.LotNumber ||
                    LotNumber != null &&
                    LotNumber.Equals(other.LotNumber)
                ) && 
                (
                    ModifiedBy == other.ModifiedBy ||
                    ModifiedBy != null &&
                    ModifiedBy.Equals(other.ModifiedBy)
                ) && 
                (
                    ModifiedDate == other.ModifiedDate ||
                    ModifiedDate != null &&
                    ModifiedDate.Equals(other.ModifiedDate)
                ) && 
                (
                    NextStatus == other.NextStatus ||
                    NextStatus != null &&
                    NextStatus.Equals(other.NextStatus)
                ) && 
                (
                    OrderId == other.OrderId ||
                    OrderId != null &&
                    OrderId.Equals(other.OrderId)
                ) && 
                (
                    OrderNumber == other.OrderNumber ||
                    OrderNumber != null &&
                    OrderNumber.Equals(other.OrderNumber)
                ) && 
                (
                    OrderProductGuid == other.OrderProductGuid ||
                    OrderProductGuid != null &&
                    OrderProductGuid.Equals(other.OrderProductGuid)
                ) && 
                (
                    OrderProductId == other.OrderProductId ||
                    OrderProductId != null &&
                    OrderProductId.Equals(other.OrderProductId)
                ) && 
                (
                    PackingItemCode == other.PackingItemCode ||
                    PackingItemCode != null &&
                    PackingItemCode.Equals(other.PackingItemCode)
                ) && 
                (
                    PackingItemCount == other.PackingItemCount ||
                    PackingItemCount != null &&
                    PackingItemCount.Equals(other.PackingItemCount)
                ) && 
                (
                    PalletNumber == other.PalletNumber ||
                    PalletNumber != null &&
                    PalletNumber.Equals(other.PalletNumber)
                ) && 
                (
                    ParentProductCode == other.ParentProductCode ||
                    ParentProductCode != null &&
                    ParentProductCode.Equals(other.ParentProductCode)
                ) && 
                (
                    ProductCode == other.ProductCode ||
                    ProductCode != null &&
                    ProductCode.Equals(other.ProductCode)
                ) && 
                (
                    ProductName == other.ProductName ||
                    ProductName != null &&
                    ProductName.Equals(other.ProductName)
                ) && 
                (
                    ItemNameInDefaultLanguage == other.ItemNameInDefaultLanguage ||
                    ItemNameInDefaultLanguage != null &&
                    ItemNameInDefaultLanguage.Equals(other.ItemNameInDefaultLanguage)
                ) && 
                (
                    Brand == other.Brand ||
                    Brand != null &&
                    Brand.Equals(other.Brand)
                ) && 
                (
                    ProductQuantity == other.ProductQuantity ||
                    ProductQuantity != null &&
                    ProductQuantity.Equals(other.ProductQuantity)
                ) && 
                (
                    ProductType == other.ProductType ||
                    ProductType != null &&
                    ProductType.Equals(other.ProductType)
                ) && 
                (
                    ReferenceOrderId == other.ReferenceOrderId ||
                    ReferenceOrderId != null &&
                    ReferenceOrderId.Equals(other.ReferenceOrderId)
                ) && 
                (
                    ReferenceOrderProductId == other.ReferenceOrderProductId ||
                    ReferenceOrderProductId != null &&
                    ReferenceOrderProductId.Equals(other.ReferenceOrderProductId)
                ) && 
                (
                    Remarks == other.Remarks ||
                    Remarks != null &&
                    Remarks.Equals(other.Remarks)
                ) && 
                (
                    ReplacementParentProductId == other.ReplacementParentProductId ||
                    ReplacementParentProductId != null &&
                    ReplacementParentProductId.Equals(other.ReplacementParentProductId)
                ) && 
                (
                    ReturnQuantity == other.ReturnQuantity ||
                    ReturnQuantity != null &&
                    ReturnQuantity.Equals(other.ReturnQuantity)
                ) && 
                (
                    ShippableQuantity == other.ShippableQuantity ||
                    ShippableQuantity != null &&
                    ShippableQuantity.Equals(other.ShippableQuantity)
                ) && 
                (
                    SignalValue == other.SignalValue ||
                    SignalValue != null &&
                    SignalValue.Equals(other.SignalValue)
                ) && 
                (
                    StockLocationCode == other.StockLocationCode ||
                    StockLocationCode != null &&
                    StockLocationCode.Equals(other.StockLocationCode)
                ) && 
                (
                    StockLocationName == other.StockLocationName ||
                    StockLocationName != null &&
                    StockLocationName.Equals(other.StockLocationName)
                ) && 
                (
                    TotalUnitPrice == other.TotalUnitPrice ||
                    TotalUnitPrice != null &&
                    TotalUnitPrice.Equals(other.TotalUnitPrice)
                ) && 
                (
                    TotalVolume == other.TotalVolume ||
                    TotalVolume != null &&
                    TotalVolume.Equals(other.TotalVolume)
                ) && 
                (
                    TotalValue == other.TotalValue ||
                    TotalValue != null &&
                    TotalValue.Equals(other.TotalValue)
                ) && 
                (
                    TotalWeight == other.TotalWeight ||
                    TotalWeight != null &&
                    TotalWeight.Equals(other.TotalWeight)
                ) && 
                (
                    UnitPrice == other.UnitPrice ||
                    UnitPrice != null &&
                    UnitPrice.Equals(other.UnitPrice)
                ) && 
                (
                    Uom == other.Uom ||
                    Uom != null &&
                    Uom.Equals(other.Uom)
                ) && 
                (
                    NumberOfPromotions == other.NumberOfPromotions ||
                    NumberOfPromotions != null &&
                    NumberOfPromotions.Equals(other.NumberOfPromotions)
                ) && 
                (
                    AdditionalQuantity == other.AdditionalQuantity ||
                    AdditionalQuantity != null &&
                    AdditionalQuantity.Equals(other.AdditionalQuantity)
                ) && 
                (
                    AvailableNumberOfPromotions == other.AvailableNumberOfPromotions ||
                    AvailableNumberOfPromotions != null &&
                    AvailableNumberOfPromotions.Equals(other.AvailableNumberOfPromotions)
                ) && 
                (
                    AvailableAdditionalQuantity == other.AvailableAdditionalQuantity ||
                    AvailableAdditionalQuantity != null &&
                    AvailableAdditionalQuantity.Equals(other.AvailableAdditionalQuantity)
                ) && 
                (
                    PromotionRefId == other.PromotionRefId ||
                    PromotionRefId != null &&
                    PromotionRefId.Equals(other.PromotionRefId)
                ) && 
                (
                    ImageUrl == other.ImageUrl ||
                    ImageUrl != null &&
                    ImageUrl.Equals(other.ImageUrl)
                ) && 
                (
                    OrderFeedbackList == other.OrderFeedbackList ||
                    OrderFeedbackList != null &&
                    OrderFeedbackList.SequenceEqual(other.OrderFeedbackList)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (AssociatedOrder != null)
                    hashCode = hashCode * 59 + AssociatedOrder.GetHashCode();
                    if (AssociatedOrderNumber != null)
                    hashCode = hashCode * 59 + AssociatedOrderNumber.GetHashCode();
                    if (BackOrderQuantity != null)
                    hashCode = hashCode * 59 + BackOrderQuantity.GetHashCode();
                    if (CancelledQuantity != null)
                    hashCode = hashCode * 59 + CancelledQuantity.GetHashCode();
                    if (CollectedQuantity != null)
                    hashCode = hashCode * 59 + CollectedQuantity.GetHashCode();
                    if (CompanyCode != null)
                    hashCode = hashCode * 59 + CompanyCode.GetHashCode();
                    if (CompanyId != null)
                    hashCode = hashCode * 59 + CompanyId.GetHashCode();
                    if (CreatedBy != null)
                    hashCode = hashCode * 59 + CreatedBy.GetHashCode();
                    if (CreatedDate != null)
                    hashCode = hashCode * 59 + CreatedDate.GetHashCode();
                    if (DeliveredQuantity != null)
                    hashCode = hashCode * 59 + DeliveredQuantity.GetHashCode();
                    if (DepositeAmount != null)
                    hashCode = hashCode * 59 + DepositeAmount.GetHashCode();
                    if (DiscountAmount != null)
                    hashCode = hashCode * 59 + DiscountAmount.GetHashCode();
                    if (DiscountPercent != null)
                    hashCode = hashCode * 59 + DiscountPercent.GetHashCode();
                    if (EffectiveDate != null)
                    hashCode = hashCode * 59 + EffectiveDate.GetHashCode();
                    if (Field1 != null)
                    hashCode = hashCode * 59 + Field1.GetHashCode();
                    if (Field10 != null)
                    hashCode = hashCode * 59 + Field10.GetHashCode();
                    if (Field2 != null)
                    hashCode = hashCode * 59 + Field2.GetHashCode();
                    if (Field3 != null)
                    hashCode = hashCode * 59 + Field3.GetHashCode();
                    if (Field4 != null)
                    hashCode = hashCode * 59 + Field4.GetHashCode();
                    if (Field5 != null)
                    hashCode = hashCode * 59 + Field5.GetHashCode();
                    if (Field6 != null)
                    hashCode = hashCode * 59 + Field6.GetHashCode();
                    if (Field7 != null)
                    hashCode = hashCode * 59 + Field7.GetHashCode();
                    if (Field8 != null)
                    hashCode = hashCode * 59 + Field8.GetHashCode();
                    if (Field9 != null)
                    hashCode = hashCode * 59 + Field9.GetHashCode();
                    if (InvoiceNumber != null)
                    hashCode = hashCode * 59 + InvoiceNumber.GetHashCode();
                    if (IsActive != null)
                    hashCode = hashCode * 59 + IsActive.GetHashCode();
                    if (IsGRN != null)
                    hashCode = hashCode * 59 + IsGRN.GetHashCode();
                    if (IsPackingItem != null)
                    hashCode = hashCode * 59 + IsPackingItem.GetHashCode();
                    if (IsProductShipConfirmed != null)
                    hashCode = hashCode * 59 + IsProductShipConfirmed.GetHashCode();
                    if (IsReplaceable != null)
                    hashCode = hashCode * 59 + IsReplaceable.GetHashCode();
                    if (ItemType != null)
                    hashCode = hashCode * 59 + ItemType.GetHashCode();
                    if (ItemTypeText != null)
                    hashCode = hashCode * 59 + ItemTypeText.GetHashCode();
                    if (LastStatus != null)
                    hashCode = hashCode * 59 + LastStatus.GetHashCode();
                    if (LineNumber != null)
                    hashCode = hashCode * 59 + LineNumber.GetHashCode();
                    if (LotNumber != null)
                    hashCode = hashCode * 59 + LotNumber.GetHashCode();
                    if (ModifiedBy != null)
                    hashCode = hashCode * 59 + ModifiedBy.GetHashCode();
                    if (ModifiedDate != null)
                    hashCode = hashCode * 59 + ModifiedDate.GetHashCode();
                    if (NextStatus != null)
                    hashCode = hashCode * 59 + NextStatus.GetHashCode();
                    if (OrderId != null)
                    hashCode = hashCode * 59 + OrderId.GetHashCode();
                    if (OrderNumber != null)
                    hashCode = hashCode * 59 + OrderNumber.GetHashCode();
                    if (OrderProductGuid != null)
                    hashCode = hashCode * 59 + OrderProductGuid.GetHashCode();
                    if (OrderProductId != null)
                    hashCode = hashCode * 59 + OrderProductId.GetHashCode();
                    if (PackingItemCode != null)
                    hashCode = hashCode * 59 + PackingItemCode.GetHashCode();
                    if (PackingItemCount != null)
                    hashCode = hashCode * 59 + PackingItemCount.GetHashCode();
                    if (PalletNumber != null)
                    hashCode = hashCode * 59 + PalletNumber.GetHashCode();
                    if (ParentProductCode != null)
                    hashCode = hashCode * 59 + ParentProductCode.GetHashCode();
                    if (ProductCode != null)
                    hashCode = hashCode * 59 + ProductCode.GetHashCode();
                    if (ProductName != null)
                    hashCode = hashCode * 59 + ProductName.GetHashCode();
                    if (ItemNameInDefaultLanguage != null)
                    hashCode = hashCode * 59 + ItemNameInDefaultLanguage.GetHashCode();
                    if (Brand != null)
                    hashCode = hashCode * 59 + Brand.GetHashCode();
                    if (ProductQuantity != null)
                    hashCode = hashCode * 59 + ProductQuantity.GetHashCode();
                    if (ProductType != null)
                    hashCode = hashCode * 59 + ProductType.GetHashCode();
                    if (ReferenceOrderId != null)
                    hashCode = hashCode * 59 + ReferenceOrderId.GetHashCode();
                    if (ReferenceOrderProductId != null)
                    hashCode = hashCode * 59 + ReferenceOrderProductId.GetHashCode();
                    if (Remarks != null)
                    hashCode = hashCode * 59 + Remarks.GetHashCode();
                    if (ReplacementParentProductId != null)
                    hashCode = hashCode * 59 + ReplacementParentProductId.GetHashCode();
                    if (ReturnQuantity != null)
                    hashCode = hashCode * 59 + ReturnQuantity.GetHashCode();
                    if (ShippableQuantity != null)
                    hashCode = hashCode * 59 + ShippableQuantity.GetHashCode();
                    if (SignalValue != null)
                    hashCode = hashCode * 59 + SignalValue.GetHashCode();
                    if (StockLocationCode != null)
                    hashCode = hashCode * 59 + StockLocationCode.GetHashCode();
                    if (StockLocationName != null)
                    hashCode = hashCode * 59 + StockLocationName.GetHashCode();
                    if (TotalUnitPrice != null)
                    hashCode = hashCode * 59 + TotalUnitPrice.GetHashCode();
                    if (TotalVolume != null)
                    hashCode = hashCode * 59 + TotalVolume.GetHashCode();
                    if (TotalValue != null)
                    hashCode = hashCode * 59 + TotalValue.GetHashCode();
                    if (TotalWeight != null)
                    hashCode = hashCode * 59 + TotalWeight.GetHashCode();
                    if (UnitPrice != null)
                    hashCode = hashCode * 59 + UnitPrice.GetHashCode();
                    if (Uom != null)
                    hashCode = hashCode * 59 + Uom.GetHashCode();
                    if (NumberOfPromotions != null)
                    hashCode = hashCode * 59 + NumberOfPromotions.GetHashCode();
                    if (AdditionalQuantity != null)
                    hashCode = hashCode * 59 + AdditionalQuantity.GetHashCode();
                    if (AvailableNumberOfPromotions != null)
                    hashCode = hashCode * 59 + AvailableNumberOfPromotions.GetHashCode();
                    if (AvailableAdditionalQuantity != null)
                    hashCode = hashCode * 59 + AvailableAdditionalQuantity.GetHashCode();
                    if (PromotionRefId != null)
                    hashCode = hashCode * 59 + PromotionRefId.GetHashCode();
                    if (ImageUrl != null)
                    hashCode = hashCode * 59 + ImageUrl.GetHashCode();
                    if (OrderFeedbackList != null)
                    hashCode = hashCode * 59 + OrderFeedbackList.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(GlassRUNServiceWebApiManageOrderDTOOrderProductDTO left, GlassRUNServiceWebApiManageOrderDTOOrderProductDTO right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(GlassRUNServiceWebApiManageOrderDTOOrderProductDTO left, GlassRUNServiceWebApiManageOrderDTOOrderProductDTO right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
