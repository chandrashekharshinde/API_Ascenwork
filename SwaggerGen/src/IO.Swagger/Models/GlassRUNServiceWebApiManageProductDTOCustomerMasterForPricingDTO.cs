/*
 * WebAPIBuild
 *
 * This is glassRUN web api library for 3rd party and internal reference
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class GlassRUNServiceWebApiManageProductDTOCustomerMasterForPricingDTO : IEquatable<GlassRUNServiceWebApiManageProductDTOCustomerMasterForPricingDTO>
    { 
        /// <summary>
        /// Gets or Sets CustomerMasterForPricingID
        /// </summary>
        [DataMember(Name="customerMasterForPricingID")]
        public long? CustomerMasterForPricingID { get; set; }

        /// <summary>
        /// Gets or Sets CustomerNumber
        /// </summary>
        [DataMember(Name="customerNumber")]
        public string CustomerNumber { get; set; }

        /// <summary>
        /// Gets or Sets CustomerPriceGroup
        /// </summary>
        [DataMember(Name="customerPriceGroup")]
        public string CustomerPriceGroup { get; set; }

        /// <summary>
        /// Gets or Sets PriorityRating
        /// </summary>
        [DataMember(Name="priorityRating")]
        public string PriorityRating { get; set; }

        /// <summary>
        /// Gets or Sets CustomerGroupName
        /// </summary>
        [DataMember(Name="customerGroupName")]
        public string CustomerGroupName { get; set; }

        /// <summary>
        /// Gets or Sets GroupCode
        /// </summary>
        [DataMember(Name="groupCode")]
        public string GroupCode { get; set; }

        /// <summary>
        /// Gets or Sets CompanyId
        /// </summary>
        [DataMember(Name="companyId")]
        public long? CompanyId { get; set; }

        /// <summary>
        /// Gets or Sets CreatedBy
        /// </summary>
        [DataMember(Name="createdBy")]
        public long? CreatedBy { get; set; }

        /// <summary>
        /// Gets or Sets CompanyCode
        /// </summary>
        [DataMember(Name="companyCode")]
        public string CompanyCode { get; set; }

        /// <summary>
        /// Gets or Sets IsActive
        /// </summary>
        [DataMember(Name="isActive")]
        public bool? IsActive { get; set; }

        /// <summary>
        /// Gets or Sets Img
        /// </summary>
        [DataMember(Name="img")]
        public string Img { get; set; }

        /// <summary>
        /// Gets or Sets CustomerMasterForPricingList
        /// </summary>
        [DataMember(Name="customerMasterForPricingList")]
        public Collection<GlassRUNServiceWebApiManageProductDTOCustomerMasterForPricingDTO> CustomerMasterForPricingList { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class GlassRUNServiceWebApiManageProductDTOCustomerMasterForPricingDTO {\n");
            sb.Append("  CustomerMasterForPricingID: ").Append(CustomerMasterForPricingID).Append("\n");
            sb.Append("  CustomerNumber: ").Append(CustomerNumber).Append("\n");
            sb.Append("  CustomerPriceGroup: ").Append(CustomerPriceGroup).Append("\n");
            sb.Append("  PriorityRating: ").Append(PriorityRating).Append("\n");
            sb.Append("  CustomerGroupName: ").Append(CustomerGroupName).Append("\n");
            sb.Append("  GroupCode: ").Append(GroupCode).Append("\n");
            sb.Append("  CompanyId: ").Append(CompanyId).Append("\n");
            sb.Append("  CreatedBy: ").Append(CreatedBy).Append("\n");
            sb.Append("  CompanyCode: ").Append(CompanyCode).Append("\n");
            sb.Append("  IsActive: ").Append(IsActive).Append("\n");
            sb.Append("  Img: ").Append(Img).Append("\n");
            sb.Append("  CustomerMasterForPricingList: ").Append(CustomerMasterForPricingList).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((GlassRUNServiceWebApiManageProductDTOCustomerMasterForPricingDTO)obj);
        }

        /// <summary>
        /// Returns true if GlassRUNServiceWebApiManageProductDTOCustomerMasterForPricingDTO instances are equal
        /// </summary>
        /// <param name="other">Instance of GlassRUNServiceWebApiManageProductDTOCustomerMasterForPricingDTO to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(GlassRUNServiceWebApiManageProductDTOCustomerMasterForPricingDTO other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    CustomerMasterForPricingID == other.CustomerMasterForPricingID ||
                    CustomerMasterForPricingID != null &&
                    CustomerMasterForPricingID.Equals(other.CustomerMasterForPricingID)
                ) && 
                (
                    CustomerNumber == other.CustomerNumber ||
                    CustomerNumber != null &&
                    CustomerNumber.Equals(other.CustomerNumber)
                ) && 
                (
                    CustomerPriceGroup == other.CustomerPriceGroup ||
                    CustomerPriceGroup != null &&
                    CustomerPriceGroup.Equals(other.CustomerPriceGroup)
                ) && 
                (
                    PriorityRating == other.PriorityRating ||
                    PriorityRating != null &&
                    PriorityRating.Equals(other.PriorityRating)
                ) && 
                (
                    CustomerGroupName == other.CustomerGroupName ||
                    CustomerGroupName != null &&
                    CustomerGroupName.Equals(other.CustomerGroupName)
                ) && 
                (
                    GroupCode == other.GroupCode ||
                    GroupCode != null &&
                    GroupCode.Equals(other.GroupCode)
                ) && 
                (
                    CompanyId == other.CompanyId ||
                    CompanyId != null &&
                    CompanyId.Equals(other.CompanyId)
                ) && 
                (
                    CreatedBy == other.CreatedBy ||
                    CreatedBy != null &&
                    CreatedBy.Equals(other.CreatedBy)
                ) && 
                (
                    CompanyCode == other.CompanyCode ||
                    CompanyCode != null &&
                    CompanyCode.Equals(other.CompanyCode)
                ) && 
                (
                    IsActive == other.IsActive ||
                    IsActive != null &&
                    IsActive.Equals(other.IsActive)
                ) && 
                (
                    Img == other.Img ||
                    Img != null &&
                    Img.Equals(other.Img)
                ) && 
                (
                    CustomerMasterForPricingList == other.CustomerMasterForPricingList ||
                    CustomerMasterForPricingList != null &&
                    CustomerMasterForPricingList.SequenceEqual(other.CustomerMasterForPricingList)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (CustomerMasterForPricingID != null)
                    hashCode = hashCode * 59 + CustomerMasterForPricingID.GetHashCode();
                    if (CustomerNumber != null)
                    hashCode = hashCode * 59 + CustomerNumber.GetHashCode();
                    if (CustomerPriceGroup != null)
                    hashCode = hashCode * 59 + CustomerPriceGroup.GetHashCode();
                    if (PriorityRating != null)
                    hashCode = hashCode * 59 + PriorityRating.GetHashCode();
                    if (CustomerGroupName != null)
                    hashCode = hashCode * 59 + CustomerGroupName.GetHashCode();
                    if (GroupCode != null)
                    hashCode = hashCode * 59 + GroupCode.GetHashCode();
                    if (CompanyId != null)
                    hashCode = hashCode * 59 + CompanyId.GetHashCode();
                    if (CreatedBy != null)
                    hashCode = hashCode * 59 + CreatedBy.GetHashCode();
                    if (CompanyCode != null)
                    hashCode = hashCode * 59 + CompanyCode.GetHashCode();
                    if (IsActive != null)
                    hashCode = hashCode * 59 + IsActive.GetHashCode();
                    if (Img != null)
                    hashCode = hashCode * 59 + Img.GetHashCode();
                    if (CustomerMasterForPricingList != null)
                    hashCode = hashCode * 59 + CustomerMasterForPricingList.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(GlassRUNServiceWebApiManageProductDTOCustomerMasterForPricingDTO left, GlassRUNServiceWebApiManageProductDTOCustomerMasterForPricingDTO right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(GlassRUNServiceWebApiManageProductDTOCustomerMasterForPricingDTO left, GlassRUNServiceWebApiManageProductDTOCustomerMasterForPricingDTO right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
